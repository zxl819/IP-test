
build/softmax-LMUL8/test.elf:     file format elf64-littleriscv


Disassembly of section .text.init:

0000000080000000 <_start>:
#endif

  .section ".text.init"
  .globl _start
_start:
  li  x1, 0
    80000000:	4081                	li	ra,0
  li  x2, 0
    80000002:	4101                	li	sp,0
  li  x3, 0
    80000004:	4181                	li	gp,0
  li  x4, 0
    80000006:	4201                	li	tp,0
  li  x5, 0
    80000008:	4281                	li	t0,0
  li  x6, 0
    8000000a:	4301                	li	t1,0
  li  x7, 0
    8000000c:	4381                	li	t2,0
  li  x8, 0
    8000000e:	4401                	li	s0,0
  li  x9, 0
    80000010:	4481                	li	s1,0
  li  x10,0
    80000012:	4501                	li	a0,0
  li  x11,0
    80000014:	4581                	li	a1,0
  li  x12,0
    80000016:	4601                	li	a2,0
  li  x13,0
    80000018:	4681                	li	a3,0
  li  x14,0
    8000001a:	4701                	li	a4,0
  li  x15,0
    8000001c:	4781                	li	a5,0
  li  x16,0
    8000001e:	4801                	li	a6,0
  li  x17,0
    80000020:	4881                	li	a7,0
  li  x18,0
    80000022:	4901                	li	s2,0
  li  x19,0
    80000024:	4981                	li	s3,0
  li  x20,0
    80000026:	4a01                	li	s4,0
  li  x21,0
    80000028:	4a81                	li	s5,0
  li  x22,0
    8000002a:	4b01                	li	s6,0
  li  x23,0
    8000002c:	4b81                	li	s7,0
  li  x24,0
    8000002e:	4c01                	li	s8,0
  li  x25,0
    80000030:	4c81                	li	s9,0
  li  x26,0
    80000032:	4d01                	li	s10,0
  li  x27,0
    80000034:	4d81                	li	s11,0
  li  x28,0
    80000036:	4e01                	li	t3,0
  li  x29,0
    80000038:	4e81                	li	t4,0
  li  x30,0
    8000003a:	4f01                	li	t5,0
  li  x31,0
    8000003c:	4f81                	li	t6,0

  # enable FPU and accelerator if present
  li t0, MSTATUS_FS | MSTATUS_XS | MSTATUS_VS
    8000003e:	62f9                	lui	t0,0x1e
    80000040:	60028293          	addi	t0,t0,1536 # 1e600 <putchar.buflen+0x1e5c0>
  csrs mstatus, t0
    80000044:	3002a073          	csrs	mstatus,t0

  # make sure XLEN agrees with compilation choice
  li t0, 1
    80000048:	4285                	li	t0,1
  slli t0, t0, 31
    8000004a:	02fe                	slli	t0,t0,0x1f
#if __riscv_xlen == 64
  bgez t0, 1f
    8000004c:	0002d863          	bgez	t0,8000005c <_start+0x5c>
#else
  bltz t0, 1f
#endif
2:
  li a0, 1
    80000050:	4505                	li	a0,1
  sw a0, tohost, t0
    80000052:	00002297          	auipc	t0,0x2
    80000056:	faa2a723          	sw	a0,-82(t0) # 80002000 <tohost>
  j 2b
    8000005a:	bfdd                	j	80000050 <_start+0x50>
1:

#ifdef __riscv_flen
  # initialize FPU if we have one
  la t0, 1f
    8000005c:	00000297          	auipc	t0,0x0
    80000060:	09028293          	addi	t0,t0,144 # 800000ec <_start+0xec>
  csrw mtvec, t0
    80000064:	30529073          	csrw	mtvec,t0

  fssr    x0
    80000068:	00301073          	fscsr	zero
  fmv.s.x f0, x0
    8000006c:	f0000053          	fmv.w.x	ft0,zero
  fmv.s.x f1, x0
    80000070:	f00000d3          	fmv.w.x	ft1,zero
  fmv.s.x f2, x0
    80000074:	f0000153          	fmv.w.x	ft2,zero
  fmv.s.x f3, x0
    80000078:	f00001d3          	fmv.w.x	ft3,zero
  fmv.s.x f4, x0
    8000007c:	f0000253          	fmv.w.x	ft4,zero
  fmv.s.x f5, x0
    80000080:	f00002d3          	fmv.w.x	ft5,zero
  fmv.s.x f6, x0
    80000084:	f0000353          	fmv.w.x	ft6,zero
  fmv.s.x f7, x0
    80000088:	f00003d3          	fmv.w.x	ft7,zero
  fmv.s.x f8, x0
    8000008c:	f0000453          	fmv.w.x	fs0,zero
  fmv.s.x f9, x0
    80000090:	f00004d3          	fmv.w.x	fs1,zero
  fmv.s.x f10,x0
    80000094:	f0000553          	fmv.w.x	fa0,zero
  fmv.s.x f11,x0
    80000098:	f00005d3          	fmv.w.x	fa1,zero
  fmv.s.x f12,x0
    8000009c:	f0000653          	fmv.w.x	fa2,zero
  fmv.s.x f13,x0
    800000a0:	f00006d3          	fmv.w.x	fa3,zero
  fmv.s.x f14,x0
    800000a4:	f0000753          	fmv.w.x	fa4,zero
  fmv.s.x f15,x0
    800000a8:	f00007d3          	fmv.w.x	fa5,zero
  fmv.s.x f16,x0
    800000ac:	f0000853          	fmv.w.x	fa6,zero
  fmv.s.x f17,x0
    800000b0:	f00008d3          	fmv.w.x	fa7,zero
  fmv.s.x f18,x0
    800000b4:	f0000953          	fmv.w.x	fs2,zero
  fmv.s.x f19,x0
    800000b8:	f00009d3          	fmv.w.x	fs3,zero
  fmv.s.x f20,x0
    800000bc:	f0000a53          	fmv.w.x	fs4,zero
  fmv.s.x f21,x0
    800000c0:	f0000ad3          	fmv.w.x	fs5,zero
  fmv.s.x f22,x0
    800000c4:	f0000b53          	fmv.w.x	fs6,zero
  fmv.s.x f23,x0
    800000c8:	f0000bd3          	fmv.w.x	fs7,zero
  fmv.s.x f24,x0
    800000cc:	f0000c53          	fmv.w.x	fs8,zero
  fmv.s.x f25,x0
    800000d0:	f0000cd3          	fmv.w.x	fs9,zero
  fmv.s.x f26,x0
    800000d4:	f0000d53          	fmv.w.x	fs10,zero
  fmv.s.x f27,x0
    800000d8:	f0000dd3          	fmv.w.x	fs11,zero
  fmv.s.x f28,x0
    800000dc:	f0000e53          	fmv.w.x	ft8,zero
  fmv.s.x f29,x0
    800000e0:	f0000ed3          	fmv.w.x	ft9,zero
  fmv.s.x f30,x0
    800000e4:	f0000f53          	fmv.w.x	ft10,zero
  fmv.s.x f31,x0
    800000e8:	f0000fd3          	fmv.w.x	ft11,zero
1:
#endif

  # initialize trap vector
  la t0, trap_entry
    800000ec:	00000297          	auipc	t0,0x0
    800000f0:	03c28293          	addi	t0,t0,60 # 80000128 <trap_entry>
  csrw mtvec, t0
    800000f4:	30529073          	csrw	mtvec,t0

  # initialize global pointer
.option push
.option norelax
  la gp, __global_pointer$
    800000f8:	00002197          	auipc	gp,0x2
    800000fc:	2e018193          	addi	gp,gp,736 # 800023d8 <__global_pointer$>
.option pop

  la  tp, _end + 63
    80000100:	00140217          	auipc	tp,0x140
    80000104:	f3f20213          	addi	tp,tp,-193 # 8014003f <_end+0x3f>
  and tp, tp, -64
    80000108:	fc027213          	andi	tp,tp,-64

  # get core id
  csrr a0, mhartid
    8000010c:	f1402573          	csrr	a0,mhartid
#ifndef CORENUMS
  # for now, assume only 1 core
  li a1, 1
    80000110:	4585                	li	a1,1
1:bgeu a0, a1, 1b
    80000112:	00b57063          	bgeu	a0,a1,80000112 <_start+0x112>
#endif

  # give each core 128KB of stack + TLS
#define STKSHIFT 17
  add sp, a0, 1
    80000116:	00150113          	addi	sp,a0,1
  sll sp, sp, STKSHIFT
    8000011a:	0146                	slli	sp,sp,0x11
  add sp, sp, tp
    8000011c:	9112                	add	sp,sp,tp
  sll a2, a0, STKSHIFT
    8000011e:	01151613          	slli	a2,a0,0x11
  add tp, tp, a2
    80000122:	9232                	add	tp,tp,a2

  j _init
    80000124:	7720006f          	j	80000896 <_init>

0000000080000128 <trap_entry>:

  .align 2
trap_entry:
  addi sp, sp, -272
    80000128:	716d                	addi	sp,sp,-272

  # goto trap handler if not exit ecall
  csrr t5, mcause
    8000012a:	34202f73          	csrr	t5,mcause
  li t6, CAUSE_MACHINE_ECALL
    8000012e:	4fad                	li	t6,11
  bne t5, t6, 2f
    80000130:	03ff1b63          	bne	t5,t6,80000166 <trap_entry+0x3e>

  # skip flush signature cache lines if on spike
  csrr t2, marchid
    80000134:	f12023f3          	csrr	t2,marchid
  li t3, 5
    80000138:	4e15                	li	t3,5
  beq t2, t3, 3f
    8000013a:	03c38463          	beq	t2,t3,80000162 <trap_entry+0x3a>

  # flush signature cache lines
  la t0, begin_signature
    8000013e:	00100297          	auipc	t0,0x100
    80000142:	ec228293          	addi	t0,t0,-318 # 80100000 <begin_signature>
  la t1, end_signature
    80000146:	00100317          	auipc	t1,0x100
    8000014a:	eba30313          	addi	t1,t1,-326 # 80100000 <begin_signature>
  addi t1, t1, 0x40
    8000014e:	04030313          	addi	t1,t1,64
  li t2, 0x2010000
    80000152:	020103b7          	lui	t2,0x2010
4:
  sd t0, 0x200(t2)
    80000156:	2053b023          	sd	t0,512(t2) # 2010200 <putchar.buflen+0x20101c0>
  addi t0, t0, 64
    8000015a:	04028293          	addi	t0,t0,64
  blt t0, t1, 4b
    8000015e:	fe62cce3          	blt	t0,t1,80000156 <trap_entry+0x2e>

  # exit simulation
3:
  j tohost_exit
    80000162:	6280006f          	j	8000078a <tohost_exit>

2:

  SREG x1, 1*REGBYTES(sp)
    80000166:	e406                	sd	ra,8(sp)
  SREG x2, 2*REGBYTES(sp)
    80000168:	e80a                	sd	sp,16(sp)
  SREG x3, 3*REGBYTES(sp)
    8000016a:	ec0e                	sd	gp,24(sp)
  SREG x4, 4*REGBYTES(sp)
    8000016c:	f012                	sd	tp,32(sp)
  SREG x5, 5*REGBYTES(sp)
    8000016e:	f416                	sd	t0,40(sp)
  SREG x6, 6*REGBYTES(sp)
    80000170:	f81a                	sd	t1,48(sp)
  SREG x7, 7*REGBYTES(sp)
    80000172:	fc1e                	sd	t2,56(sp)
  SREG x8, 8*REGBYTES(sp)
    80000174:	e0a2                	sd	s0,64(sp)
  SREG x9, 9*REGBYTES(sp)
    80000176:	e4a6                	sd	s1,72(sp)
  SREG x10, 10*REGBYTES(sp)
    80000178:	e8aa                	sd	a0,80(sp)
  SREG x11, 11*REGBYTES(sp)
    8000017a:	ecae                	sd	a1,88(sp)
  SREG x12, 12*REGBYTES(sp)
    8000017c:	f0b2                	sd	a2,96(sp)
  SREG x13, 13*REGBYTES(sp)
    8000017e:	f4b6                	sd	a3,104(sp)
  SREG x14, 14*REGBYTES(sp)
    80000180:	f8ba                	sd	a4,112(sp)
  SREG x15, 15*REGBYTES(sp)
    80000182:	fcbe                	sd	a5,120(sp)
  SREG x16, 16*REGBYTES(sp)
    80000184:	e142                	sd	a6,128(sp)
  SREG x17, 17*REGBYTES(sp)
    80000186:	e546                	sd	a7,136(sp)
  SREG x18, 18*REGBYTES(sp)
    80000188:	e94a                	sd	s2,144(sp)
  SREG x19, 19*REGBYTES(sp)
    8000018a:	ed4e                	sd	s3,152(sp)
  SREG x20, 20*REGBYTES(sp)
    8000018c:	f152                	sd	s4,160(sp)
  SREG x21, 21*REGBYTES(sp)
    8000018e:	f556                	sd	s5,168(sp)
  SREG x22, 22*REGBYTES(sp)
    80000190:	f95a                	sd	s6,176(sp)
  SREG x23, 23*REGBYTES(sp)
    80000192:	fd5e                	sd	s7,184(sp)
  SREG x24, 24*REGBYTES(sp)
    80000194:	e1e2                	sd	s8,192(sp)
  SREG x25, 25*REGBYTES(sp)
    80000196:	e5e6                	sd	s9,200(sp)
  SREG x26, 26*REGBYTES(sp)
    80000198:	e9ea                	sd	s10,208(sp)
  SREG x27, 27*REGBYTES(sp)
    8000019a:	edee                	sd	s11,216(sp)
  SREG x28, 28*REGBYTES(sp)
    8000019c:	f1f2                	sd	t3,224(sp)
  SREG x29, 29*REGBYTES(sp)
    8000019e:	f5f6                	sd	t4,232(sp)
  SREG x30, 30*REGBYTES(sp)
    800001a0:	f9fa                	sd	t5,240(sp)
  SREG x31, 31*REGBYTES(sp)
    800001a2:	fdfe                	sd	t6,248(sp)

  csrr a0, mcause
    800001a4:	34202573          	csrr	a0,mcause
  csrr a1, mepc
    800001a8:	341025f3          	csrr	a1,mepc
  mv a2, sp
    800001ac:	860a                	mv	a2,sp
  jal handle_trap
    800001ae:	5ea000ef          	jal	80000798 <handle_trap>
  csrw mepc, a0
    800001b2:	34151073          	csrw	mepc,a0

  # Remain in M-mode after eret
  li t0, MSTATUS_MPP
    800001b6:	428d                	li	t0,3
    800001b8:	02ae                	slli	t0,t0,0xb
  csrs mstatus, t0
    800001ba:	3002a073          	csrs	mstatus,t0

  LREG x1, 1*REGBYTES(sp)
    800001be:	60a2                	ld	ra,8(sp)
  LREG x2, 2*REGBYTES(sp)
    800001c0:	6142                	ld	sp,16(sp)
  LREG x3, 3*REGBYTES(sp)
    800001c2:	61e2                	ld	gp,24(sp)
  LREG x4, 4*REGBYTES(sp)
    800001c4:	7202                	ld	tp,32(sp)
  LREG x5, 5*REGBYTES(sp)
    800001c6:	72a2                	ld	t0,40(sp)
  LREG x6, 6*REGBYTES(sp)
    800001c8:	7342                	ld	t1,48(sp)
  LREG x7, 7*REGBYTES(sp)
    800001ca:	73e2                	ld	t2,56(sp)
  LREG x8, 8*REGBYTES(sp)
    800001cc:	6406                	ld	s0,64(sp)
  LREG x9, 9*REGBYTES(sp)
    800001ce:	64a6                	ld	s1,72(sp)
  LREG x10, 10*REGBYTES(sp)
    800001d0:	6546                	ld	a0,80(sp)
  LREG x11, 11*REGBYTES(sp)
    800001d2:	65e6                	ld	a1,88(sp)
  LREG x12, 12*REGBYTES(sp)
    800001d4:	7606                	ld	a2,96(sp)
  LREG x13, 13*REGBYTES(sp)
    800001d6:	76a6                	ld	a3,104(sp)
  LREG x14, 14*REGBYTES(sp)
    800001d8:	7746                	ld	a4,112(sp)
  LREG x15, 15*REGBYTES(sp)
    800001da:	77e6                	ld	a5,120(sp)
  LREG x16, 16*REGBYTES(sp)
    800001dc:	680a                	ld	a6,128(sp)
  LREG x17, 17*REGBYTES(sp)
    800001de:	68aa                	ld	a7,136(sp)
  LREG x18, 18*REGBYTES(sp)
    800001e0:	694a                	ld	s2,144(sp)
  LREG x19, 19*REGBYTES(sp)
    800001e2:	69ea                	ld	s3,152(sp)
  LREG x20, 20*REGBYTES(sp)
    800001e4:	7a0a                	ld	s4,160(sp)
  LREG x21, 21*REGBYTES(sp)
    800001e6:	7aaa                	ld	s5,168(sp)
  LREG x22, 22*REGBYTES(sp)
    800001e8:	7b4a                	ld	s6,176(sp)
  LREG x23, 23*REGBYTES(sp)
    800001ea:	7bea                	ld	s7,184(sp)
  LREG x24, 24*REGBYTES(sp)
    800001ec:	6c0e                	ld	s8,192(sp)
  LREG x25, 25*REGBYTES(sp)
    800001ee:	6cae                	ld	s9,200(sp)
  LREG x26, 26*REGBYTES(sp)
    800001f0:	6d4e                	ld	s10,208(sp)
  LREG x27, 27*REGBYTES(sp)
    800001f2:	6dee                	ld	s11,216(sp)
  LREG x28, 28*REGBYTES(sp)
    800001f4:	7e0e                	ld	t3,224(sp)
  LREG x29, 29*REGBYTES(sp)
    800001f6:	7eae                	ld	t4,232(sp)
  LREG x30, 30*REGBYTES(sp)
    800001f8:	7f4e                	ld	t5,240(sp)
  LREG x31, 31*REGBYTES(sp)
    800001fa:	7fee                	ld	t6,248(sp)

  addi sp, sp, 272
    800001fc:	6151                	addi	sp,sp,272
  mret
    800001fe:	30200073          	mret

Disassembly of section .text:

0000000080000202 <main>:
// float golden[VLEN/32]={0.01962993f,0.19671424f,0.08201241f,0.04811186f,0.00819046f,0.00818966f,0.00553576f,0.14027424f,0.04858694f,0.07452876f,0.00476469f,0.21241336f,0.12256793f,0.01025998f,0.00908109f,0.00913865f};//,0.01011935f,0.02444698f,0.01686534f,0.00960609f,0.03463596f,0.00523547f,0.00964133f,0.01297375f,0.01857396f,0.06928197f,0.00666038f,0.02343940f,0.03204493f,0.00360847f,0.03404422f,0.00592735f};
// float diff_mem[VLEN/32]={0};
 float dst[N] = {0};
 float diff_mem[N] = {0};

int main(){
    80000202:	1141                	addi	sp,sp,-16
    80000204:	e406                	sd	ra,8(sp)
    //softmax_stable_rvv_fp32(dst,src,VLEN/32);
    // int a = 1;
    // int b = 2;
    // int c = a + b;
    softmax_stable_rvv_fp32(dst,src,N);
    80000206:	00002517          	auipc	a0,0x2
    8000020a:	00001597          	auipc	a1,0x1
    8000020e:	9d250513          	addi	a0,a0,-1582 # 80001bd8 <dst>
    80000212:	02658593          	addi	a1,a1,38 # 80001230 <src>
    80000216:	08000613          	li	a2,128
    8000021a:	00000097          	auipc	ra,0x0
    8000021e:	010080e7          	jalr	16(ra) # 8000022a <softmax_stable_rvv_fp32>

    //softmax_stable_rvv_fp32(dst, (float*)src, N);
    return 0;
    80000222:	4501                	li	a0,0
    80000224:	60a2                	ld	ra,8(sp)
    80000226:	0141                	addi	sp,sp,16
    80000228:	8082                	ret

000000008000022a <softmax_stable_rvv_fp32>:
}

// 完全避免标量浮点寄存器的版本
void softmax_stable_rvv_fp32(float* dst, float* src, size_t n)
{
    8000022a:	7159                	addi	sp,sp,-112
    8000022c:	f486                	sd	ra,104(sp)
    8000022e:	f0a2                	sd	s0,96(sp)
    80000230:	eca6                	sd	s1,88(sp)
    80000232:	e8ca                	sd	s2,80(sp)
    80000234:	e4ce                	sd	s3,72(sp)
    80000236:	e0d2                	sd	s4,64(sp)
    80000238:	fc56                	sd	s5,56(sp)
    8000023a:	80010113          	addi	sp,sp,-2048
    8000023e:	7131                	addi	sp,sp,-192
    80000240:	8932                	mv	s2,a2
    80000242:	89aa                	mv	s3,a0
    // // e^r 的 8 阶多项式系数（Horner）
    // const uint32_t C0 = 0x3F800000u, C1 = 0x3F800000u, C2 = 0x3F000000u;
    // const uint32_t C3 = 0x3E2AAAABu, C4 = 0x3D2AAAABu, C5 = 0x3C088889u;
    // const uint32_t C6 = 0x3AB60B61u, C7 = 0x3A1175D4u, C8 = 0x3926ED8Eu;

    const size_t vl1 = __riscv_vsetvlmax_e32m1(); 
    80000244:	0d007557          	vsetvli	a0,zero,e32,m1,ta,ma
    80000248:	40000537          	lui	a0,0x40000
    8000024c:	322bd637          	lui	a2,0x322bd
    80000250:	ff8006b7          	lui	a3,0xff800
    80000254:	c7760613          	addi	a2,a2,-905 # 322bcc77 <putchar.buflen+0x322bcc37>
    vfloat32m1_t vzero1   = __riscv_vreinterpret_v_u32m1_f32m1(__riscv_vmv_v_x_u32m1(0u,          vl1));
    vfloat32m1_t vtwo1    = __riscv_vreinterpret_v_u32m1_f32m1(__riscv_vmv_v_x_u32m1(BITS_TWO,    vl1));
    vfloat32m1_t veps1    = __riscv_vreinterpret_v_u32m1_f32m1(__riscv_vmv_v_x_u32m1(BITS_EPS,    vl1));
    vfloat32m1_t vneginf1 = __riscv_vreinterpret_v_u32m1_f32m1(__riscv_vmv_v_x_u32m1(BITS_NEG_INF,vl1));
    80000258:	5e06c457          	vmv.v.x	v8,a3

    // Pass-1：全局最大（块内 m8→m1 归约，跨块累积到 m1）
    float* src_orig = src;
    vfloat32m1_t vmax1 = vneginf1;
    size_t avl = n;
    while (avl > 0) {
    8000025c:	02090663          	beqz	s2,80000288 <softmax_stable_rvv_fp32+0x5e>
    80000260:	86ae                	mv	a3,a1
    80000262:	874a                	mv	a4,s2
    80000264:	9e8034d7          	vmv1r.v	v9,v8
        size_t vl = __riscv_vsetvl_e32m8(avl);
    80000268:	0d3777d7          	vsetvli	a5,a4,e32,m8,ta,ma
        vfloat32m8_t vx = __riscv_vle32_v_f32m8(src, vl);
    8000026c:	0206e807          	vle32.v	v16,(a3)
        vfloat32m1_t blk_max = __riscv_vfredmax_vs_f32m8_f32m1(vx, vneginf1, vl); // 这里传 vl
        vmax1 = __riscv_vfmax_vv_f32m1(vmax1, blk_max, vl1);
        avl -= vl; src += vl;
    80000270:	8f1d                	sub	a4,a4,a5
        vfloat32m1_t blk_max = __riscv_vfredmax_vs_f32m8_f32m1(vx, vneginf1, vl); // 这里传 vl
    80000272:	1f041557          	vfredmax.vs	v10,v16,v8
        avl -= vl; src += vl;
    80000276:	078a                	slli	a5,a5,0x2
        vmax1 = __riscv_vfmax_vv_f32m1(vmax1, blk_max, vl1);
    80000278:	0d0074d7          	vsetvli	s1,zero,e32,m1,ta,ma
    8000027c:	1a9514d7          	vfmax.vv	v9,v9,v10
        avl -= vl; src += vl;
    80000280:	96be                	add	a3,a3,a5
    while (avl > 0) {
    80000282:	f37d                	bnez	a4,80000268 <softmax_stable_rvv_fp32+0x3e>
    80000284:	9e903457          	vmv1r.v	v8,v9
    80000288:	5e0544d7          	vmv.v.x	v9,a0
    8000028c:	1888                	addi	a0,sp,112
    8000028e:	028504a7          	vs1r.v	v9,(a0)
    80000292:	5e0644d7          	vmv.v.x	v9,a2
    80000296:	1808                	addi	a0,sp,48
    80000298:	028504a7          	vs1r.v	v9,(a0)
    8000029c:	1008                	addi	a0,sp,32
    }
    src = src_orig;

    // 提取 max 的位并供广播使用
    uint32_t max_bits[1];
    __riscv_vse32_v_u32m1(max_bits, __riscv_vreinterpret_v_f32m1_u32m1(vmax1), vl1);
    8000029e:	02056427          	vse32.v	v8,(a0)

      // Pass-2: exp(x-max) + sum
    vfloat32m1_t vsum1 = vzero1;
    float* dst_orig = dst;
    for (size_t avl2 = n; avl2 > 0; ) {
    800002a2:	16090e63          	beqz	s2,8000041e <softmax_stable_rvv_fp32+0x1f4>
    800002a6:	4881                	li	a7,0
    800002a8:	3fb8b2b7          	lui	t0,0x3fb8b
    800002ac:	38801337          	lui	t1,0x38801
    800002b0:	0d3076d7          	vsetvli	a3,zero,e32,m8,ta,ma
    800002b4:	3f317e37          	lui	t3,0x3f317
    800002b8:	5382                	lw	t2,32(sp)
    800002ba:	3926feb7          	lui	t4,0x3926f
    800002be:	3a1176b7          	lui	a3,0x3a117
    800002c2:	3ab614b7          	lui	s1,0x3ab61
    800002c6:	3c089437          	lui	s0,0x3c089
    800002ca:	3d2ab537          	lui	a0,0x3d2ab
    800002ce:	3e2ab637          	lui	a2,0x3e2ab
    800002d2:	3f000837          	lui	a6,0x3f000
    800002d6:	a3b28713          	addi	a4,t0,-1477 # 3fb8aa3b <putchar.buflen+0x3fb8a9fb>
    800002da:	c0030793          	addi	a5,t1,-1024 # 38800c00 <putchar.buflen+0x38800bc0>
    800002de:	5e0e4457          	vmv.v.x	v8,t3
    800002e2:	4b010293          	addi	t0,sp,1200
    800002e6:	e2828427          	vs8r.v	v8,(t0)
    800002ea:	d8ee8e13          	addi	t3,t4,-626 # 3926ed8e <putchar.buflen+0x3926ed4e>
    800002ee:	5d468e93          	addi	t4,a3,1492 # 3a1175d4 <putchar.buflen+0x3a117594>
    800002f2:	b6148f13          	addi	t5,s1,-1183 # 3ab60b61 <putchar.buflen+0x3ab60b21>
    800002f6:	88940413          	addi	s0,s0,-1911 # 3c088889 <putchar.buflen+0x3c088849>
    800002fa:	aab50693          	addi	a3,a0,-1365 # 3d2aaaab <putchar.buflen+0x3d2aaa6b>
    800002fe:	aab60513          	addi	a0,a2,-1365 # 3e2aaaab <putchar.buflen+0x3e2aaa6b>
    80000302:	5e074457          	vmv.v.x	v8,a4
    80000306:	1d10                	addi	a2,sp,688
    80000308:	e2860427          	vs8r.v	v8,(a2)
    8000030c:	5e07c457          	vmv.v.x	v8,a5
    80000310:	1910                	addi	a2,sp,176
    80000312:	e2860427          	vs8r.v	v8,(a2)
    80000316:	3f8002b7          	lui	t0,0x3f800
    8000031a:	07f00313          	li	t1,127
    8000031e:	864e                	mv	a2,s3
    80000320:	874a                	mv	a4,s2
    80000322:	0d0077d7          	vsetvli	a5,zero,e32,m1,ta,ma
    80000326:	5e003457          	vmv.v.i	v8,0
    8000032a:	5e0034d7          	vmv.v.i	v9,0
    8000032e:	7ff10793          	addi	a5,sp,2047
    80000332:	0b178793          	addi	a5,a5,177
    80000336:	028784a7          	vs1r.v	v9,(a5)
        size_t vl = __riscv_vsetvl_e32m8(avl2);
    8000033a:	0d3777d7          	vsetvli	a5,a4,e32,m8,ta,ma
        vfloat32m8_t vx = __riscv_vle32_v_f32m8(src, vl);
    8000033e:	0205e407          	vle32.v	v8,(a1)

        // 减去 max
        vfloat32m8_t vmaxB = __riscv_vreinterpret_v_u32m8_f32m8(
            __riscv_vmv_v_x_u32m8(max_bits[0], vl));
    80000342:	5e03c857          	vmv.v.x	v16,t2
        vx = __riscv_vfsub_vv_f32m8(vx, vmaxB, vl);
    80000346:	0a881457          	vfsub.vv	v8,v8,v16
    8000034a:	2b010f93          	addi	t6,sp,688
    8000034e:	e28f8807          	vl8r.v	v16,(t6)

        // k = round(vx/ln2)
        unsigned old_frm; asm volatile("csrr %0, frm" : "=r"(old_frm));
        asm volatile("csrw frm, %0" :: "r"(0)); // RNE
        vint32m8_t vk = __riscv_vfcvt_x_f_v_i32m8(
            __riscv_vfmul_vv_f32m8(vx, viln2_8, vl), vl);
    80000352:	92881857          	vfmul.vv	v16,v8,v16
        vint32m8_t vk = __riscv_vfcvt_x_f_v_i32m8(
    80000356:	4b009857          	vfcvt.x.f.v	v16,v16
    8000035a:	6b010f93          	addi	t6,sp,1712
    8000035e:	e28f8827          	vs8r.v	v16,(t6)
        asm volatile("csrw frm, %0" :: "r"(old_frm));

        // r = vx - k*ln2_hi - k*ln2_lo
        vfloat32m8_t vfk = __riscv_vfcvt_f_x_v_f32m8(vk, vl);
    80000362:	4b019857          	vfcvt.f.x.v	v16,v16
    80000366:	4b010f93          	addi	t6,sp,1200
    8000036a:	e28f8c07          	vl8r.v	v24,(t6)
        vfloat32m8_t vr  = __riscv_vfsub_vv_f32m8(
            __riscv_vfsub_vv_f32m8(vx,
                __riscv_vfmul_vv_f32m8(vfk, vln2_hi_8, vl), vl),
    8000036e:	930c1c57          	vfmul.vv	v24,v16,v24
            __riscv_vfsub_vv_f32m8(vx,
    80000372:	0a8c1457          	vfsub.vv	v8,v8,v24
            //     __riscv_vreinterpret_v_u32m8_f32m8(__riscv_vrgather_vi_u32m8(ptable_u, 7, vl)), vl);
            // p = __riscv_vfmadd_vv_f32m8(p, vr,
            //     __riscv_vreinterpret_v_u32m8_f32m8(__riscv_vrgather_vi_u32m8(ptable_u, 8, vl)), vl);

        #define BC_F32M8(bits) __riscv_vreinterpret_v_u32m8_f32m8(__riscv_vmv_v_x_u32m8((bits), vl))
        vfloat32m8_t p  = BC_F32M8(0x3926ED8E);                    // C8
    80000376:	5e0e4c57          	vmv.v.x	v24,t3
    8000037a:	0b010f93          	addi	t6,sp,176
    8000037e:	e28f8007          	vl8r.v	v0,(t6)
            __riscv_vfmul_vv_f32m8(vfk, vln2_lo_8, vl), vl);
    80000382:	93001857          	vfmul.vv	v16,v16,v0
        vfloat32m8_t vr  = __riscv_vfsub_vv_f32m8(
    80000386:	0a881457          	vfsub.vv	v8,v8,v16
        p = __riscv_vfmadd_vv_f32m8(p, vr, BC_F32M8(0x3A1175D4), vl); // +C7
    8000038a:	5e0ec857          	vmv.v.x	v16,t4
    8000038e:	b3841857          	vfmacc.vv	v16,v8,v24
        p = __riscv_vfmadd_vv_f32m8(p, vr, BC_F32M8(0x3AB60B61), vl); // +C6
    80000392:	5e0f4c57          	vmv.v.x	v24,t5
    80000396:	b3041c57          	vfmacc.vv	v24,v8,v16
        p = __riscv_vfmadd_vv_f32m8(p, vr, BC_F32M8(0x3C088889), vl); // +C5
    8000039a:	5e044857          	vmv.v.x	v16,s0
    8000039e:	b3841857          	vfmacc.vv	v16,v8,v24
        p = __riscv_vfmadd_vv_f32m8(p, vr, BC_F32M8(0x3D2AAAAB), vl); // +C4
    800003a2:	5e06cc57          	vmv.v.x	v24,a3
    800003a6:	b3041c57          	vfmacc.vv	v24,v8,v16
        p = __riscv_vfmadd_vv_f32m8(p, vr, BC_F32M8(0x3E2AAAAB), vl); // +C3
    800003aa:	5e054057          	vmv.v.x	v0,a0
    800003ae:	b3841057          	vfmacc.vv	v0,v8,v24
        p = __riscv_vfmadd_vv_f32m8(p, vr, BC_F32M8(0x3F000000), vl); // +C2
    800003b2:	5e084857          	vmv.v.x	v16,a6
    800003b6:	b2041857          	vfmacc.vv	v16,v8,v0
        p = __riscv_vfmadd_vv_f32m8(p, vr, BC_F32M8(0x3F800000), vl); // +C1
    800003ba:	5e02cc57          	vmv.v.x	v24,t0
    800003be:	a3841857          	vfmadd.vv	v16,v8,v24
        p = __riscv_vfmadd_vv_f32m8(p, vr, BC_F32M8(0x3F800000), vl); // +C0
    800003c2:	a3841857          	vfmadd.vv	v16,v8,v24
    800003c6:	6b010f93          	addi	t6,sp,1712
    800003ca:	e28f8407          	vl8r.v	v8,(t6)

        // 2^k
        const int exp_bias = 127;
        vfloat32m8_t vf2k = __riscv_vreinterpret_v_i32m8_f32m8(
            __riscv_vsll_vx_i32m8(
                __riscv_vadd_vx_i32m8(vk, exp_bias, vl), 23, vl));
    800003ce:	02834457          	vadd.vx	v8,v8,t1
            __riscv_vsll_vx_i32m8(
    800003d2:	968bb457          	vsll.vi	v8,v8,23
        vfloat32m8_t vexp8 = __riscv_vfmul_vv_f32m8(p, vf2k, vl);
    800003d6:	93041457          	vfmul.vv	v8,v16,v8
        unsigned old_frm; asm volatile("csrr %0, frm" : "=r"(old_frm));
    800003da:	002024f3          	frrm	s1
        asm volatile("csrw frm, %0" :: "r"(0)); // RNE
    800003de:	00289073          	fsrm	a7
        asm volatile("csrw frm, %0" :: "r"(old_frm));
    800003e2:	00249073          	fsrm	s1
        __riscv_vse32_v_f32m8(dst, vexp8, vl);
    800003e6:	0d377057          	vsetvli	zero,a4,e32,m8,ta,ma
    800003ea:	02066427          	vse32.v	v8,(a2)

        // 块和
        vfloat32m1_t vblk = __riscv_vfredosum_vs_f32m8_f32m1(vexp8, vzero1, vl);
    800003ee:	0d0074d7          	vsetvli	s1,zero,e32,m1,ta,ma
    800003f2:	5e003857          	vmv.v.i	v16,0
    800003f6:	0d377057          	vsetvli	zero,a4,e32,m8,ta,ma
    800003fa:	0e881457          	vfredosum.vs	v8,v8,v16
    800003fe:	7ff10f93          	addi	t6,sp,2047
    80000402:	0b1f8f93          	addi	t6,t6,177
    80000406:	028f8487          	vl1r.v	v9,(t6)
        vsum1 = __riscv_vfadd_vv_f32m1(vsum1, vblk, vl1);
    8000040a:	0d0074d7          	vsetvli	s1,zero,e32,m1,ta,ma
    8000040e:	029414d7          	vfadd.vv	v9,v9,v8

        avl2 -= vl; src += vl; dst += vl;
    80000412:	8f1d                	sub	a4,a4,a5
    80000414:	078a                	slli	a5,a5,0x2
    80000416:	95be                	add	a1,a1,a5
    80000418:	963e                	add	a2,a2,a5
    for (size_t avl2 = n; avl2 > 0; ) {
    8000041a:	fb11                	bnez	a4,8000032e <softmax_stable_rvv_fp32+0x104>
    8000041c:	a029                	j	80000426 <softmax_stable_rvv_fp32+0x1fc>
    8000041e:	5e003457          	vmv.v.i	v8,0
    80000422:	9e8034d7          	vmv1r.v	v9,v8
    80000426:	1808                	addi	a0,sp,48
    80000428:	02850407          	vl1r.v	v8,(a0)
    }
    // 归一化
    vfloat32m1_t vsum1_eps = __riscv_vfadd_vv_f32m1(vsum1, veps1, vl1);
    8000042c:	02941457          	vfadd.vv	v8,v9,v8
    vfloat32m1_t vinv1 = __riscv_vfrec7_v_f32m1(vsum1_eps, vl1);
    80000430:	4e8294d7          	vfrec7.v	v9,v8
    vfloat32m1_t corr = __riscv_vfnmsac_vv_f32m1(vtwo1, vsum1_eps, vinv1, vl1);
    80000434:	9e803557          	vmv1r.v	v10,v8
    80000438:	1888                	addi	a0,sp,112
    8000043a:	02850587          	vl1r.v	v11,(a0)
    8000043e:	aeb49557          	vfnmsub.vv	v10,v9,v11
    vinv1 = __riscv_vfmul_vv_f32m1(vinv1, corr, vl1);
    80000442:	929514d7          	vfmul.vv	v9,v9,v10
    corr  = __riscv_vfnmsac_vv_f32m1(vtwo1, vsum1_eps, vinv1, vl1);
    80000446:	aeb49457          	vfnmsub.vv	v8,v9,v11
    vinv1 = __riscv_vfmul_vv_f32m1(vinv1, corr, vl1);
    8000044a:	92941457          	vfmul.vv	v8,v9,v8
    8000044e:	0868                	addi	a0,sp,28

    uint32_t inv_bits[1];
    __riscv_vse32_v_u32m1(inv_bits, __riscv_vreinterpret_v_f32m1_u32m1(vinv1), vl1);
    80000450:	02056427          	vse32.v	v8,(a0)

    dst = dst_orig;
    for (size_t avl3 = n; avl3 > 0; ) {
    80000454:	02090f63          	beqz	s2,80000492 <softmax_stable_rvv_fp32+0x268>
    80000458:	4572                	lw	a0,28(sp)
    8000045a:	85ce                	mv	a1,s3
    8000045c:	864a                	mv	a2,s2
        size_t vl = __riscv_vsetvl_e32m8(avl3);
    8000045e:	0d3676d7          	vsetvli	a3,a2,e32,m8,ta,ma
        vfloat32m8_t row = __riscv_vle32_v_f32m8(dst, vl);
    80000462:	0205e407          	vle32.v	v8,(a1)
        vfloat32m8_t vinvB = __riscv_vreinterpret_v_u32m8_f32m8(
            __riscv_vmv_v_x_u32m8(inv_bits[0], vl));
    80000466:	5e054857          	vmv.v.x	v16,a0
        row = __riscv_vfmul_vv_f32m8(row, vinvB, vl);
        __riscv_vse32_v_f32m8(dst, row, vl);
        avl3 -= vl; dst += vl;
    8000046a:	8e15                	sub	a2,a2,a3
        row = __riscv_vfmul_vv_f32m8(row, vinvB, vl);
    8000046c:	92881457          	vfmul.vv	v8,v8,v16
        __riscv_vse32_v_f32m8(dst, row, vl);
    80000470:	0205e427          	vse32.v	v8,(a1)
        avl3 -= vl; dst += vl;
    80000474:	068a                	slli	a3,a3,0x2
    80000476:	95b6                	add	a1,a1,a3
    80000478:	f27d                	bnez	a2,8000045e <softmax_stable_rvv_fp32+0x234>
    8000047a:	854e                	mv	a0,s3
    8000047c:	85ca                	mv	a1,s2

    // 可选：再 load/store 一遍（m8）
    dst = dst_orig;
    size_t avl4 = n;
    while (avl4 > 0) {
        size_t vl = __riscv_vsetvl_e32m8(avl4);
    8000047e:	0d35f657          	vsetvli	a2,a1,e32,m8,ta,ma
        vfloat32m8_t row2 = __riscv_vle32_v_f32m8(dst, vl);
    80000482:	02056407          	vle32.v	v8,(a0)
        __riscv_vse32_v_f32m8(dst, row2, vl);
        avl4 -= vl; dst += vl;
    80000486:	8d91                	sub	a1,a1,a2
        __riscv_vse32_v_f32m8(dst, row2, vl);
    80000488:	02056427          	vse32.v	v8,(a0)
        avl4 -= vl; dst += vl;
    8000048c:	060a                	slli	a2,a2,0x2
    8000048e:	9532                	add	a0,a0,a2
    80000490:	f5fd                	bnez	a1,8000047e <softmax_stable_rvv_fp32+0x254>
    printf("%s", s);
    80000492:	00001517          	auipc	a0,0x1
    80000496:	00001597          	auipc	a1,0x1
    8000049a:	1a750513          	addi	a0,a0,423 # 80001639 <golden+0x209>
    8000049e:	1be58593          	addi	a1,a1,446 # 80001654 <golden+0x224>
    800004a2:	00000097          	auipc	ra,0x0
    800004a6:	5ec080e7          	jalr	1516(ra) # 80000a8e <printf>
    800004aa:	06090363          	beqz	s2,80000510 <softmax_stable_rvv_fp32+0x2e6>
    800004ae:	4481                	li	s1,0
    }
    dst = dst_orig;

    //调试打印
    dbg_print_line("Final results:\n");
    for (size_t i = 0; i < n; i++) {
    800004b0:	090a                	slli	s2,s2,0x2
    800004b2:	00001517          	auipc	a0,0x1
    800004b6:	00001597          	auipc	a1,0x1
    800004ba:	00001617          	auipc	a2,0x1
    800004be:	01298ab3          	add	s5,s3,s2
    800004c2:	f7e50413          	addi	s0,a0,-130 # 80001430 <golden>
    800004c6:	17a58913          	addi	s2,a1,378 # 80001630 <golden+0x200>
    800004ca:	1aa60a13          	addi	s4,a2,426 # 80001664 <golden+0x234>
    uint32_t u; memcpy(&u, p, 4); return u;
    800004ce:	1048                	addi	a0,sp,36
    800004d0:	4611                	li	a2,4
    800004d2:	85ce                	mv	a1,s3
    800004d4:	00001097          	auipc	ra,0x1
    800004d8:	b84080e7          	jalr	-1148(ra) # 80001058 <memcpy>
    800004dc:	5612                	lw	a2,36(sp)
        dbg_print_idx_hex32("dst", (uint32_t)i, "bits", load_f32_bits(&dst_orig[i]));
    800004de:	854a                	mv	a0,s2
    800004e0:	85a6                	mv	a1,s1
    800004e2:	00000097          	auipc	ra,0x0
    800004e6:	046080e7          	jalr	70(ra) # 80000528 <dbg_print_idx_hex32>
    uint32_t u; memcpy(&u, p, 4); return u;
    800004ea:	1048                	addi	a0,sp,36
    800004ec:	4611                	li	a2,4
    800004ee:	85a2                	mv	a1,s0
    800004f0:	00001097          	auipc	ra,0x1
    800004f4:	b68080e7          	jalr	-1176(ra) # 80001058 <memcpy>
    800004f8:	5612                	lw	a2,36(sp)
        dbg_print_idx_hex32("golden", (uint32_t)i, "bits", load_f32_bits(&golden[i]));
    800004fa:	8552                	mv	a0,s4
    800004fc:	85a6                	mv	a1,s1
    800004fe:	00000097          	auipc	ra,0x0
    80000502:	02a080e7          	jalr	42(ra) # 80000528 <dbg_print_idx_hex32>
    for (size_t i = 0; i < n; i++) {
    80000506:	0991                	addi	s3,s3,4
    80000508:	2485                	addiw	s1,s1,1
    8000050a:	0411                	addi	s0,s0,4
    8000050c:	fd5991e3          	bne	s3,s5,800004ce <softmax_stable_rvv_fp32+0x2a4>
    }
    80000510:	7f010113          	addi	sp,sp,2032
    80000514:	6169                	addi	sp,sp,208
    80000516:	70a6                	ld	ra,104(sp)
    80000518:	7406                	ld	s0,96(sp)
    8000051a:	64e6                	ld	s1,88(sp)
    8000051c:	6946                	ld	s2,80(sp)
    8000051e:	69a6                	ld	s3,72(sp)
    80000520:	6a06                	ld	s4,64(sp)
    80000522:	7ae2                	ld	s5,56(sp)
    80000524:	6165                	addi	sp,sp,112
    80000526:	8082                	ret

0000000080000528 <dbg_print_idx_hex32>:
static void dbg_print_idx_hex32(const char* name, uint32_t idx, const char* suffix, uint32_t v) {
    80000528:	7119                	addi	sp,sp,-128
    8000052a:	fc86                	sd	ra,120(sp)
    for (; name[p] && p < (int)sizeof(buf)-1; ++p) buf[p] = name[p];
    8000052c:	00054783          	lbu	a5,0(a0)
    80000530:	c3e1                	beqz	a5,800005f0 <dbg_print_idx_hex32+0xc8>
    80000532:	4281                	li	t0,0
    80000534:	4681                	li	a3,0
    80000536:	01810813          	addi	a6,sp,24
    8000053a:	05e00893          	li	a7,94
    8000053e:	8736                	mv	a4,a3
    80000540:	00d80333          	add	t1,a6,a3
    80000544:	96aa                	add	a3,a3,a0
    80000546:	00f30023          	sb	a5,0(t1)
    8000054a:	0016c783          	lbu	a5,1(a3)
    8000054e:	00170693          	addi	a3,a4,1
    80000552:	05e73313          	sltiu	t1,a4,94
    80000556:	2285                	addiw	t0,t0,1 # 3f800001 <putchar.buflen+0x3f7fffc1>
    80000558:	c399                	beqz	a5,8000055e <dbg_print_idx_hex32+0x36>
    8000055a:	ff1762e3          	bltu	a4,a7,8000053e <dbg_print_idx_hex32+0x16>
    if (p < (int)sizeof(buf)-1) buf[p++] = '[';
    8000055e:	00030963          	beqz	t1,80000570 <dbg_print_idx_hex32+0x48>
    80000562:	2285                	addiw	t0,t0,1
    80000564:	0828                	addi	a0,sp,24
    80000566:	9536                	add	a0,a0,a3
    80000568:	05b00693          	li	a3,91
    8000056c:	00d50023          	sb	a3,0(a0)
    if (x == 0) tmp[t++] = '0';
    80000570:	c5d1                	beqz	a1,800005fc <dbg_print_idx_hex32+0xd4>
    80000572:	4e01                	li	t3,0
    80000574:	ccccd6b7          	lui	a3,0xccccd
    80000578:	00810813          	addi	a6,sp,8
    8000057c:	48a9                	li	a7,10
    8000057e:	ccd68713          	addi	a4,a3,-819 # ffffffffcccccccd <_end+0xffffffff4cb8cccd>
    80000582:	02071393          	slli	t2,a4,0x20
    80000586:	433d                	li	t1,15
    80000588:	87ae                	mv	a5,a1
    8000058a:	86f2                	mv	a3,t3
    else { while (x && t < (int)sizeof(tmp)) { tmp[t++] = '0' + (x % 10); x /= 10; } }
    8000058c:	1582                	slli	a1,a1,0x20
    8000058e:	0e05                	addi	t3,t3,1 # 3f317001 <putchar.buflen+0x3f316fc1>
    80000590:	0275b5b3          	mulhu	a1,a1,t2
    80000594:	918d                	srli	a1,a1,0x23
    80000596:	00159713          	slli	a4,a1,0x1
    8000059a:	00359513          	slli	a0,a1,0x3
    8000059e:	953a                	add	a0,a0,a4
    800005a0:	40a78533          	sub	a0,a5,a0
    800005a4:	03056513          	ori	a0,a0,48
    800005a8:	00d80733          	add	a4,a6,a3
    800005ac:	00a70023          	sb	a0,0(a4)
    800005b0:	0117e463          	bltu	a5,a7,800005b8 <dbg_print_idx_hex32+0x90>
    800005b4:	fc66eae3          	bltu	a3,t1,80000588 <dbg_print_idx_hex32+0x60>
    800005b8:	05e00813          	li	a6,94
    while (t && p < (int)sizeof(buf)-1) buf[p++] = tmp[--t];
    800005bc:	04584963          	blt	a6,t0,8000060e <dbg_print_idx_hex32+0xe6>
    800005c0:	fffe0513          	addi	a0,t3,-1
    800005c4:	00810893          	addi	a7,sp,8
    800005c8:	0838                	addi	a4,sp,24
    800005ca:	8696                	mv	a3,t0
    800005cc:	00a885b3          	add	a1,a7,a0
    800005d0:	0005c783          	lbu	a5,0(a1)
    800005d4:	85b6                	mv	a1,a3
    800005d6:	96ba                	add	a3,a3,a4
    800005d8:	00f68023          	sb	a5,0(a3)
    800005dc:	05e5b793          	sltiu	a5,a1,94
    800005e0:	2285                	addiw	t0,t0,1
    800005e2:	c51d                	beqz	a0,80000610 <dbg_print_idx_hex32+0xe8>
    800005e4:	00158693          	addi	a3,a1,1
    800005e8:	157d                	addi	a0,a0,-1
    800005ea:	ff05e1e3          	bltu	a1,a6,800005cc <dbg_print_idx_hex32+0xa4>
    800005ee:	a00d                	j	80000610 <dbg_print_idx_hex32+0xe8>
    800005f0:	4281                	li	t0,0
    800005f2:	4681                	li	a3,0
    800005f4:	4305                	li	t1,1
    if (p < (int)sizeof(buf)-1) buf[p++] = '[';
    800005f6:	f60316e3          	bnez	t1,80000562 <dbg_print_idx_hex32+0x3a>
    800005fa:	bf9d                	j	80000570 <dbg_print_idx_hex32+0x48>
    800005fc:	03000513          	li	a0,48
    if (x == 0) tmp[t++] = '0';
    80000600:	00a10423          	sb	a0,8(sp)
    80000604:	4e05                	li	t3,1
    80000606:	05e00813          	li	a6,94
    while (t && p < (int)sizeof(buf)-1) buf[p++] = tmp[--t];
    8000060a:	fa585be3          	bge	a6,t0,800005c0 <dbg_print_idx_hex32+0x98>
    8000060e:	4781                	li	a5,0
    if (p < (int)sizeof(buf)-1) buf[p++] = ']';
    80000610:	ebb9                	bnez	a5,80000666 <dbg_print_idx_hex32+0x13e>
    80000612:	05e00513          	li	a0,94
        if (p < (int)sizeof(buf)-1) buf[p++] = ' ';
    80000616:	06555363          	bge	a0,t0,8000067c <dbg_print_idx_hex32+0x154>
        for (int i = 0; suffix[i] && p < (int)sizeof(buf)-1; ++i) buf[p++] = suffix[i];
    8000061a:	06554a63          	blt	a0,t0,8000068e <dbg_print_idx_hex32+0x166>
    8000061e:	02029713          	slli	a4,t0,0x20
    80000622:	05e00513          	li	a0,94
    80000626:	4055053b          	subw	a0,a0,t0
    8000062a:	458d                	li	a1,3
    8000062c:	9301                	srli	a4,a4,0x20
    8000062e:	00b56363          	bltu	a0,a1,80000634 <dbg_print_idx_hex32+0x10c>
    80000632:	450d                	li	a0,3
    80000634:	0505                	addi	a0,a0,1
    80000636:	4585                	li	a1,1
    80000638:	0834                	addi	a3,sp,24
    8000063a:	8d99                	sub	a1,a1,a4
    8000063c:	9736                	add	a4,a4,a3
    8000063e:	00001697          	auipc	a3,0x1
    80000642:	ff668693          	addi	a3,a3,-10 # 80001634 <golden+0x204>
    80000646:	0006c783          	lbu	a5,0(a3)
    8000064a:	15fd                	addi	a1,a1,-1
    8000064c:	2285                	addiw	t0,t0,1
    8000064e:	157d                	addi	a0,a0,-1
    80000650:	00f70023          	sb	a5,0(a4)
    80000654:	0705                	addi	a4,a4,1
    80000656:	0685                	addi	a3,a3,1
    80000658:	f57d                	bnez	a0,80000646 <dbg_print_idx_hex32+0x11e>
    8000065a:	40b00533          	neg	a0,a1
    8000065e:	05e53513          	sltiu	a0,a0,94
    if (p < (int)sizeof(buf)-1) buf[p++] = ':';
    80000662:	e905                	bnez	a0,80000692 <dbg_print_idx_hex32+0x16a>
    80000664:	a835                	j	800006a0 <dbg_print_idx_hex32+0x178>
    80000666:	0828                	addi	a0,sp,24
    if (p < (int)sizeof(buf)-1) buf[p++] = ']';
    80000668:	9516                	add	a0,a0,t0
    8000066a:	2285                	addiw	t0,t0,1
    8000066c:	05d00593          	li	a1,93
    80000670:	00b50023          	sb	a1,0(a0)
    80000674:	05e00513          	li	a0,94
        if (p < (int)sizeof(buf)-1) buf[p++] = ' ';
    80000678:	fa5541e3          	blt	a0,t0,8000061a <dbg_print_idx_hex32+0xf2>
    8000067c:	082c                	addi	a1,sp,24
    8000067e:	9596                	add	a1,a1,t0
    80000680:	2285                	addiw	t0,t0,1
    80000682:	02000693          	li	a3,32
    80000686:	00d58023          	sb	a3,0(a1)
        for (int i = 0; suffix[i] && p < (int)sizeof(buf)-1; ++i) buf[p++] = suffix[i];
    8000068a:	f8555ae3          	bge	a0,t0,8000061e <dbg_print_idx_hex32+0xf6>
    8000068e:	4501                	li	a0,0
    if (p < (int)sizeof(buf)-1) buf[p++] = ':';
    80000690:	c901                	beqz	a0,800006a0 <dbg_print_idx_hex32+0x178>
    80000692:	0828                	addi	a0,sp,24
    80000694:	9516                	add	a0,a0,t0
    80000696:	2285                	addiw	t0,t0,1
    80000698:	03a00593          	li	a1,58
    8000069c:	00b50023          	sb	a1,0(a0)
    800006a0:	05e00513          	li	a0,94
    if (p < (int)sizeof(buf)-1) buf[p++] = ' ';
    800006a4:	04555a63          	bge	a0,t0,800006f8 <dbg_print_idx_hex32+0x1d0>
    if (p < (int)sizeof(buf)-1) buf[p++] = '0';
    800006a8:	06555163          	bge	a0,t0,8000070a <dbg_print_idx_hex32+0x1e2>
    800006ac:	05e00513          	li	a0,94
    if (p < (int)sizeof(buf)-1) buf[p++] = 'x';
    800006b0:	06555863          	bge	a0,t0,80000720 <dbg_print_idx_hex32+0x1f8>
    for (int i = 7; i >= 0 && p < (int)sizeof(buf)-1; --i) {
    800006b4:	06554f63          	blt	a0,t0,80000732 <dbg_print_idx_hex32+0x20a>
    800006b8:	4571                	li	a0,28
    800006ba:	4829                	li	a6,10
    800006bc:	01810893          	addi	a7,sp,24
    800006c0:	05e00793          	li	a5,94
    800006c4:	8716                	mv	a4,t0
        buf[p++] = dbg_hex_digit((v >> (i*4)) & 0xF);
    800006c6:	00a655bb          	srlw	a1,a2,a0
    800006ca:	89bd                	andi	a1,a1,15
    800006cc:	86ba                	mv	a3,a4
static inline char dbg_hex_digit(unsigned x){ return (x<10)?('0'+x):('A'+(x-10)); }
    800006ce:	0105e563          	bltu	a1,a6,800006d8 <dbg_print_idx_hex32+0x1b0>
    800006d2:	03758593          	addi	a1,a1,55
    800006d6:	a019                	j	800006dc <dbg_print_idx_hex32+0x1b4>
    800006d8:	03058593          	addi	a1,a1,48
        buf[p++] = dbg_hex_digit((v >> (i*4)) & 0xF);
    800006dc:	00d88733          	add	a4,a7,a3
    800006e0:	00b70023          	sb	a1,0(a4)
    for (int i = 7; i >= 0 && p < (int)sizeof(buf)-1; --i) {
    800006e4:	05e6b593          	sltiu	a1,a3,94
    800006e8:	2285                	addiw	t0,t0,1
    800006ea:	c529                	beqz	a0,80000734 <dbg_print_idx_hex32+0x20c>
    800006ec:	00168713          	addi	a4,a3,1
    800006f0:	3571                	addiw	a0,a0,-4
    800006f2:	fcf6eae3          	bltu	a3,a5,800006c6 <dbg_print_idx_hex32+0x19e>
    800006f6:	a83d                	j	80000734 <dbg_print_idx_hex32+0x20c>
    800006f8:	082c                	addi	a1,sp,24
    if (p < (int)sizeof(buf)-1) buf[p++] = ' ';
    800006fa:	9596                	add	a1,a1,t0
    800006fc:	2285                	addiw	t0,t0,1
    800006fe:	02000693          	li	a3,32
    80000702:	00d58023          	sb	a3,0(a1)
    if (p < (int)sizeof(buf)-1) buf[p++] = '0';
    80000706:	fa5543e3          	blt	a0,t0,800006ac <dbg_print_idx_hex32+0x184>
    8000070a:	0828                	addi	a0,sp,24
    8000070c:	9516                	add	a0,a0,t0
    8000070e:	2285                	addiw	t0,t0,1
    80000710:	03000593          	li	a1,48
    80000714:	00b50023          	sb	a1,0(a0)
    80000718:	05e00513          	li	a0,94
    if (p < (int)sizeof(buf)-1) buf[p++] = 'x';
    8000071c:	f8554ce3          	blt	a0,t0,800006b4 <dbg_print_idx_hex32+0x18c>
    80000720:	082c                	addi	a1,sp,24
    80000722:	9596                	add	a1,a1,t0
    80000724:	2285                	addiw	t0,t0,1
    80000726:	07800693          	li	a3,120
    8000072a:	00d58023          	sb	a3,0(a1)
    for (int i = 7; i >= 0 && p < (int)sizeof(buf)-1; --i) {
    8000072e:	f85555e3          	bge	a0,t0,800006b8 <dbg_print_idx_hex32+0x190>
    80000732:	4581                	li	a1,0
    if (p < (int)sizeof(buf)-1) buf[p++] = '\n';
    80000734:	c599                	beqz	a1,80000742 <dbg_print_idx_hex32+0x21a>
    80000736:	0828                	addi	a0,sp,24
    80000738:	9516                	add	a0,a0,t0
    8000073a:	2285                	addiw	t0,t0,1
    8000073c:	45a9                	li	a1,10
    8000073e:	00b50023          	sb	a1,0(a0)
    80000742:	0828                	addi	a0,sp,24
    buf[p] = 0;
    80000744:	9516                	add	a0,a0,t0
    80000746:	00050023          	sb	zero,0(a0)
    printf("%s", buf);
    8000074a:	00001517          	auipc	a0,0x1
    8000074e:	eef50513          	addi	a0,a0,-273 # 80001639 <golden+0x209>
    80000752:	082c                	addi	a1,sp,24
    80000754:	00000097          	auipc	ra,0x0
    80000758:	33a080e7          	jalr	826(ra) # 80000a8e <printf>
}
    8000075c:	70e6                	ld	ra,120(sp)
    8000075e:	6109                	addi	sp,sp,128
    80000760:	8082                	ret

0000000080000762 <setStats>:
    uintptr_t csr = read_csr(name); \
    if (!enable) { csr -= counters[i]; counter_names[i] = #name; } \
    counters[i++] = csr; \
  } while (0)

  READ_CTR(mcycle);
    80000762:	b00025f3          	csrr	a1,mcycle
    80000766:	00002617          	auipc	a2,0x2
    8000076a:	87260613          	addi	a2,a2,-1934 # 80001fd8 <counters.0>
    8000076e:	6214                	ld	a3,0(a2)
    80000770:	00a03533          	snez	a0,a0
    80000774:	157d                	addi	a0,a0,-1
    80000776:	8ee9                	and	a3,a3,a0
    80000778:	8d95                	sub	a1,a1,a3
    8000077a:	e20c                	sd	a1,0(a2)
  READ_CTR(minstret);
    8000077c:	b02025f3          	csrr	a1,minstret
    80000780:	6614                	ld	a3,8(a2)
    80000782:	8d75                	and	a0,a0,a3
    80000784:	8d89                	sub	a1,a1,a0
    80000786:	e60c                	sd	a1,8(a2)

#undef READ_CTR
}
    80000788:	8082                	ret

000000008000078a <tohost_exit>:
  } while(pos < end_signature);
}

void __attribute__((noreturn)) tohost_exit(uintptr_t code)
{
  tohost = (code << 1) | 1;
    8000078a:	0506                	slli	a0,a0,0x1
    8000078c:	0505                	addi	a0,a0,1
    8000078e:	00002597          	auipc	a1,0x2
    80000792:	86a5b923          	sd	a0,-1934(a1) # 80002000 <tohost>
  while (1);
    80000796:	a001                	j	80000796 <tohost_exit+0xc>

0000000080000798 <handle_trap>:
  tohost = (code << 1) | 1;
    80000798:	00002517          	auipc	a0,0x2
    8000079c:	6585                	lui	a1,0x1
    8000079e:	a7358593          	addi	a1,a1,-1421 # a73 <putchar.buflen+0xa33>
    800007a2:	86b53423          	sd	a1,-1944(a0) # 80002000 <tohost>
  while (1);
    800007a6:	a001                	j	800007a6 <handle_trap+0xe>

00000000800007a8 <exit>:
}

void exit(int code)
{
  //flush_signature_cachelines();
  asm("ecall");
    800007a8:	00000073          	ecall
  tohost = (code << 1) | 1;
    800007ac:	0506                	slli	a0,a0,0x1
    800007ae:	0505                	addi	a0,a0,1
    800007b0:	00002597          	auipc	a1,0x2
    800007b4:	84a5b823          	sd	a0,-1968(a1) # 80002000 <tohost>
  while (1);
    800007b8:	a001                	j	800007b8 <exit+0x10>

00000000800007ba <abort>:
  asm("ecall");
    800007ba:	00000073          	ecall
  tohost = (code << 1) | 1;
    800007be:	00002517          	auipc	a0,0x2
    800007c2:	10d00593          	li	a1,269
    800007c6:	84b53123          	sd	a1,-1982(a0) # 80002000 <tohost>
  while (1);
    800007ca:	a001                	j	800007ca <abort+0x10>

00000000800007cc <printstr>:
{
  exit(128 + SIGABRT);
}

void printstr(const char* s)
{
    800007cc:	4581                	li	a1,0
}

size_t strlen(const char *s)
{
  const char *p = s;
  while (*p)
    800007ce:	00b50633          	add	a2,a0,a1
    800007d2:	00064603          	lbu	a2,0(a2)
    800007d6:	0585                	addi	a1,a1,1
    800007d8:	fa7d                	bnez	a2,800007ce <printstr+0x2>
    800007da:	7119                	addi	sp,sp,-128
    800007dc:	fc86                	sd	ra,120(sp)
    800007de:	f8a2                	sd	s0,112(sp)
    800007e0:	0100                	addi	s0,sp,128
    800007e2:	fc017113          	andi	sp,sp,-64
  volatile uint64_t magic_mem[8] __attribute__((aligned(64)));
    800007e6:	15fd                	addi	a1,a1,-1
    800007e8:	04000613          	li	a2,64
  magic_mem[0] = which;
    800007ec:	e032                	sd	a2,0(sp)
    800007ee:	4605                	li	a2,1
  magic_mem[1] = arg0;
    800007f0:	e432                	sd	a2,8(sp)
  tohost = (uintptr_t)magic_mem;
    800007f2:	00002617          	auipc	a2,0x2
  magic_mem[2] = arg1;
    800007f6:	e82a                	sd	a0,16(sp)
    800007f8:	850a                	mv	a0,sp
  magic_mem[3] = arg2;
    800007fa:	ec2e                	sd	a1,24(sp)
  __sync_synchronize();
    800007fc:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80000800:	80a63723          	sd	a0,-2034(a2) # 80002000 <tohost>
    80000804:	00002517          	auipc	a0,0x2
  while (fromhost == 0)
    80000808:	83c53583          	ld	a1,-1988(a0) # 80002040 <fromhost>
    8000080c:	ddf5                	beqz	a1,80000808 <printstr+0x3c>
  fromhost = 0;
    8000080e:	82053e23          	sd	zero,-1988(a0)
  __sync_synchronize();
    80000812:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80000816:	00013003          	ld	zero,0(sp)
}
    8000081a:	f8040113          	addi	sp,s0,-128
    8000081e:	70e6                	ld	ra,120(sp)
    80000820:	7446                	ld	s0,112(sp)
    80000822:	6109                	addi	sp,sp,128
    80000824:	8082                	ret

0000000080000826 <strlen>:
{
    80000826:	4581                	li	a1,0
  while (*p)
    80000828:	00b50633          	add	a2,a0,a1
    8000082c:	00064603          	lbu	a2,0(a2)
    80000830:	0585                	addi	a1,a1,1
    80000832:	fa7d                	bnez	a2,80000828 <strlen+0x2>
    p++;
  return p - s;
    80000834:	fff58513          	addi	a0,a1,-1
    80000838:	8082                	ret

000000008000083a <thread_entry>:
  while (cid != 0);
    8000083a:	c111                	beqz	a0,8000083e <thread_entry+0x4>
    8000083c:	a001                	j	8000083c <thread_entry+0x2>
}
    8000083e:	8082                	ret
{
    80000840:	7119                	addi	sp,sp,-128
    80000842:	fc86                	sd	ra,120(sp)
    80000844:	f8a2                	sd	s0,112(sp)
    80000846:	0100                	addi	s0,sp,128
    80000848:	fc017113          	andi	sp,sp,-64
    8000084c:	04000513          	li	a0,64
    80000850:	4585                	li	a1,1
  magic_mem[0] = which;
    80000852:	e02a                	sd	a0,0(sp)
  magic_mem[2] = arg1;
    80000854:	00001517          	auipc	a0,0x1
  magic_mem[1] = arg0;
    80000858:	e42e                	sd	a1,8(sp)
    8000085a:	45dd                	li	a1,23
  magic_mem[2] = arg1;
    8000085c:	de850513          	addi	a0,a0,-536 # 8000163c <golden+0x20c>
    80000860:	e82a                	sd	a0,16(sp)
  tohost = (uintptr_t)magic_mem;
    80000862:	00001517          	auipc	a0,0x1
  magic_mem[3] = arg2;
    80000866:	ec2e                	sd	a1,24(sp)
    80000868:	858a                	mv	a1,sp
  __sync_synchronize();
    8000086a:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    8000086e:	78b53f23          	sd	a1,1950(a0) # 80002000 <tohost>
    80000872:	00001517          	auipc	a0,0x1
  while (fromhost == 0)
    80000876:	7ce53583          	ld	a1,1998(a0) # 80002040 <fromhost>
    8000087a:	ddf5                	beqz	a1,80000876 <thread_entry+0x3c>
  fromhost = 0;
    8000087c:	7c053723          	sd	zero,1998(a0)
  __sync_synchronize();
    80000880:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80000884:	00013003          	ld	zero,0(sp)
  return -1;
    80000888:	557d                	li	a0,-1
    8000088a:	f8040113          	addi	sp,s0,-128
    8000088e:	70e6                	ld	ra,120(sp)
    80000890:	7446                	ld	s0,112(sp)
    80000892:	6109                	addi	sp,sp,128
    80000894:	8082                	ret

0000000080000896 <_init>:
{
    80000896:	1141                	addi	sp,sp,-16
    80000898:	e406                	sd	ra,8(sp)
  asm volatile("mv %0, tp" : "=r"(thread_pointer));
    8000089a:	8892                	mv	a7,tp
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    8000089c:	00001617          	auipc	a2,0x1
    800008a0:	00001717          	auipc	a4,0x1
    800008a4:	7ac60793          	addi	a5,a2,1964 # 80002048 <_tdata_begin>
    800008a8:	7a870813          	addi	a6,a4,1960 # 80002048 <_tdata_begin>
    800008ac:	40f80633          	sub	a2,a6,a5
    800008b0:	0117e733          	or	a4,a5,a7
    800008b4:	8f51                	or	a4,a4,a2
    800008b6:	00777693          	andi	a3,a4,7
    800008ba:	00c882b3          	add	t0,a7,a2
    800008be:	ce91                	beqz	a3,800008da <_init+0x44>
    while (d < (char*)(dest + len))
    800008c0:	ce0d                	beqz	a2,800008fa <_init+0x64>
    800008c2:	8646                	mv	a2,a7
      *d++ = *s++;
    800008c4:	0007c683          	lbu	a3,0(a5)
    800008c8:	0785                	addi	a5,a5,1
    800008ca:	00160713          	addi	a4,a2,1
    800008ce:	00d60023          	sb	a3,0(a2)
    800008d2:	863a                	mv	a2,a4
    800008d4:	fe5768e3          	bltu	a4,t0,800008c4 <_init+0x2e>
    800008d8:	a00d                	j	800008fa <_init+0x64>
    800008da:	00001797          	auipc	a5,0x1
    800008de:	76e78793          	addi	a5,a5,1902 # 80002048 <_tdata_begin>
    800008e2:	40f80633          	sub	a2,a6,a5
    while (d < (uintptr_t*)(dest + len))
    800008e6:	ca11                	beqz	a2,800008fa <_init+0x64>
    800008e8:	8646                	mv	a2,a7
      *d++ = *s++;
    800008ea:	6394                	ld	a3,0(a5)
    800008ec:	07a1                	addi	a5,a5,8
    800008ee:	00860713          	addi	a4,a2,8
    800008f2:	e214                	sd	a3,0(a2)
    800008f4:	863a                	mv	a2,a4
    while (d < (uintptr_t*)(dest + len))
    800008f6:	fe576ae3          	bltu	a4,t0,800008ea <_init+0x54>
  memset(thread_pointer + tdata_size, 0, tbss_size);
    800008fa:	00001617          	auipc	a2,0x1
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    800008fe:	00001697          	auipc	a3,0x1
  memset(thread_pointer + tdata_size, 0, tbss_size);
    80000902:	74e60613          	addi	a2,a2,1870 # 80002048 <_tdata_begin>
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    80000906:	7c668793          	addi	a5,a3,1990 # 800020c4 <_tbss_end>
  memset(thread_pointer + tdata_size, 0, tbss_size);
    8000090a:	40c80733          	sub	a4,a6,a2
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    8000090e:	410786b3          	sub	a3,a5,a6
  memset(thread_pointer + tdata_size, 0, tbss_size);
    80000912:	9746                	add	a4,a4,a7
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    80000914:	8ed9                	or	a3,a3,a4
    80000916:	8a9d                	andi	a3,a3,7
    80000918:	40c78633          	sub	a2,a5,a2
    8000091c:	9646                	add	a2,a2,a7
    8000091e:	ce81                	beqz	a3,80000936 <_init+0xa0>
    80000920:	410786b3          	sub	a3,a5,a6
    while (d < (char*)(dest + len))
    80000924:	c29d                	beqz	a3,8000094a <_init+0xb4>
      *d++ = byte;
    80000926:	00170693          	addi	a3,a4,1
    8000092a:	00070023          	sb	zero,0(a4)
    8000092e:	8736                	mv	a4,a3
    80000930:	fec6ebe3          	bltu	a3,a2,80000926 <_init+0x90>
    80000934:	a819                	j	8000094a <_init+0xb4>
    80000936:	410786b3          	sub	a3,a5,a6
    while (d < (uintptr_t*)(dest + len))
    8000093a:	ca81                	beqz	a3,8000094a <_init+0xb4>
      *d++ = word;
    8000093c:	00870693          	addi	a3,a4,8
    80000940:	00073023          	sd	zero,0(a4)
    80000944:	8736                	mv	a4,a3
    while (d < (uintptr_t*)(dest + len))
    80000946:	fec6ebe3          	bltu	a3,a2,8000093c <_init+0xa6>
  thread_entry(cid, nc);
    8000094a:	00000097          	auipc	ra,0x0
    8000094e:	ef0080e7          	jalr	-272(ra) # 8000083a <thread_entry>
  int ret = main(0, 0);
    80000952:	4501                	li	a0,0
    80000954:	4581                	li	a1,0
    80000956:	00000097          	auipc	ra,0x0
    8000095a:	8ac080e7          	jalr	-1876(ra) # 80000202 <main>
  asm("ecall");
    8000095e:	00000073          	ecall
  tohost = (code << 1) | 1;
    80000962:	0506                	slli	a0,a0,0x1
    80000964:	0505                	addi	a0,a0,1
    80000966:	00001597          	auipc	a1,0x1
    8000096a:	68a5bd23          	sd	a0,1690(a1) # 80002000 <tohost>
  while (1);
    8000096e:	a001                	j	8000096e <_init+0xd8>

0000000080000970 <putchar>:
  buf[buflen++] = ch;
    80000970:	000005b7          	lui	a1,0x0
    80000974:	004586b3          	add	a3,a1,tp
    80000978:	0406a603          	lw	a2,64(a3)
    8000097c:	000005b7          	lui	a1,0x0
    80000980:	004585b3          	add	a1,a1,tp
    80000984:	00058593          	mv	a1,a1
    80000988:	00c58733          	add	a4,a1,a2
    8000098c:	00a70023          	sb	a0,0(a4)
    80000990:	4729                	li	a4,10
    80000992:	2605                	addiw	a2,a2,1
    80000994:	04c6a023          	sw	a2,64(a3)
  if (ch == '\n' || buflen == sizeof(buf))
    80000998:	00e50863          	beq	a0,a4,800009a8 <putchar+0x38>
    8000099c:	04000513          	li	a0,64
    800009a0:	00a60463          	beq	a2,a0,800009a8 <putchar+0x38>
  return 0;
    800009a4:	4501                	li	a0,0
    800009a6:	8082                	ret
    800009a8:	7119                	addi	sp,sp,-128
    800009aa:	fc86                	sd	ra,120(sp)
    800009ac:	f8a2                	sd	s0,112(sp)
    800009ae:	0100                	addi	s0,sp,128
    800009b0:	fc017113          	andi	sp,sp,-64
    800009b4:	04068513          	addi	a0,a3,64
    800009b8:	04000693          	li	a3,64
  magic_mem[0] = which;
    800009bc:	e036                	sd	a3,0(sp)
    800009be:	4685                	li	a3,1
  magic_mem[1] = arg0;
    800009c0:	e436                	sd	a3,8(sp)
  tohost = (uintptr_t)magic_mem;
    800009c2:	00001697          	auipc	a3,0x1
  magic_mem[2] = arg1;
    800009c6:	e82e                	sd	a1,16(sp)
    800009c8:	858a                	mv	a1,sp
  magic_mem[3] = arg2;
    800009ca:	ec32                	sd	a2,24(sp)
  __sync_synchronize();
    800009cc:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    800009d0:	62b6bf23          	sd	a1,1598(a3) # 80002000 <tohost>
    800009d4:	00001597          	auipc	a1,0x1
  while (fromhost == 0)
    800009d8:	66c5b603          	ld	a2,1644(a1) # 80002040 <fromhost>
    800009dc:	de75                	beqz	a2,800009d8 <putchar+0x68>
  fromhost = 0;
    800009de:	6605b623          	sd	zero,1644(a1)
  __sync_synchronize();
    800009e2:	0330000f          	fence	rw,rw
  return magic_mem[0];
    800009e6:	00013003          	ld	zero,0(sp)
    buflen = 0;
    800009ea:	00052023          	sw	zero,0(a0)
    800009ee:	f8040113          	addi	sp,s0,-128
    800009f2:	70e6                	ld	ra,120(sp)
    800009f4:	7446                	ld	s0,112(sp)
    800009f6:	6109                	addi	sp,sp,128
  return 0;
    800009f8:	4501                	li	a0,0
    800009fa:	8082                	ret

00000000800009fc <printhex>:
{
    800009fc:	7131                	addi	sp,sp,-192
    800009fe:	fd06                	sd	ra,184(sp)
    80000a00:	f922                	sd	s0,176(sp)
    80000a02:	0180                	addi	s0,sp,192
    80000a04:	fc017113          	andi	sp,sp,-64
  for (i = 0; i < 16; i++)
    80000a08:	03e10593          	addi	a1,sp,62
    80000a0c:	02e10613          	addi	a2,sp,46
    80000a10:	46a9                	li	a3,10
    80000a12:	a811                	j	80000a26 <printhex+0x2a>
    80000a14:	05700793          	li	a5,87
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80000a18:	973e                	add	a4,a4,a5
    80000a1a:	00e58023          	sb	a4,0(a1)
  for (i = 0; i < 16; i++)
    80000a1e:	15fd                	addi	a1,a1,-1
    x >>= 4;
    80000a20:	8111                	srli	a0,a0,0x4
  for (i = 0; i < 16; i++)
    80000a22:	00c58963          	beq	a1,a2,80000a34 <printhex+0x38>
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80000a26:	00f57713          	andi	a4,a0,15
    80000a2a:	fed775e3          	bgeu	a4,a3,80000a14 <printhex+0x18>
    80000a2e:	03000793          	li	a5,48
    80000a32:	b7dd                	j	80000a18 <printhex+0x1c>
    80000a34:	4501                	li	a0,0
  str[16] = 0;
    80000a36:	02010fa3          	sb	zero,63(sp)
    80000a3a:	02f10593          	addi	a1,sp,47
  while (*p)
    80000a3e:	00a58633          	add	a2,a1,a0
    80000a42:	00064603          	lbu	a2,0(a2)
    80000a46:	0505                	addi	a0,a0,1
    80000a48:	fa7d                	bnez	a2,80000a3e <printhex+0x42>
  volatile uint64_t magic_mem[8] __attribute__((aligned(64)));
    80000a4a:	157d                	addi	a0,a0,-1
    80000a4c:	04000593          	li	a1,64
  magic_mem[0] = which;
    80000a50:	e0ae                	sd	a1,64(sp)
    80000a52:	4585                	li	a1,1
  magic_mem[1] = arg0;
    80000a54:	e4ae                	sd	a1,72(sp)
    80000a56:	02f10593          	addi	a1,sp,47
  magic_mem[2] = arg1;
    80000a5a:	e8ae                	sd	a1,80(sp)
  tohost = (uintptr_t)magic_mem;
    80000a5c:	00001597          	auipc	a1,0x1
  magic_mem[3] = arg2;
    80000a60:	ecaa                	sd	a0,88(sp)
    80000a62:	0088                	addi	a0,sp,64
  __sync_synchronize();
    80000a64:	0330000f          	fence	rw,rw
  tohost = (uintptr_t)magic_mem;
    80000a68:	5aa5b223          	sd	a0,1444(a1) # 80002000 <tohost>
    80000a6c:	00001517          	auipc	a0,0x1
  while (fromhost == 0)
    80000a70:	5d453583          	ld	a1,1492(a0) # 80002040 <fromhost>
    80000a74:	ddf5                	beqz	a1,80000a70 <printhex+0x74>
  fromhost = 0;
    80000a76:	5c053a23          	sd	zero,1492(a0)
  __sync_synchronize();
    80000a7a:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80000a7e:	04013003          	ld	zero,64(sp)
}
    80000a82:	f4040113          	addi	sp,s0,-192
    80000a86:	70ea                	ld	ra,184(sp)
    80000a88:	744a                	ld	s0,176(sp)
    80000a8a:	6129                	addi	sp,sp,192
    80000a8c:	8082                	ret

0000000080000a8e <printf>:
{
    80000a8e:	715d                	addi	sp,sp,-80
    80000a90:	e406                	sd	ra,8(sp)
    80000a92:	82aa                	mv	t0,a0
    80000a94:	fc3e                	sd	a5,56(sp)
    80000a96:	e0c2                	sd	a6,64(sp)
    80000a98:	e4c6                	sd	a7,72(sp)
    80000a9a:	ec2e                	sd	a1,24(sp)
    80000a9c:	f032                	sd	a2,32(sp)
    80000a9e:	f436                	sd	a3,40(sp)
    80000aa0:	f83a                	sd	a4,48(sp)
    80000aa2:	0828                	addi	a0,sp,24
  va_start(ap, fmt);
    80000aa4:	e02a                	sd	a0,0(sp)
  vprintfmt((void*)putchar, 0, fmt, ap);
    80000aa6:	00000517          	auipc	a0,0x0
    80000aaa:	eca50513          	addi	a0,a0,-310 # 80000970 <putchar>
    80000aae:	0834                	addi	a3,sp,24
    80000ab0:	4581                	li	a1,0
    80000ab2:	8616                	mv	a2,t0
    80000ab4:	00000097          	auipc	ra,0x0
    80000ab8:	010080e7          	jalr	16(ra) # 80000ac4 <vprintfmt>
  return 0; // incorrect return value, but who cares, anyway?
    80000abc:	4501                	li	a0,0
    80000abe:	60a2                	ld	ra,8(sp)
    80000ac0:	6161                	addi	sp,sp,80
    80000ac2:	8082                	ret

0000000080000ac4 <vprintfmt>:
{
    80000ac4:	7149                	addi	sp,sp,-368
    80000ac6:	f686                	sd	ra,360(sp)
    80000ac8:	f2a2                	sd	s0,352(sp)
    80000aca:	eea6                	sd	s1,344(sp)
    80000acc:	eaca                	sd	s2,336(sp)
    80000ace:	e6ce                	sd	s3,328(sp)
    80000ad0:	e2d2                	sd	s4,320(sp)
    80000ad2:	fe56                	sd	s5,312(sp)
    80000ad4:	fa5a                	sd	s6,304(sp)
    80000ad6:	f65e                	sd	s7,296(sp)
    80000ad8:	f262                	sd	s8,288(sp)
    80000ada:	ee66                	sd	s9,280(sp)
    80000adc:	ea6a                	sd	s10,272(sp)
    80000ade:	e66e                	sd	s11,264(sp)
    80000ae0:	8a36                	mv	s4,a3
    80000ae2:	8b32                	mv	s6,a2
    80000ae4:	8cae                	mv	s9,a1
    80000ae6:	892a                	mv	s2,a0
    80000ae8:	02500c13          	li	s8,37
    80000aec:	5d59                	li	s10,-10
    80000aee:	4aa5                	li	s5,9
    while ((ch = *(unsigned char *) fmt) != '%') {
    80000af0:	001b0993          	addi	s3,s6,1
    80000af4:	fff9c503          	lbu	a0,-1(s3)
    80000af8:	01850b63          	beq	a0,s8,80000b0e <vprintfmt+0x4a>
    80000afc:	24050b63          	beqz	a0,80000d52 <vprintfmt+0x28e>
      putch(ch, putdat);
    80000b00:	85e6                	mv	a1,s9
    80000b02:	9902                	jalr	s2
    while ((ch = *(unsigned char *) fmt) != '%') {
    80000b04:	0985                	addi	s3,s3,1
    80000b06:	fff9c503          	lbu	a0,-1(s3)
    80000b0a:	ff8519e3          	bne	a0,s8,80000afc <vprintfmt+0x38>
    80000b0e:	e052                	sd	s4,0(sp)
    80000b10:	4501                	li	a0,0
    80000b12:	02000a13          	li	s4,32
    80000b16:	5bfd                	li	s7,-1
    80000b18:	8b4e                	mv	s6,s3
    80000b1a:	5dfd                	li	s11,-1
    80000b1c:	05500413          	li	s0,85
    80000b20:	a031                	j	80000b2c <vprintfmt+0x68>
      if (width < 0)
    80000b22:	43fbd693          	srai	a3,s7,0x3f
    80000b26:	00c6edb3          	or	s11,a3,a2
    80000b2a:	8bae                	mv	s7,a1
    80000b2c:	017025b3          	sgtz	a1,s7
    80000b30:	40b005bb          	negw	a1,a1
    80000b34:	0175f633          	and	a2,a1,s7
    switch (ch = *(unsigned char *) fmt++) {
    80000b38:	000b4583          	lbu	a1,0(s6)
    80000b3c:	fdd58713          	addi	a4,a1,-35
    80000b40:	18e46d63          	bltu	s0,a4,80000cda <vprintfmt+0x216>
    80000b44:	86da                	mv	a3,s6
    80000b46:	070e                	slli	a4,a4,0x3
    80000b48:	00001797          	auipc	a5,0x1
    80000b4c:	b3078793          	addi	a5,a5,-1232 # 80001678 <golden+0x248>
    80000b50:	973e                	add	a4,a4,a5
    80000b52:	6318                	ld	a4,0(a4)
    80000b54:	0b05                	addi	s6,s6,1
    80000b56:	8702                	jr	a4
    80000b58:	8a2e                	mv	s4,a1
    80000b5a:	bff9                	j	80000b38 <vprintfmt+0x74>
    80000b5c:	8bb2                	mv	s7,a2
    80000b5e:	bfe9                	j	80000b38 <vprintfmt+0x74>
    80000b60:	4601                	li	a2,0
        precision = precision * 10 + ch - '0';
    80000b62:	00161713          	slli	a4,a2,0x1
    80000b66:	060e                	slli	a2,a2,0x3
    80000b68:	963a                	add	a2,a2,a4
    80000b6a:	962e                	add	a2,a2,a1
        ch = *fmt;
    80000b6c:	0016c583          	lbu	a1,1(a3)
    80000b70:	0685                	addi	a3,a3,1
        if (ch < '0' || ch > '9')
    80000b72:	fc658713          	addi	a4,a1,-58
        precision = precision * 10 + ch - '0';
    80000b76:	fd06061b          	addiw	a2,a2,-48
        if (ch < '0' || ch > '9')
    80000b7a:	ffa774e3          	bgeu	a4,s10,80000b62 <vprintfmt+0x9e>
    80000b7e:	8b36                	mv	s6,a3
    80000b80:	85b2                	mv	a1,a2
      if (width < 0)
    80000b82:	fa0bc0e3          	bltz	s7,80000b22 <vprintfmt+0x5e>
    80000b86:	85de                	mv	a1,s7
    80000b88:	bf69                	j	80000b22 <vprintfmt+0x5e>
    80000b8a:	6582                	ld	a1,0(sp)
      precision = va_arg(ap, int);
    80000b8c:	4190                	lw	a2,0(a1)
    80000b8e:	05a1                	addi	a1,a1,8
    80000b90:	e02e                	sd	a1,0(sp)
    80000b92:	85b2                	mv	a1,a2
      if (width < 0)
    80000b94:	f80bc7e3          	bltz	s7,80000b22 <vprintfmt+0x5e>
    80000b98:	b7fd                	j	80000b86 <vprintfmt+0xc2>
      lflag++;
    80000b9a:	2505                	addiw	a0,a0,1
      goto reswitch;
    80000b9c:	bf41                	j	80000b2c <vprintfmt+0x68>
    80000b9e:	49a1                	li	s3,8
  if (lflag >= 2)
    80000ba0:	4589                	li	a1,2
    80000ba2:	08b54e63          	blt	a0,a1,80000c3e <vprintfmt+0x17a>
    80000ba6:	a869                	j	80000c40 <vprintfmt+0x17c>
    80000ba8:	49a9                	li	s3,10
    80000baa:	4589                	li	a1,2
    80000bac:	08b54963          	blt	a0,a1,80000c3e <vprintfmt+0x17a>
    80000bb0:	a841                	j	80000c40 <vprintfmt+0x17c>
    80000bb2:	6502                	ld	a0,0(sp)
      if ((p = va_arg(ap, char *)) == NULL)
    80000bb4:	00053983          	ld	s3,0(a0)
    80000bb8:	00099663          	bnez	s3,80000bc4 <vprintfmt+0x100>
    80000bbc:	00001997          	auipc	s3,0x1
    80000bc0:	aaf98993          	addi	s3,s3,-1361 # 8000166b <golden+0x23b>
      if (width > 0 && padc != '-')
    80000bc4:	15705e63          	blez	s7,80000d20 <vprintfmt+0x25c>
    80000bc8:	02d00513          	li	a0,45
    80000bcc:	12aa0363          	beq	s4,a0,80000cf2 <vprintfmt+0x22e>
    80000bd0:	854e                	mv	a0,s3
}

size_t strnlen(const char *s, size_t n)
{
  const char *p = s;
  while (n-- && *p)
    80000bd2:	000d8d63          	beqz	s11,80000bec <vprintfmt+0x128>
    80000bd6:	01b985b3          	add	a1,s3,s11
    80000bda:	866e                	mv	a2,s11
    80000bdc:	854e                	mv	a0,s3
    80000bde:	00054683          	lbu	a3,0(a0)
    80000be2:	c689                	beqz	a3,80000bec <vprintfmt+0x128>
    80000be4:	167d                	addi	a2,a2,-1
    p++;
    80000be6:	0505                	addi	a0,a0,1
  while (n-- && *p)
    80000be8:	fa7d                	bnez	a2,80000bde <vprintfmt+0x11a>
    80000bea:	852e                	mv	a0,a1
  return p - s;
    80000bec:	40a98533          	sub	a0,s3,a0
        for (width -= strnlen(p, precision); width > 0; width--)
    80000bf0:	00ab843b          	addw	s0,s7,a0
    80000bf4:	10805063          	blez	s0,80000cf4 <vprintfmt+0x230>
    80000bf8:	955e                	add	a0,a0,s7
    80000bfa:	00150413          	addi	s0,a0,1
    80000bfe:	4485                	li	s1,1
          putch(padc, putdat);
    80000c00:	8552                	mv	a0,s4
    80000c02:	85e6                	mv	a1,s9
    80000c04:	9902                	jalr	s2
        for (width -= strnlen(p, precision); width > 0; width--)
    80000c06:	347d                	addiw	s0,s0,-1
    80000c08:	fe84cce3          	blt	s1,s0,80000c00 <vprintfmt+0x13c>
    80000c0c:	4401                	li	s0,0
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80000c0e:	0009c503          	lbu	a0,0(s3)
    80000c12:	e565                	bnez	a0,80000cfa <vprintfmt+0x236>
    80000c14:	aa11                	j	80000d28 <vprintfmt+0x264>
    80000c16:	6402                	ld	s0,0(sp)
      putch(va_arg(ap, int), putdat);
    80000c18:	4008                	lw	a0,0(s0)
    80000c1a:	00840a13          	addi	s4,s0,8
    80000c1e:	85e6                	mv	a1,s9
    80000c20:	9902                	jalr	s2
      break;
    80000c22:	b5f9                	j	80000af0 <vprintfmt+0x2c>
      putch('0', putdat);
    80000c24:	03000513          	li	a0,48
    80000c28:	85e6                	mv	a1,s9
    80000c2a:	9902                	jalr	s2
      putch('x', putdat);
    80000c2c:	07800513          	li	a0,120
    80000c30:	85e6                	mv	a1,s9
    80000c32:	9902                	jalr	s2
    80000c34:	4505                	li	a0,1
    80000c36:	49c1                	li	s3,16
  if (lflag >= 2)
    80000c38:	4589                	li	a1,2
    80000c3a:	00b55363          	bge	a0,a1,80000c40 <vprintfmt+0x17c>
  else if (lflag)
    80000c3e:	c54d                	beqz	a0,80000ce8 <vprintfmt+0x224>
    80000c40:	6482                	ld	s1,0(sp)
    80000c42:	8da6                	mv	s11,s1
    80000c44:	6084                	ld	s1,0(s1)
    digs[pos++] = num % base;
    80000c46:	0334f533          	remu	a0,s1,s3
    80000c4a:	c42a                	sw	a0,8(sp)
    80000c4c:	4405                	li	s0,1
    if (num < base)
    80000c4e:	0134ec63          	bltu	s1,s3,80000c66 <vprintfmt+0x1a2>
    80000c52:	0068                	addi	a0,sp,12
    num /= base;
    80000c54:	0334d4b3          	divu	s1,s1,s3
    digs[pos++] = num % base;
    80000c58:	0334f5b3          	remu	a1,s1,s3
    80000c5c:	c10c                	sw	a1,0(a0)
    if (num < base)
    80000c5e:	0511                	addi	a0,a0,4
    80000c60:	2405                	addiw	s0,s0,1
    80000c62:	ff34f9e3          	bgeu	s1,s3,80000c54 <vprintfmt+0x190>
  while (width-- > pos)
    80000c66:	01745863          	bge	s0,s7,80000c76 <vprintfmt+0x1b2>
    80000c6a:	3bfd                	addiw	s7,s7,-1
    putch(padc, putdat);
    80000c6c:	8552                	mv	a0,s4
    80000c6e:	85e6                	mv	a1,s9
    80000c70:	9902                	jalr	s2
  while (width-- > pos)
    80000c72:	ff744ce3          	blt	s0,s7,80000c6a <vprintfmt+0x1a6>
    80000c76:	8522                	mv	a0,s0
    80000c78:	8a6e                	mv	s4,s11
    80000c7a:	00805363          	blez	s0,80000c80 <vprintfmt+0x1bc>
    80000c7e:	4505                	li	a0,1
    80000c80:	0a21                	addi	s4,s4,8
  while (pos-- > 0)
    80000c82:	040a                	slli	s0,s0,0x2
    80000c84:	050a                	slli	a0,a0,0x2
    80000c86:	004c                	addi	a1,sp,4
    80000c88:	942e                	add	s0,s0,a1
    80000c8a:	848a                	mv	s1,sp
    80000c8c:	94aa                	add	s1,s1,a0
    80000c8e:	a809                	j	80000ca0 <vprintfmt+0x1dc>
    80000c90:	03000593          	li	a1,48
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80000c94:	9d2d                	addw	a0,a0,a1
    80000c96:	85e6                	mv	a1,s9
    80000c98:	9902                	jalr	s2
  while (pos-- > 0)
    80000c9a:	1471                	addi	s0,s0,-4
    80000c9c:	e4940ae3          	beq	s0,s1,80000af0 <vprintfmt+0x2c>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80000ca0:	4008                	lw	a0,0(s0)
    80000ca2:	feaaf7e3          	bgeu	s5,a0,80000c90 <vprintfmt+0x1cc>
    80000ca6:	05700593          	li	a1,87
    80000caa:	b7ed                	j	80000c94 <vprintfmt+0x1d0>
      putch(ch, putdat);
    80000cac:	02500513          	li	a0,37
    80000cb0:	85e6                	mv	a1,s9
    80000cb2:	9902                	jalr	s2
    80000cb4:	6a02                	ld	s4,0(sp)
      break;
    80000cb6:	bd2d                	j	80000af0 <vprintfmt+0x2c>
  if (lflag >= 2)
    80000cb8:	4589                	li	a1,2
    80000cba:	00b55363          	bge	a0,a1,80000cc0 <vprintfmt+0x1fc>
  else if (lflag)
    80000cbe:	c159                	beqz	a0,80000d44 <vprintfmt+0x280>
    80000cc0:	6482                	ld	s1,0(sp)
    80000cc2:	8da6                	mv	s11,s1
    80000cc4:	6084                	ld	s1,0(s1)
    80000cc6:	49a9                	li	s3,10
      if ((long long) num < 0) {
    80000cc8:	f604dfe3          	bgez	s1,80000c46 <vprintfmt+0x182>
        putch('-', putdat);
    80000ccc:	02d00513          	li	a0,45
    80000cd0:	85e6                	mv	a1,s9
    80000cd2:	9902                	jalr	s2
        num = -(long long) num;
    80000cd4:	409004b3          	neg	s1,s1
      }
    80000cd8:	b7bd                	j	80000c46 <vprintfmt+0x182>
      putch('%', putdat);
    80000cda:	02500513          	li	a0,37
    80000cde:	85e6                	mv	a1,s9
    80000ce0:	9902                	jalr	s2
    80000ce2:	8b4e                	mv	s6,s3
    80000ce4:	6a02                	ld	s4,0(sp)
      break;
    80000ce6:	b529                	j	80000af0 <vprintfmt+0x2c>
    80000ce8:	6482                	ld	s1,0(sp)
    80000cea:	8da6                	mv	s11,s1
    return va_arg(*ap, unsigned int);
    80000cec:	0004e483          	lwu	s1,0(s1)
    80000cf0:	bf99                	j	80000c46 <vprintfmt+0x182>
    80000cf2:	845e                	mv	s0,s7
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80000cf4:	0009c503          	lbu	a0,0(s3)
    80000cf8:	c905                	beqz	a0,80000d28 <vprintfmt+0x264>
    80000cfa:	0985                	addi	s3,s3,1
    80000cfc:	4485                	li	s1,1
    80000cfe:	6a02                	ld	s4,0(sp)
    80000d00:	a811                	j	80000d14 <vprintfmt+0x250>
    80000d02:	0ff57513          	zext.b	a0,a0
        putch(ch, putdat);
    80000d06:	85e6                	mv	a1,s9
    80000d08:	9902                	jalr	s2
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80000d0a:	0009c503          	lbu	a0,0(s3)
    80000d0e:	347d                	addiw	s0,s0,-1
    80000d10:	0985                	addi	s3,s3,1
    80000d12:	cd09                	beqz	a0,80000d2c <vprintfmt+0x268>
    80000d14:	fe0dc7e3          	bltz	s11,80000d02 <vprintfmt+0x23e>
    80000d18:	000d8a63          	beqz	s11,80000d2c <vprintfmt+0x268>
    80000d1c:	3dfd                	addiw	s11,s11,-1
    80000d1e:	b7d5                	j	80000d02 <vprintfmt+0x23e>
    80000d20:	845e                	mv	s0,s7
    80000d22:	0009c503          	lbu	a0,0(s3)
    80000d26:	f971                	bnez	a0,80000cfa <vprintfmt+0x236>
    80000d28:	4485                	li	s1,1
    80000d2a:	6a02                	ld	s4,0(sp)
    80000d2c:	0a21                	addi	s4,s4,8
      for (; width > 0; width--)
    80000d2e:	dc8051e3          	blez	s0,80000af0 <vprintfmt+0x2c>
    80000d32:	0405                	addi	s0,s0,1
        putch(' ', putdat);
    80000d34:	02000513          	li	a0,32
    80000d38:	85e6                	mv	a1,s9
    80000d3a:	9902                	jalr	s2
      for (; width > 0; width--)
    80000d3c:	347d                	addiw	s0,s0,-1
    80000d3e:	fe84cbe3          	blt	s1,s0,80000d34 <vprintfmt+0x270>
    80000d42:	b37d                	j	80000af0 <vprintfmt+0x2c>
    80000d44:	6482                	ld	s1,0(sp)
    80000d46:	8da6                	mv	s11,s1
    return va_arg(*ap, int);
    80000d48:	4084                	lw	s1,0(s1)
    80000d4a:	49a9                	li	s3,10
      if ((long long) num < 0) {
    80000d4c:	ee04dde3          	bgez	s1,80000c46 <vprintfmt+0x182>
    80000d50:	bfb5                	j	80000ccc <vprintfmt+0x208>
}
    80000d52:	70b6                	ld	ra,360(sp)
    80000d54:	7416                	ld	s0,352(sp)
    80000d56:	64f6                	ld	s1,344(sp)
    80000d58:	6956                	ld	s2,336(sp)
    80000d5a:	69b6                	ld	s3,328(sp)
    80000d5c:	6a16                	ld	s4,320(sp)
    80000d5e:	7af2                	ld	s5,312(sp)
    80000d60:	7b52                	ld	s6,304(sp)
    80000d62:	7bb2                	ld	s7,296(sp)
    80000d64:	7c12                	ld	s8,288(sp)
    80000d66:	6cf2                	ld	s9,280(sp)
    80000d68:	6d52                	ld	s10,272(sp)
    80000d6a:	6db2                	ld	s11,264(sp)
    80000d6c:	6175                	addi	sp,sp,368
    80000d6e:	8082                	ret

0000000080000d70 <sprintf_putch>:
  **pstr = ch;
    80000d70:	6190                	ld	a2,0(a1)
    80000d72:	00a60023          	sb	a0,0(a2)
  (*pstr)++;
    80000d76:	6188                	ld	a0,0(a1)
    80000d78:	0505                	addi	a0,a0,1
    80000d7a:	e188                	sd	a0,0(a1)
}
    80000d7c:	8082                	ret

0000000080000d7e <sprintf>:
{
    80000d7e:	7125                	addi	sp,sp,-416
    80000d80:	f6a2                	sd	s0,360(sp)
    80000d82:	f2a6                	sd	s1,352(sp)
    80000d84:	eeca                	sd	s2,344(sp)
    80000d86:	eace                	sd	s3,336(sp)
    80000d88:	e6d2                	sd	s4,328(sp)
    80000d8a:	e2d6                	sd	s5,320(sp)
    80000d8c:	fe5a                	sd	s6,312(sp)
    80000d8e:	fa5e                	sd	s7,304(sp)
    80000d90:	f662                	sd	s8,296(sp)
    80000d92:	f266                	sd	s9,288(sp)
    80000d94:	ee6a                	sd	s10,280(sp)
    80000d96:	ea6e                	sd	s11,272(sp)
    80000d98:	eb42                	sd	a6,400(sp)
    80000d9a:	ef46                	sd	a7,408(sp)
    80000d9c:	fab2                	sd	a2,368(sp)
    80000d9e:	feb6                	sd	a3,376(sp)
    80000da0:	e33a                	sd	a4,384(sp)
    80000da2:	e73e                	sd	a5,392(sp)
    80000da4:	17010e93          	addi	t4,sp,368
  while (1) {
    80000da8:	40a002b3          	neg	t0,a0
    80000dac:	01410813          	addi	a6,sp,20
    80000db0:	00c10893          	addi	a7,sp,12
    80000db4:	02500b93          	li	s7,37
    80000db8:	05500313          	li	t1,85
    80000dbc:	5ad9                	li	s5,-10
    80000dbe:	4389                	li	t2,2
    80000dc0:	02d00e13          	li	t3,45
    80000dc4:	49a5                	li	s3,9
    80000dc6:	03000f13          	li	t5,48
    80000dca:	07800f93          	li	t6,120
  va_start(ap, fmt);
    80000dce:	e476                	sd	t4,8(sp)
    80000dd0:	02000913          	li	s2,32
    80000dd4:	4d81                	li	s11,0
    while ((ch = *(unsigned char *) fmt) != '%') {
    80000dd6:	00a2863b          	addw	a2,t0,a0
    80000dda:	00158693          	addi	a3,a1,1
    80000dde:	84aa                	mv	s1,a0
    80000de0:	fff6c583          	lbu	a1,-1(a3)
    80000de4:	24058963          	beqz	a1,80001036 <sprintf+0x2b8>
    80000de8:	01758c63          	beq	a1,s7,80000e00 <sprintf+0x82>
  **pstr = ch;
    80000dec:	00b48023          	sb	a1,0(s1)
  (*pstr)++;
    80000df0:	0485                	addi	s1,s1,1
    while ((ch = *(unsigned char *) fmt) != '%') {
    80000df2:	2605                	addiw	a2,a2,1
    80000df4:	0685                	addi	a3,a3,1
    80000df6:	0d85                	addi	s11,s11,1
    80000df8:	fff6c583          	lbu	a1,-1(a3)
    80000dfc:	f5f5                	bnez	a1,80000de8 <sprintf+0x6a>
    80000dfe:	ac25                	j	80001036 <sprintf+0x2b8>
    80000e00:	4b01                	li	s6,0
    80000e02:	02000c13          	li	s8,32
    80000e06:	5cfd                	li	s9,-1
    80000e08:	85b6                	mv	a1,a3
    80000e0a:	5a7d                	li	s4,-1
    80000e0c:	01902633          	sgtz	a2,s9
    80000e10:	40c0063b          	negw	a2,a2
    80000e14:	01967d33          	and	s10,a2,s9
    80000e18:	862e                	mv	a2,a1
    switch (ch = *(unsigned char *) fmt++) {
    80000e1a:	0005c403          	lbu	s0,0(a1)
    80000e1e:	fdd40593          	addi	a1,s0,-35
    80000e22:	1cb36763          	bltu	t1,a1,80000ff0 <sprintf+0x272>
    80000e26:	058e                	slli	a1,a1,0x3
    80000e28:	00001797          	auipc	a5,0x1
    80000e2c:	b0078793          	addi	a5,a5,-1280 # 80001928 <golden+0x4f8>
    80000e30:	95be                	add	a1,a1,a5
    80000e32:	619c                	ld	a5,0(a1)
    80000e34:	00160593          	addi	a1,a2,1
    80000e38:	8782                	jr	a5
    80000e3a:	8c22                	mv	s8,s0
    80000e3c:	bff1                	j	80000e18 <sprintf+0x9a>
    80000e3e:	8cea                	mv	s9,s10
    80000e40:	bfe1                	j	80000e18 <sprintf+0x9a>
    80000e42:	4781                	li	a5,0
        precision = precision * 10 + ch - '0';
    80000e44:	00179593          	slli	a1,a5,0x1
    80000e48:	078e                	slli	a5,a5,0x3
    80000e4a:	95be                	add	a1,a1,a5
    80000e4c:	95a2                	add	a1,a1,s0
        ch = *fmt;
    80000e4e:	00164403          	lbu	s0,1(a2)
    80000e52:	0605                	addi	a2,a2,1
        if (ch < '0' || ch > '9')
    80000e54:	fc640713          	addi	a4,s0,-58
        precision = precision * 10 + ch - '0';
    80000e58:	fd05879b          	addiw	a5,a1,-48
        if (ch < '0' || ch > '9')
    80000e5c:	ff5774e3          	bgeu	a4,s5,80000e44 <sprintf+0xc6>
    80000e60:	85b2                	mv	a1,a2
    80000e62:	863e                	mv	a2,a5
      if (width < 0)
    80000e64:	000cc363          	bltz	s9,80000e6a <sprintf+0xec>
    80000e68:	8666                	mv	a2,s9
    80000e6a:	43fcd713          	srai	a4,s9,0x3f
    80000e6e:	00f76a33          	or	s4,a4,a5
    80000e72:	8cb2                	mv	s9,a2
    80000e74:	bf61                	j	80000e0c <sprintf+0x8e>
      precision = va_arg(ap, int);
    80000e76:	000ea783          	lw	a5,0(t4)
    80000e7a:	0ea1                	addi	t4,t4,8
    80000e7c:	863e                	mv	a2,a5
      if (width < 0)
    80000e7e:	fe0cd5e3          	bgez	s9,80000e68 <sprintf+0xea>
    80000e82:	b7e5                	j	80000e6a <sprintf+0xec>
      lflag++;
    80000e84:	2b05                	addiw	s6,s6,1
      goto reswitch;
    80000e86:	b759                	j	80000e0c <sprintf+0x8e>
    80000e88:	4521                	li	a0,8
  if (lflag >= 2)
    80000e8a:	027b5663          	bge	s6,t2,80000eb6 <sprintf+0x138>
    80000e8e:	a015                	j	80000eb2 <sprintf+0x134>
    80000e90:	4541                	li	a0,16
    80000e92:	027b5263          	bge	s6,t2,80000eb6 <sprintf+0x138>
    80000e96:	a831                	j	80000eb2 <sprintf+0x134>
  **pstr = ch;
    80000e98:	01e48023          	sb	t5,0(s1)
    80000e9c:	01f480a3          	sb	t6,1(s1)
  (*pstr)++;
    80000ea0:	0489                	addi	s1,s1,2
    80000ea2:	4b05                	li	s6,1
    80000ea4:	4541                	li	a0,16
  if (lflag >= 2)
    80000ea6:	007b4663          	blt	s6,t2,80000eb2 <sprintf+0x134>
    80000eaa:	a031                	j	80000eb6 <sprintf+0x138>
    80000eac:	4529                	li	a0,10
    80000eae:	007b5463          	bge	s6,t2,80000eb6 <sprintf+0x138>
  else if (lflag)
    80000eb2:	140b0563          	beqz	s6,80000ffc <sprintf+0x27e>
    80000eb6:	000eb683          	ld	a3,0(t4)
    digs[pos++] = num % base;
    80000eba:	02a6f633          	remu	a2,a3,a0
    80000ebe:	c832                	sw	a2,16(sp)
    80000ec0:	4705                	li	a4,1
    80000ec2:	00a6ec63          	bltu	a3,a0,80000eda <sprintf+0x15c>
    80000ec6:	8642                	mv	a2,a6
    num /= base;
    80000ec8:	02a6d6b3          	divu	a3,a3,a0
    digs[pos++] = num % base;
    80000ecc:	02a6f7b3          	remu	a5,a3,a0
    80000ed0:	c21c                	sw	a5,0(a2)
    if (num < base)
    80000ed2:	0611                	addi	a2,a2,4
    80000ed4:	2705                	addiw	a4,a4,1
    80000ed6:	fea6f9e3          	bgeu	a3,a0,80000ec8 <sprintf+0x14a>
    80000eda:	01975e63          	bge	a4,s9,80000ef6 <sprintf+0x178>
  while (width-- > pos)
    80000ede:	fff74513          	not	a0,a4
    80000ee2:	9566                	add	a0,a0,s9
    80000ee4:	1502                	slli	a0,a0,0x20
    80000ee6:	9101                	srli	a0,a0,0x20
    80000ee8:	9526                	add	a0,a0,s1
    80000eea:	0505                	addi	a0,a0,1
  **pstr = ch;
    80000eec:	01848023          	sb	s8,0(s1)
  (*pstr)++;
    80000ef0:	0485                	addi	s1,s1,1
    80000ef2:	fea49de3          	bne	s1,a0,80000eec <sprintf+0x16e>
    80000ef6:	853a                	mv	a0,a4
    80000ef8:	00e05363          	blez	a4,80000efe <sprintf+0x180>
    80000efc:	4505                	li	a0,1
    80000efe:	0ea1                	addi	t4,t4,8
  while (pos-- > 0)
    80000f00:	00271613          	slli	a2,a4,0x2
    80000f04:	8f09                	sub	a4,a4,a0
    80000f06:	00c88533          	add	a0,a7,a2
    80000f0a:	00e48633          	add	a2,s1,a4
    80000f0e:	0605                	addi	a2,a2,1
    80000f10:	a811                	j	80000f24 <sprintf+0x1a6>
    80000f12:	03000713          	li	a4,48
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80000f16:	96ba                	add	a3,a3,a4
  **pstr = ch;
    80000f18:	00d48023          	sb	a3,0(s1)
  (*pstr)++;
    80000f1c:	0485                	addi	s1,s1,1
  while (pos-- > 0)
    80000f1e:	1571                	addi	a0,a0,-4
    80000f20:	00c48863          	beq	s1,a2,80000f30 <sprintf+0x1b2>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80000f24:	4114                	lw	a3,0(a0)
    80000f26:	fed9f6e3          	bgeu	s3,a3,80000f12 <sprintf+0x194>
    80000f2a:	05700713          	li	a4,87
    80000f2e:	b7e5                	j	80000f16 <sprintf+0x198>
    80000f30:	8526                	mv	a0,s1
      break;
    80000f32:	b54d                	j	80000dd4 <sprintf+0x56>
      putch(va_arg(ap, int), putdat);
    80000f34:	000ec503          	lbu	a0,0(t4)
    80000f38:	0ea1                	addi	t4,t4,8
  **pstr = ch;
    80000f3a:	00a48023          	sb	a0,0(s1)
  (*pstr)++;
    80000f3e:	00148513          	addi	a0,s1,1
      break;
    80000f42:	bd49                	j	80000dd4 <sprintf+0x56>
      if ((p = va_arg(ap, char *)) == NULL)
    80000f44:	000eb683          	ld	a3,0(t4)
    80000f48:	e689                	bnez	a3,80000f52 <sprintf+0x1d4>
    80000f4a:	00000697          	auipc	a3,0x0
    80000f4e:	72168693          	addi	a3,a3,1825 # 8000166b <golden+0x23b>
      if (width > 0 && padc != '-')
    80000f52:	05905763          	blez	s9,80000fa0 <sprintf+0x222>
    80000f56:	05cc0563          	beq	s8,t3,80000fa0 <sprintf+0x222>
    80000f5a:	8636                	mv	a2,a3
  while (n-- && *p)
    80000f5c:	000a0d63          	beqz	s4,80000f76 <sprintf+0x1f8>
    80000f60:	014687b3          	add	a5,a3,s4
    80000f64:	8452                	mv	s0,s4
    80000f66:	8636                	mv	a2,a3
    80000f68:	00064703          	lbu	a4,0(a2)
    80000f6c:	c709                	beqz	a4,80000f76 <sprintf+0x1f8>
    80000f6e:	147d                	addi	s0,s0,-1
    p++;
    80000f70:	0605                	addi	a2,a2,1
  while (n-- && *p)
    80000f72:	f87d                	bnez	s0,80000f68 <sprintf+0x1ea>
    80000f74:	863e                	mv	a2,a5
  return p - s;
    80000f76:	40c68733          	sub	a4,a3,a2
        for (width -= strnlen(p, precision); width > 0; width--)
    80000f7a:	00ec87bb          	addw	a5,s9,a4
    80000f7e:	08f05263          	blez	a5,80001002 <sprintf+0x284>
    80000f82:	956e                	add	a0,a0,s11
    80000f84:	fff64613          	not	a2,a2
    80000f88:	9cb6                	add	s9,s9,a3
    80000f8a:	9666                	add	a2,a2,s9
    80000f8c:	1602                	slli	a2,a2,0x20
    80000f8e:	9201                	srli	a2,a2,0x20
    80000f90:	9532                	add	a0,a0,a2
    80000f92:	0505                	addi	a0,a0,1
  **pstr = ch;
    80000f94:	01848023          	sb	s8,0(s1)
  (*pstr)++;
    80000f98:	0485                	addi	s1,s1,1
        for (width -= strnlen(p, precision); width > 0; width--)
    80000f9a:	fea49de3          	bne	s1,a0,80000f94 <sprintf+0x216>
    80000f9e:	4c81                	li	s9,0
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80000fa0:	0006c703          	lbu	a4,0(a3)
    80000fa4:	c33d                	beqz	a4,8000100a <sprintf+0x28c>
    80000fa6:	0685                	addi	a3,a3,1
    80000fa8:	8526                	mv	a0,s1
    80000faa:	a811                	j	80000fbe <sprintf+0x240>
    80000fac:	3a7d                	addiw	s4,s4,-1
  **pstr = ch;
    80000fae:	00e50023          	sb	a4,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80000fb2:	0006c703          	lbu	a4,0(a3)
  (*pstr)++;
    80000fb6:	0505                	addi	a0,a0,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80000fb8:	3cfd                	addiw	s9,s9,-1
    80000fba:	0685                	addi	a3,a3,1
    80000fbc:	cb21                	beqz	a4,8000100c <sprintf+0x28e>
    80000fbe:	fe0a48e3          	bltz	s4,80000fae <sprintf+0x230>
    80000fc2:	fe0a15e3          	bnez	s4,80000fac <sprintf+0x22e>
    80000fc6:	a099                	j	8000100c <sprintf+0x28e>
  **pstr = ch;
    80000fc8:	01748023          	sb	s7,0(s1)
  (*pstr)++;
    80000fcc:	00148513          	addi	a0,s1,1
      break;
    80000fd0:	b511                	j	80000dd4 <sprintf+0x56>
  if (lflag >= 2)
    80000fd2:	007b5463          	bge	s6,t2,80000fda <sprintf+0x25c>
    80000fd6:	040b0a63          	beqz	s6,8000102a <sprintf+0x2ac>
    80000fda:	000eb683          	ld	a3,0(t4)
    80000fde:	4529                	li	a0,10
      if ((long long) num < 0) {
    80000fe0:	ec06dde3          	bgez	a3,80000eba <sprintf+0x13c>
  **pstr = ch;
    80000fe4:	01c48023          	sb	t3,0(s1)
  (*pstr)++;
    80000fe8:	0485                	addi	s1,s1,1
        num = -(long long) num;
    80000fea:	40d006b3          	neg	a3,a3
    80000fee:	b5f1                	j	80000eba <sprintf+0x13c>
  **pstr = ch;
    80000ff0:	01748023          	sb	s7,0(s1)
  (*pstr)++;
    80000ff4:	00148513          	addi	a0,s1,1
    80000ff8:	85b6                	mv	a1,a3
      break;
    80000ffa:	bbe9                	j	80000dd4 <sprintf+0x56>
    return va_arg(*ap, unsigned int);
    80000ffc:	000ee683          	lwu	a3,0(t4)
    80001000:	bd6d                	j	80000eba <sprintf+0x13c>
    80001002:	8cbe                	mv	s9,a5
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80001004:	0006c703          	lbu	a4,0(a3)
    80001008:	ff59                	bnez	a4,80000fa6 <sprintf+0x228>
    8000100a:	8526                	mv	a0,s1
    8000100c:	0ea1                	addi	t4,t4,8
      for (; width > 0; width--)
    8000100e:	dd9053e3          	blez	s9,80000dd4 <sprintf+0x56>
    80001012:	1cfd                	addi	s9,s9,-1
    80001014:	1c82                	slli	s9,s9,0x20
    80001016:	020cd613          	srli	a2,s9,0x20
    8000101a:	962a                	add	a2,a2,a0
    8000101c:	0605                	addi	a2,a2,1
  **pstr = ch;
    8000101e:	01250023          	sb	s2,0(a0)
  (*pstr)++;
    80001022:	0505                	addi	a0,a0,1
      for (; width > 0; width--)
    80001024:	fec51de3          	bne	a0,a2,8000101e <sprintf+0x2a0>
    80001028:	b375                	j	80000dd4 <sprintf+0x56>
    return va_arg(*ap, int);
    8000102a:	000ea683          	lw	a3,0(t4)
    8000102e:	4529                	li	a0,10
      if ((long long) num < 0) {
    80001030:	e806d5e3          	bgez	a3,80000eba <sprintf+0x13c>
    80001034:	bf45                	j	80000fe4 <sprintf+0x266>
  *str = 0;
    80001036:	00048023          	sb	zero,0(s1)
  return str - str0;
    8000103a:	8532                	mv	a0,a2
    8000103c:	7436                	ld	s0,360(sp)
    8000103e:	7496                	ld	s1,352(sp)
    80001040:	6976                	ld	s2,344(sp)
    80001042:	69d6                	ld	s3,336(sp)
    80001044:	6a36                	ld	s4,328(sp)
    80001046:	6a96                	ld	s5,320(sp)
    80001048:	7b72                	ld	s6,312(sp)
    8000104a:	7bd2                	ld	s7,304(sp)
    8000104c:	7c32                	ld	s8,296(sp)
    8000104e:	7c92                	ld	s9,288(sp)
    80001050:	6d72                	ld	s10,280(sp)
    80001052:	6dd2                	ld	s11,272(sp)
    80001054:	611d                	addi	sp,sp,416
    80001056:	8082                	ret

0000000080001058 <memcpy>:
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    80001058:	00a5e6b3          	or	a3,a1,a0
    8000105c:	8ed1                	or	a3,a3,a2
    8000105e:	0076f713          	andi	a4,a3,7
    80001062:	00c506b3          	add	a3,a0,a2
    80001066:	cf11                	beqz	a4,80001082 <memcpy+0x2a>
    while (d < (char*)(dest + len))
    80001068:	c61d                	beqz	a2,80001096 <memcpy+0x3e>
    8000106a:	862a                	mv	a2,a0
      *d++ = *s++;
    8000106c:	0005c703          	lbu	a4,0(a1)
    80001070:	0585                	addi	a1,a1,1
    80001072:	00160793          	addi	a5,a2,1
    80001076:	00e60023          	sb	a4,0(a2)
    8000107a:	863e                	mv	a2,a5
    8000107c:	fed7e8e3          	bltu	a5,a3,8000106c <memcpy+0x14>
    80001080:	a819                	j	80001096 <memcpy+0x3e>
    while (d < (uintptr_t*)(dest + len))
    80001082:	ca11                	beqz	a2,80001096 <memcpy+0x3e>
    80001084:	862a                	mv	a2,a0
      *d++ = *s++;
    80001086:	6198                	ld	a4,0(a1)
    80001088:	05a1                	addi	a1,a1,8
    8000108a:	00860793          	addi	a5,a2,8
    8000108e:	e218                	sd	a4,0(a2)
    80001090:	863e                	mv	a2,a5
    while (d < (uintptr_t*)(dest + len))
    80001092:	fed7eae3          	bltu	a5,a3,80001086 <memcpy+0x2e>
  return dest;
    80001096:	8082                	ret

0000000080001098 <memset>:
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    80001098:	00a666b3          	or	a3,a2,a0
    8000109c:	8a9d                	andi	a3,a3,7
    8000109e:	ce81                	beqz	a3,800010b6 <memset+0x1e>
    while (d < (char*)(dest + len))
    800010a0:	ce1d                	beqz	a2,800010de <memset+0x46>
    800010a2:	962a                	add	a2,a2,a0
    800010a4:	86aa                	mv	a3,a0
      *d++ = byte;
    800010a6:	00168713          	addi	a4,a3,1
    800010aa:	00b68023          	sb	a1,0(a3)
    800010ae:	86ba                	mv	a3,a4
    800010b0:	fec76be3          	bltu	a4,a2,800010a6 <memset+0xe>
    800010b4:	a02d                	j	800010de <memset+0x46>
    while (d < (uintptr_t*)(dest + len))
    800010b6:	c605                	beqz	a2,800010de <memset+0x46>
    800010b8:	15e2                	slli	a1,a1,0x38
    800010ba:	101016b7          	lui	a3,0x10101
    800010be:	0692                	slli	a3,a3,0x4
    800010c0:	10068693          	addi	a3,a3,256 # 10101100 <putchar.buflen+0x101010c0>
    800010c4:	02d5b5b3          	mulhu	a1,a1,a3
    800010c8:	02059693          	slli	a3,a1,0x20
    800010cc:	8dd5                	or	a1,a1,a3
    800010ce:	962a                	add	a2,a2,a0
    800010d0:	86aa                	mv	a3,a0
      *d++ = word;
    800010d2:	00868713          	addi	a4,a3,8
    800010d6:	e28c                	sd	a1,0(a3)
    800010d8:	86ba                	mv	a3,a4
    while (d < (uintptr_t*)(dest + len))
    800010da:	fec76ce3          	bltu	a4,a2,800010d2 <memset+0x3a>
  return dest;
    800010de:	8082                	ret

00000000800010e0 <strnlen>:
{
    800010e0:	862a                	mv	a2,a0
  while (n-- && *p)
    800010e2:	c999                	beqz	a1,800010f8 <strnlen+0x18>
    800010e4:	00b506b3          	add	a3,a0,a1
    800010e8:	862a                	mv	a2,a0
    800010ea:	00064703          	lbu	a4,0(a2)
    800010ee:	c709                	beqz	a4,800010f8 <strnlen+0x18>
    800010f0:	15fd                	addi	a1,a1,-1
    p++;
    800010f2:	0605                	addi	a2,a2,1
  while (n-- && *p)
    800010f4:	f9fd                	bnez	a1,800010ea <strnlen+0xa>
    800010f6:	8636                	mv	a2,a3
  return p - s;
    800010f8:	40a60533          	sub	a0,a2,a0
    800010fc:	8082                	ret

00000000800010fe <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    800010fe:	00054603          	lbu	a2,0(a0)
    c2 = *s2++;
    80001102:	0005c683          	lbu	a3,0(a1)
  } while (c1 != 0 && c1 == c2);
    80001106:	c609                	beqz	a2,80001110 <strcmp+0x12>
    80001108:	0505                	addi	a0,a0,1
    8000110a:	0585                	addi	a1,a1,1
    8000110c:	fed609e3          	beq	a2,a3,800010fe <strcmp>

  return c1 - c2;
    80001110:	40d60533          	sub	a0,a2,a3
    80001114:	8082                	ret

0000000080001116 <strcpy>:
}

char* strcpy(char* dest, const char* src)
{
    80001116:	862a                	mv	a2,a0
  char* d = dest;
  while ((*d++ = *src++))
    80001118:	0005c683          	lbu	a3,0(a1)
    8000111c:	0585                	addi	a1,a1,1
    8000111e:	00160713          	addi	a4,a2,1
    80001122:	00d60023          	sb	a3,0(a2)
    80001126:	863a                	mv	a2,a4
    80001128:	fae5                	bnez	a3,80001118 <strcpy+0x2>
    ;
  return dest;
    8000112a:	8082                	ret

000000008000112c <atol>:
}

long atol(const char* str)
{
    8000112c:	02000613          	li	a2,32
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    80001130:	00054583          	lbu	a1,0(a0)
    80001134:	00c59763          	bne	a1,a2,80001142 <atol+0x16>
    str++;
    80001138:	0505                	addi	a0,a0,1
  while (*str == ' ')
    8000113a:	00054583          	lbu	a1,0(a0)
    8000113e:	fec58de3          	beq	a1,a2,80001138 <atol+0xc>
    80001142:	02b00613          	li	a2,43
    80001146:	00c58663          	beq	a1,a2,80001152 <atol+0x26>
    8000114a:	02d00613          	li	a2,45
    8000114e:	02c59c63          	bne	a1,a2,80001186 <atol+0x5a>

  if (*str == '-' || *str == '+') {
    sign = *str == '-';
    80001152:	fd358593          	addi	a1,a1,-45
    80001156:	00b03633          	snez	a2,a1
    str++;
    8000115a:	0505                	addi	a0,a0,1
  }

  while (*str) {
    8000115c:	00054683          	lbu	a3,0(a0)
    80001160:	c69d                	beqz	a3,8000118e <atol+0x62>
    80001162:	4581                	li	a1,0
    80001164:	0505                	addi	a0,a0,1
    res *= 10;
    80001166:	00159713          	slli	a4,a1,0x1
    8000116a:	058e                	slli	a1,a1,0x3
    8000116c:	95ba                	add	a1,a1,a4
    res += *str++ - '0';
    8000116e:	95b6                	add	a1,a1,a3
  while (*str) {
    80001170:	00054683          	lbu	a3,0(a0)
    res += *str++ - '0';
    80001174:	fd058593          	addi	a1,a1,-48
  while (*str) {
    80001178:	0505                	addi	a0,a0,1
    8000117a:	f6f5                	bnez	a3,80001166 <atol+0x3a>
  }

  return sign ? -res : res;
    8000117c:	e219                	bnez	a2,80001182 <atol+0x56>
    8000117e:	40b005b3          	neg	a1,a1
    80001182:	852e                	mv	a0,a1
    80001184:	8082                	ret
    80001186:	4605                	li	a2,1
  while (*str) {
    80001188:	00054683          	lbu	a3,0(a0)
    8000118c:	faf9                	bnez	a3,80001162 <atol+0x36>
    8000118e:	4581                	li	a1,0
  return sign ? -res : res;
    80001190:	d67d                	beqz	a2,8000117e <atol+0x52>
    80001192:	bfc5                	j	80001182 <atol+0x56>

0000000080001194 <_close>:
// Provided by linker script
extern char _end;            // end of bss
static char *heap_end;       // current heap pointer

int _close(int fd) {
    (void)fd; return -1;     // no files
    80001194:	557d                	li	a0,-1
    80001196:	8082                	ret

0000000080001198 <_fstat>:
}

int _fstat(int fd, struct stat *st) {
    (void)fd; if (st) { st->st_mode = S_IFCHR; } return 0; // pretend char device
    80001198:	c199                	beqz	a1,8000119e <_fstat+0x6>
    8000119a:	6509                	lui	a0,0x2
    8000119c:	c1c8                	sw	a0,4(a1)
    8000119e:	4501                	li	a0,0
    800011a0:	8082                	ret

00000000800011a2 <_isatty>:
}

int _isatty(int fd) {
    (void)fd; return 1;      // yes, treat as tty
    800011a2:	4505                	li	a0,1
    800011a4:	8082                	ret

00000000800011a6 <_lseek>:
}

off_t _lseek(int fd, off_t offset, int whence) {
    (void)fd; (void)offset; (void)whence; return 0; // not supported
    800011a6:	4501                	li	a0,0
    800011a8:	8082                	ret

00000000800011aa <_open>:
}

int _open(const char *path, int flags, int mode) {
    (void)path; (void)flags; (void)mode; return -1; // fail
    800011aa:	557d                	li	a0,-1
    800011ac:	8082                	ret

00000000800011ae <_read>:
}

int _read(int fd, void *buf, size_t cnt) {
    (void)fd; (void)buf; (void)cnt; return 0; // EOF
    800011ae:	4501                	li	a0,0
    800011b0:	8082                	ret

00000000800011b2 <_sbrk>:
}

// Simple bump allocator. NOT thread-safe. No heap limit enforcement besides arbitrary max.
void* _sbrk(ptrdiff_t incr) {
    if (heap_end == 0) heap_end = &_end;
    800011b2:	00001617          	auipc	a2,0x1
    800011b6:	e3663583          	ld	a1,-458(a2) # 80001fe8 <heap_end>
    800011ba:	e599                	bnez	a1,800011c8 <_sbrk+0x16>
    800011bc:	0013f597          	auipc	a1,0x13f
    800011c0:	e4458593          	addi	a1,a1,-444 # 80140000 <_end>
    800011c4:	e2b63b23          	sd	a1,-458(a2)
    char *prev = heap_end;
    800011c8:	e3663583          	ld	a1,-458(a2)
    heap_end += incr;
    800011cc:	952e                	add	a0,a0,a1
    800011ce:	e2a63b23          	sd	a0,-458(a2)
    return prev; // no out-of-memory check
    800011d2:	852e                	mv	a0,a1
    800011d4:	8082                	ret

00000000800011d6 <_write>:
}

int _write(int fd, const void *buf, size_t cnt) {
    800011d6:	7179                	addi	sp,sp,-48
    800011d8:	f406                	sd	ra,40(sp)
    800011da:	f022                	sd	s0,32(sp)
    800011dc:	ec26                	sd	s1,24(sp)
    800011de:	e84a                	sd	s2,16(sp)
    800011e0:	8932                	mv	s2,a2
    // Reuse existing proxy write (putchar based) if available.
    // We declare printstr here weakly to avoid circular deps.
    extern void printstr(const char*) __attribute__((weak));
    if (printstr) {
    800011e2:	0013f517          	auipc	a0,0x13f
    800011e6:	e2653503          	ld	a0,-474(a0) # 80140008 <_end+0x8>
    800011ea:	c50d                	beqz	a0,80001214 <_write+0x3e>
    800011ec:	02090463          	beqz	s2,80001214 <_write+0x3e>
    800011f0:	84ae                	mv	s1,a1
        // crude: assume buf is text without NUL, allocate temp with NUL termination
        const char *c = (const char*)buf;
        for (size_t i=0;i<cnt;i++) {
    800011f2:	01258433          	add	s0,a1,s2
            char tmp[2] = { c[i], 0 };
    800011f6:	0004c503          	lbu	a0,0(s1)
    800011fa:	00a10723          	sb	a0,14(sp)
    800011fe:	000107a3          	sb	zero,15(sp)
            printstr(tmp);
    80001202:	00e10513          	addi	a0,sp,14
    80001206:	fffff097          	auipc	ra,0xfffff
    8000120a:	5c6080e7          	jalr	1478(ra) # 800007cc <printstr>
        for (size_t i=0;i<cnt;i++) {
    8000120e:	0485                	addi	s1,s1,1
    80001210:	fe8493e3          	bne	s1,s0,800011f6 <_write+0x20>
        }
    }
    return (int)cnt;
    80001214:	0009051b          	sext.w	a0,s2
    80001218:	70a2                	ld	ra,40(sp)
    8000121a:	7402                	ld	s0,32(sp)
    8000121c:	64e2                	ld	s1,24(sp)
    8000121e:	6942                	ld	s2,16(sp)
    80001220:	6145                	addi	sp,sp,48
    80001222:	8082                	ret

0000000080001224 <__errno>:
}

// Optional errno (newlib may look for it)
int *__errno(void) {
    static int e; return &e;
    80001224:	00001517          	auipc	a0,0x1
    80001228:	dcc50513          	addi	a0,a0,-564 # 80001ff0 <__errno.e>
    8000122c:	8082                	ret
