
build/matmul-AB/test.elf:     file format elf64-littleriscv


Disassembly of section .text.init:

0000000080000000 <_start>:
#endif

  .section ".text.init"
  .globl _start
_start:
  li  x1, 0
    80000000:	4081                	li	ra,0
  li  x2, 0
    80000002:	4101                	li	sp,0
  li  x3, 0
    80000004:	4181                	li	gp,0
  li  x4, 0
    80000006:	4201                	li	tp,0
  li  x5, 0
    80000008:	4281                	li	t0,0
  li  x6, 0
    8000000a:	4301                	li	t1,0
  li  x7, 0
    8000000c:	4381                	li	t2,0
  li  x8, 0
    8000000e:	4401                	li	s0,0
  li  x9, 0
    80000010:	4481                	li	s1,0
  li  x10,0
    80000012:	4501                	li	a0,0
  li  x11,0
    80000014:	4581                	li	a1,0
  li  x12,0
    80000016:	4601                	li	a2,0
  li  x13,0
    80000018:	4681                	li	a3,0
  li  x14,0
    8000001a:	4701                	li	a4,0
  li  x15,0
    8000001c:	4781                	li	a5,0
  li  x16,0
    8000001e:	4801                	li	a6,0
  li  x17,0
    80000020:	4881                	li	a7,0
  li  x18,0
    80000022:	4901                	li	s2,0
  li  x19,0
    80000024:	4981                	li	s3,0
  li  x20,0
    80000026:	4a01                	li	s4,0
  li  x21,0
    80000028:	4a81                	li	s5,0
  li  x22,0
    8000002a:	4b01                	li	s6,0
  li  x23,0
    8000002c:	4b81                	li	s7,0
  li  x24,0
    8000002e:	4c01                	li	s8,0
  li  x25,0
    80000030:	4c81                	li	s9,0
  li  x26,0
    80000032:	4d01                	li	s10,0
  li  x27,0
    80000034:	4d81                	li	s11,0
  li  x28,0
    80000036:	4e01                	li	t3,0
  li  x29,0
    80000038:	4e81                	li	t4,0
  li  x30,0
    8000003a:	4f01                	li	t5,0
  li  x31,0
    8000003c:	4f81                	li	t6,0

  # enable FPU and accelerator if present
  li t0, MSTATUS_FS | MSTATUS_XS | MSTATUS_VS
    8000003e:	62f9                	lui	t0,0x1e
    80000040:	6002829b          	addiw	t0,t0,1536 # 1e600 <.Lline_table_start0+0x1ce83>
  csrs mstatus, t0
    80000044:	3002a073          	csrs	mstatus,t0

  # make sure XLEN agrees with compilation choice
  li t0, 1
    80000048:	4285                	li	t0,1
  slli t0, t0, 31
    8000004a:	02fe                	slli	t0,t0,0x1f
#if __riscv_xlen == 64
  bgez t0, 1f
    8000004c:	0002d863          	bgez	t0,8000005c <.Lpcrel_hi0+0xa>
#else
  bltz t0, 1f
#endif
2:
  li a0, 1
    80000050:	4505                	li	a0,1

0000000080000052 <.Lpcrel_hi0>:
  sw a0, tohost, t0
    80000052:	00002297          	auipc	t0,0x2
    80000056:	12a2a723          	sw	a0,302(t0) # 80002180 <_matB_end>
  j 2b
    8000005a:	bfdd                	j	80000050 <_start+0x50>
1:

#ifdef __riscv_flen
  # initialize FPU if we have one
  la t0, 1f
    8000005c:	00000297          	auipc	t0,0x0
    80000060:	09028293          	addi	t0,t0,144 # 800000ec <.Lpcrel_hi0+0x9a>
  csrw mtvec, t0
    80000064:	30529073          	csrw	mtvec,t0

  fssr    x0
    80000068:	00301073          	fscsr	zero
  fmv.s.x f0, x0
    8000006c:	f0000053          	fmv.w.x	ft0,zero
  fmv.s.x f1, x0
    80000070:	f00000d3          	fmv.w.x	ft1,zero
  fmv.s.x f2, x0
    80000074:	f0000153          	fmv.w.x	ft2,zero
  fmv.s.x f3, x0
    80000078:	f00001d3          	fmv.w.x	ft3,zero
  fmv.s.x f4, x0
    8000007c:	f0000253          	fmv.w.x	ft4,zero
  fmv.s.x f5, x0
    80000080:	f00002d3          	fmv.w.x	ft5,zero
  fmv.s.x f6, x0
    80000084:	f0000353          	fmv.w.x	ft6,zero
  fmv.s.x f7, x0
    80000088:	f00003d3          	fmv.w.x	ft7,zero
  fmv.s.x f8, x0
    8000008c:	f0000453          	fmv.w.x	fs0,zero
  fmv.s.x f9, x0
    80000090:	f00004d3          	fmv.w.x	fs1,zero
  fmv.s.x f10,x0
    80000094:	f0000553          	fmv.w.x	fa0,zero
  fmv.s.x f11,x0
    80000098:	f00005d3          	fmv.w.x	fa1,zero
  fmv.s.x f12,x0
    8000009c:	f0000653          	fmv.w.x	fa2,zero
  fmv.s.x f13,x0
    800000a0:	f00006d3          	fmv.w.x	fa3,zero
  fmv.s.x f14,x0
    800000a4:	f0000753          	fmv.w.x	fa4,zero
  fmv.s.x f15,x0
    800000a8:	f00007d3          	fmv.w.x	fa5,zero
  fmv.s.x f16,x0
    800000ac:	f0000853          	fmv.w.x	fa6,zero
  fmv.s.x f17,x0
    800000b0:	f00008d3          	fmv.w.x	fa7,zero
  fmv.s.x f18,x0
    800000b4:	f0000953          	fmv.w.x	fs2,zero
  fmv.s.x f19,x0
    800000b8:	f00009d3          	fmv.w.x	fs3,zero
  fmv.s.x f20,x0
    800000bc:	f0000a53          	fmv.w.x	fs4,zero
  fmv.s.x f21,x0
    800000c0:	f0000ad3          	fmv.w.x	fs5,zero
  fmv.s.x f22,x0
    800000c4:	f0000b53          	fmv.w.x	fs6,zero
  fmv.s.x f23,x0
    800000c8:	f0000bd3          	fmv.w.x	fs7,zero
  fmv.s.x f24,x0
    800000cc:	f0000c53          	fmv.w.x	fs8,zero
  fmv.s.x f25,x0
    800000d0:	f0000cd3          	fmv.w.x	fs9,zero
  fmv.s.x f26,x0
    800000d4:	f0000d53          	fmv.w.x	fs10,zero
  fmv.s.x f27,x0
    800000d8:	f0000dd3          	fmv.w.x	fs11,zero
  fmv.s.x f28,x0
    800000dc:	f0000e53          	fmv.w.x	ft8,zero
  fmv.s.x f29,x0
    800000e0:	f0000ed3          	fmv.w.x	ft9,zero
  fmv.s.x f30,x0
    800000e4:	f0000f53          	fmv.w.x	ft10,zero
  fmv.s.x f31,x0
    800000e8:	f0000fd3          	fmv.w.x	ft11,zero
1:
#endif

  # initialize trap vector
  la t0, trap_entry
    800000ec:	00000297          	auipc	t0,0x0
    800000f0:	03c28293          	addi	t0,t0,60 # 80000128 <trap_entry>
  csrw mtvec, t0
    800000f4:	30529073          	csrw	mtvec,t0

00000000800000f8 <.Lpcrel_hi3>:

  # initialize global pointer
.option push
.option norelax
  la gp, __global_pointer$
    800000f8:	00002197          	auipc	gp,0x2
    800000fc:	65018193          	addi	gp,gp,1616 # 80002748 <__global_pointer$>

0000000080000100 <.Lpcrel_hi4>:
.option pop

  la  tp, _end + 63
    80000100:	00140217          	auipc	tp,0x140
    80000104:	f3f20213          	addi	tp,tp,-193 # 8014003f <_end+0x3f>
  and tp, tp, -64
    80000108:	fc027213          	andi	tp,tp,-64

  # get core id
  csrr a0, mhartid
    8000010c:	f1402573          	csrr	a0,mhartid
#ifndef CORENUMS
  # for now, assume only 1 core
  li a1, 1
    80000110:	4585                	li	a1,1
1:bgeu a0, a1, 1b
    80000112:	00b57063          	bgeu	a0,a1,80000112 <.Lpcrel_hi4+0x12>
#endif

  # give each core 128KB of stack + TLS
#define STKSHIFT 17
  add sp, a0, 1
    80000116:	00150113          	addi	sp,a0,1
  sll sp, sp, STKSHIFT
    8000011a:	0146                	slli	sp,sp,0x11
  add sp, sp, tp
    8000011c:	9112                	add	sp,sp,tp
  sll a2, a0, STKSHIFT
    8000011e:	01151613          	slli	a2,a0,0x11
  add tp, tp, a2
    80000122:	9232                	add	tp,tp,a2

  j _init
    80000124:	47e0006f          	j	800005a2 <_init>

0000000080000128 <trap_entry>:

  .align 2
trap_entry:
  addi sp, sp, -272
    80000128:	716d                	addi	sp,sp,-272

  # goto trap handler if not exit ecall
  csrr t5, mcause
    8000012a:	34202f73          	csrr	t5,mcause
  li t6, CAUSE_MACHINE_ECALL
    8000012e:	4fad                	li	t6,11
  bne t5, t6, 2f
    80000130:	03ff1b63          	bne	t5,t6,80000166 <.Lpcrel_hi6+0x20>

  # skip flush signature cache lines if on spike
  csrr t2, marchid
    80000134:	f12023f3          	csrr	t2,marchid
  li t3, 5
    80000138:	4e15                	li	t3,5
  beq t2, t3, 3f
    8000013a:	03c38463          	beq	t2,t3,80000162 <.Lpcrel_hi6+0x1c>

000000008000013e <.Lpcrel_hi5>:

  # flush signature cache lines
  la t0, begin_signature
    8000013e:	00100297          	auipc	t0,0x100
    80000142:	ec228293          	addi	t0,t0,-318 # 80100000 <begin_signature>

0000000080000146 <.Lpcrel_hi6>:
  la t1, end_signature
    80000146:	00100317          	auipc	t1,0x100
    8000014a:	eba30313          	addi	t1,t1,-326 # 80100000 <begin_signature>
  addi t1, t1, 0x40
    8000014e:	04030313          	addi	t1,t1,64
  li t2, 0x2010000
    80000152:	020103b7          	lui	t2,0x2010
4:
  sd t0, 0x200(t2)
    80000156:	2053b023          	sd	t0,512(t2) # 2010200 <.Lline_table_start0+0x200ea83>
  addi t0, t0, 64
    8000015a:	04028293          	addi	t0,t0,64
  blt t0, t1, 4b
    8000015e:	fe62cce3          	blt	t0,t1,80000156 <.Lpcrel_hi6+0x10>

  # exit simulation
3:
  j tohost_exit
    80000162:	3240006f          	j	80000486 <tohost_exit>

2:

  SREG x1, 1*REGBYTES(sp)
    80000166:	e406                	sd	ra,8(sp)
  SREG x2, 2*REGBYTES(sp)
    80000168:	e80a                	sd	sp,16(sp)
  SREG x3, 3*REGBYTES(sp)
    8000016a:	ec0e                	sd	gp,24(sp)
  SREG x4, 4*REGBYTES(sp)
    8000016c:	f012                	sd	tp,32(sp)
  SREG x5, 5*REGBYTES(sp)
    8000016e:	f416                	sd	t0,40(sp)
  SREG x6, 6*REGBYTES(sp)
    80000170:	f81a                	sd	t1,48(sp)
  SREG x7, 7*REGBYTES(sp)
    80000172:	fc1e                	sd	t2,56(sp)
  SREG x8, 8*REGBYTES(sp)
    80000174:	e0a2                	sd	s0,64(sp)
  SREG x9, 9*REGBYTES(sp)
    80000176:	e4a6                	sd	s1,72(sp)
  SREG x10, 10*REGBYTES(sp)
    80000178:	e8aa                	sd	a0,80(sp)
  SREG x11, 11*REGBYTES(sp)
    8000017a:	ecae                	sd	a1,88(sp)
  SREG x12, 12*REGBYTES(sp)
    8000017c:	f0b2                	sd	a2,96(sp)
  SREG x13, 13*REGBYTES(sp)
    8000017e:	f4b6                	sd	a3,104(sp)
  SREG x14, 14*REGBYTES(sp)
    80000180:	f8ba                	sd	a4,112(sp)
  SREG x15, 15*REGBYTES(sp)
    80000182:	fcbe                	sd	a5,120(sp)
  SREG x16, 16*REGBYTES(sp)
    80000184:	e142                	sd	a6,128(sp)
  SREG x17, 17*REGBYTES(sp)
    80000186:	e546                	sd	a7,136(sp)
  SREG x18, 18*REGBYTES(sp)
    80000188:	e94a                	sd	s2,144(sp)
  SREG x19, 19*REGBYTES(sp)
    8000018a:	ed4e                	sd	s3,152(sp)
  SREG x20, 20*REGBYTES(sp)
    8000018c:	f152                	sd	s4,160(sp)
  SREG x21, 21*REGBYTES(sp)
    8000018e:	f556                	sd	s5,168(sp)
  SREG x22, 22*REGBYTES(sp)
    80000190:	f95a                	sd	s6,176(sp)
  SREG x23, 23*REGBYTES(sp)
    80000192:	fd5e                	sd	s7,184(sp)
  SREG x24, 24*REGBYTES(sp)
    80000194:	e1e2                	sd	s8,192(sp)
  SREG x25, 25*REGBYTES(sp)
    80000196:	e5e6                	sd	s9,200(sp)
  SREG x26, 26*REGBYTES(sp)
    80000198:	e9ea                	sd	s10,208(sp)
  SREG x27, 27*REGBYTES(sp)
    8000019a:	edee                	sd	s11,216(sp)
  SREG x28, 28*REGBYTES(sp)
    8000019c:	f1f2                	sd	t3,224(sp)
  SREG x29, 29*REGBYTES(sp)
    8000019e:	f5f6                	sd	t4,232(sp)
  SREG x30, 30*REGBYTES(sp)
    800001a0:	f9fa                	sd	t5,240(sp)
  SREG x31, 31*REGBYTES(sp)
    800001a2:	fdfe                	sd	t6,248(sp)

  csrr a0, mcause
    800001a4:	34202573          	csrr	a0,mcause
  csrr a1, mepc
    800001a8:	341025f3          	csrr	a1,mepc
  mv a2, sp
    800001ac:	860a                	mv	a2,sp
  jal handle_trap
    800001ae:	2ea000ef          	jal	80000498 <handle_trap>
  csrw mepc, a0
    800001b2:	34151073          	csrw	mepc,a0

  # Remain in M-mode after eret
  li t0, MSTATUS_MPP
    800001b6:	6289                	lui	t0,0x2
    800001b8:	8002829b          	addiw	t0,t0,-2048 # 1800 <.Lline_table_start0+0x83>
  csrs mstatus, t0
    800001bc:	3002a073          	csrs	mstatus,t0

  LREG x1, 1*REGBYTES(sp)
    800001c0:	60a2                	ld	ra,8(sp)
  LREG x2, 2*REGBYTES(sp)
    800001c2:	6142                	ld	sp,16(sp)
  LREG x3, 3*REGBYTES(sp)
    800001c4:	61e2                	ld	gp,24(sp)
  LREG x4, 4*REGBYTES(sp)
    800001c6:	7202                	ld	tp,32(sp)
  LREG x5, 5*REGBYTES(sp)
    800001c8:	72a2                	ld	t0,40(sp)
  LREG x6, 6*REGBYTES(sp)
    800001ca:	7342                	ld	t1,48(sp)
  LREG x7, 7*REGBYTES(sp)
    800001cc:	73e2                	ld	t2,56(sp)
  LREG x8, 8*REGBYTES(sp)
    800001ce:	6406                	ld	s0,64(sp)
  LREG x9, 9*REGBYTES(sp)
    800001d0:	64a6                	ld	s1,72(sp)
  LREG x10, 10*REGBYTES(sp)
    800001d2:	6546                	ld	a0,80(sp)
  LREG x11, 11*REGBYTES(sp)
    800001d4:	65e6                	ld	a1,88(sp)
  LREG x12, 12*REGBYTES(sp)
    800001d6:	7606                	ld	a2,96(sp)
  LREG x13, 13*REGBYTES(sp)
    800001d8:	76a6                	ld	a3,104(sp)
  LREG x14, 14*REGBYTES(sp)
    800001da:	7746                	ld	a4,112(sp)
  LREG x15, 15*REGBYTES(sp)
    800001dc:	77e6                	ld	a5,120(sp)
  LREG x16, 16*REGBYTES(sp)
    800001de:	680a                	ld	a6,128(sp)
  LREG x17, 17*REGBYTES(sp)
    800001e0:	68aa                	ld	a7,136(sp)
  LREG x18, 18*REGBYTES(sp)
    800001e2:	694a                	ld	s2,144(sp)
  LREG x19, 19*REGBYTES(sp)
    800001e4:	69ea                	ld	s3,152(sp)
  LREG x20, 20*REGBYTES(sp)
    800001e6:	7a0a                	ld	s4,160(sp)
  LREG x21, 21*REGBYTES(sp)
    800001e8:	7aaa                	ld	s5,168(sp)
  LREG x22, 22*REGBYTES(sp)
    800001ea:	7b4a                	ld	s6,176(sp)
  LREG x23, 23*REGBYTES(sp)
    800001ec:	7bea                	ld	s7,184(sp)
  LREG x24, 24*REGBYTES(sp)
    800001ee:	6c0e                	ld	s8,192(sp)
  LREG x25, 25*REGBYTES(sp)
    800001f0:	6cae                	ld	s9,200(sp)
  LREG x26, 26*REGBYTES(sp)
    800001f2:	6d4e                	ld	s10,208(sp)
  LREG x27, 27*REGBYTES(sp)
    800001f4:	6dee                	ld	s11,216(sp)
  LREG x28, 28*REGBYTES(sp)
    800001f6:	7e0e                	ld	t3,224(sp)
  LREG x29, 29*REGBYTES(sp)
    800001f8:	7eae                	ld	t4,232(sp)
  LREG x30, 30*REGBYTES(sp)
    800001fa:	7f4e                	ld	t5,240(sp)
  LREG x31, 31*REGBYTES(sp)
    800001fc:	7fee                	ld	t6,248(sp)

  addi sp, sp, 272
    800001fe:	6151                	addi	sp,sp,272
  mret
    80000200:	30200073          	mret

Disassembly of section .text:

0000000080000204 <main>:
                          int m, int n,int k) {
  return matmul_batch1(A, B, C, m, n, k);
}

int main()
{
    80000204:	7139                	addi	sp,sp,-64
    // 将 data.h 中的 A_i8/B_i8 拷贝到固定段 .matA/.matB；C 清零
    memcpy(A, A_i8, M * K * sizeof(int8_t));
    80000206:	fc06                	sd	ra,56(sp)
    80000208:	f822                	sd	s0,48(sp)
    8000020a:	f426                	sd	s1,40(sp)
    8000020c:	f04a                	sd	s2,32(sp)
    8000020e:	ec4e                	sd	s3,24(sp)
    80000210:	e852                	sd	s4,16(sp)
    80000212:	e456                	sd	s5,8(sp)
    80000214:	e05a                	sd	s6,0(sp)

0000000080000216 <.LBB0_26>:
    80000216:	00002917          	auipc	s2,0x2
    8000021a:	d6a90913          	addi	s2,s2,-662 # 80001f80 <A>

000000008000021e <.LBB0_27>:
    8000021e:	00001597          	auipc	a1,0x1
    80000222:	d2258593          	addi	a1,a1,-734 # 80000f40 <A_i8>
    80000226:	10000613          	li	a2,256
    8000022a:	854a                	mv	a0,s2
    8000022c:	00001097          	auipc	ra,0x1
    80000230:	b1e080e7          	jalr	-1250(ra) # 80000d4a <memcpy>

0000000080000234 <.LBB0_28>:
    memcpy(B, B_i8, K * N * sizeof(int8_t));
    80000234:	00002997          	auipc	s3,0x2
    80000238:	e4c98993          	addi	s3,s3,-436 # 80002080 <B>

000000008000023c <.LBB0_29>:
    8000023c:	00001597          	auipc	a1,0x1
    80000240:	e0458593          	addi	a1,a1,-508 # 80001040 <B_i8>
    80000244:	10000613          	li	a2,256
    80000248:	854e                	mv	a0,s3
    8000024a:	00001097          	auipc	ra,0x1
    8000024e:	b00080e7          	jalr	-1280(ra) # 80000d4a <memcpy>

0000000080000252 <.LBB0_30>:
    memcpy(C, C_i32, M * N * sizeof(int32_t));
    80000252:	00002a17          	auipc	s4,0x2
    80000256:	faea0a13          	addi	s4,s4,-82 # 80002200 <C>

000000008000025a <.LBB0_31>:
    8000025a:	00001597          	auipc	a1,0x1
    8000025e:	ee658593          	addi	a1,a1,-282 # 80001140 <C_i32>
    80000262:	40000613          	li	a2,1024
    80000266:	8552                	mv	a0,s4
    80000268:	00001097          	auipc	ra,0x1
    8000026c:	ae2080e7          	jalr	-1310(ra) # 80000d4a <memcpy>
    80000270:	4881                	li	a7,0
    80000272:	45c1                	li	a1,16
    80000274:	04000293          	li	t0,64
    80000278:	4701                	li	a4,0
    tile_m = msettilem(m - i);
    8000027a:	4115853b          	subw	a0,a1,a7
    8000027e:	04055877          	.insn	4, 0x04055877
    80000282:	0048951b          	slliw	a0,a7,0x4
    80000286:	00251613          	slli	a2,a0,0x2
    8000028a:	01460333          	add	t1,a2,s4
    8000028e:	012506b3          	add	a3,a0,s2
      tile_n = msettilen(n - j);
    80000292:	40e5853b          	subw	a0,a1,a4
    80000296:	040543f7          	.insn	4, 0x040543f7
      mint32_t acc1 = mlc_m(C + i * n + j, ldc_bytes);
    8000029a:	0007061b          	sext.w	a2,a4
    8000029e:	060a                	slli	a2,a2,0x2
    800002a0:	00c30e33          	add	t3,t1,a2
    800002a4:	005e2077          	.insn	4, 0x005e2077
    800002a8:	4481                	li	s1,0
    800002aa:	0047161b          	slliw	a2,a4,0x4
    800002ae:	964e                	add	a2,a2,s3
        tile_k = msettilek(k - kk);
    800002b0:	409587bb          	subw	a5,a1,s1
    800002b4:	0407e7f7          	.insn	4, 0x0407e7f7
        mint8_t tr0 = mla_m(A + i * k + kk, lda_bytes);
    800002b8:	0004851b          	sext.w	a0,s1
    800002bc:	00a68433          	add	s0,a3,a0
    800002c0:	04b40077          	.insn	4, 0x04b40077
        mint8_t tr1 = mlbt_m(B + j * n + kk, ldb_bytes); //按行取
    800002c4:	9532                	add	a0,a0,a2
    800002c6:	08b508f7          	.insn	4, 0x08b508f7
      for (int kk = 0; kk < k; kk += tile_k) {
    800002ca:	9cbd                	addw	s1,s1,a5
        acc1 = mqma_b_mm(acc1, tr0, tr1);
    800002cc:	28180877          	.insn	4, 0x28180877
    800002d0:	feb4c0e3          	blt	s1,a1,800002b0 <.LBB0_31+0x56>
    for (int j = 0; j < n; j += tile_n) {
    800002d4:	0077073b          	addw	a4,a4,t2
      msct_m(acc1, C + i * n + j, ldc_bytes);
    800002d8:	025e2877          	.insn	4, 0x025e2877
    for (int j = 0; j < n; j += tile_n) {
    800002dc:	fab74be3          	blt	a4,a1,80000292 <.LBB0_31+0x38>
  for (int i = 0; i < m; i += tile_m) {
    800002e0:	010888bb          	addw	a7,a7,a6
    800002e4:	f8b8cae3          	blt	a7,a1,80000278 <.LBB0_31+0x1e>
    800002e8:	4581                	li	a1,0
    800002ea:	3e700513          	li	a0,999
  for (unsigned i = 0; i < cycles; ++i) {
    800002ee:	0005861b          	sext.w	a2,a1
    800002f2:	2585                	addiw	a1,a1,1
    asm volatile("nop");
    800002f4:	0001                	nop
  for (unsigned i = 0; i < cycles; ++i) {
    800002f6:	fea66ce3          	bltu	a2,a0,800002ee <.LBB0_31+0x94>
    800002fa:	4501                	li	a0,0
    800002fc:	45c1                	li	a1,16
    800002fe:	04000613          	li	a2,64
    80000302:	4681                	li	a3,0
    tile_m = msettilem(m - i);
    80000304:	40a5873b          	subw	a4,a1,a0
    80000308:	04075777          	.insn	4, 0x04075777
    8000030c:	0045179b          	slliw	a5,a0,0x4
    80000310:	078a                	slli	a5,a5,0x2
    80000312:	97d2                	add	a5,a5,s4
      tile_n = msettilen(n - j);
    80000314:	40d584bb          	subw	s1,a1,a3
    80000318:	0404c4f7          	.insn	4, 0x0404c4f7
      mint32_t acc1 = mlc_m(C + i * n + j, ldc_bytes);
    8000031c:	0006841b          	sext.w	s0,a3
    80000320:	040a                	slli	s0,s0,0x2
    80000322:	943e                	add	s0,s0,a5
    80000324:	00c42077          	.insn	4, 0x00c42077
    for (int j = 0; j < n; j += tile_n) {
    80000328:	9ea5                	addw	a3,a3,s1
      msc_m(acc1, C + i * n + j, ldc_bytes);
    8000032a:	02c42077          	.insn	4, 0x02c42077
    8000032e:	feb6c3e3          	blt	a3,a1,80000314 <.LBB0_31+0xba>
    for (int i = 0; i < m; i += tile_m) {
    80000332:	9d39                	addw	a0,a0,a4
    80000334:	fcb547e3          	blt	a0,a1,80000302 <.LBB0_31+0xa8>

0000000080000338 <.LBB0_32>:

    // 计算
    matmul(A, B, C, DIM_M, DIM_N, DIM_K);
    printf("C result:\n");
    80000338:	00001517          	auipc	a0,0x1
    8000033c:	6a450513          	addi	a0,a0,1700 # 800019dc <D_i32+0x49c>
    80000340:	00000097          	auipc	ra,0x0
    80000344:	472080e7          	jalr	1138(ra) # 800007b2 <printf>
    80000348:	4981                	li	s3,0

000000008000034a <.LBB0_33>:
    8000034a:	00001497          	auipc	s1,0x1
    8000034e:	66148493          	addi	s1,s1,1633 # 800019ab <D_i32+0x46b>
    80000352:	04000b13          	li	s6,64

0000000080000356 <.LBB0_34>:
    80000356:	00001917          	auipc	s2,0x1
    8000035a:	63d90913          	addi	s2,s2,1597 # 80001993 <D_i32+0x453>
    8000035e:	4ac1                	li	s5,16
    80000360:	4401                	li	s0,0
    for (int i = 0; i < DIM_M; i++) {
        for (int j = 0; j < DIM_N; j++) {
            printf("%d ", C[i * DIM_N + j]);
    80000362:	008a0533          	add	a0,s4,s0
    80000366:	410c                	lw	a1,0(a0)
    80000368:	8526                	mv	a0,s1
    8000036a:	00000097          	auipc	ra,0x0
    8000036e:	448080e7          	jalr	1096(ra) # 800007b2 <printf>
        for (int j = 0; j < DIM_N; j++) {
    80000372:	0411                	addi	s0,s0,4
    80000374:	ff6417e3          	bne	s0,s6,80000362 <.LBB0_34+0xc>
        }
        printf("\n");
    80000378:	854a                	mv	a0,s2
    8000037a:	00000097          	auipc	ra,0x0
    8000037e:	438080e7          	jalr	1080(ra) # 800007b2 <printf>
    for (int i = 0; i < DIM_M; i++) {
    80000382:	0985                	addi	s3,s3,1
    80000384:	040a0a13          	addi	s4,s4,64
    80000388:	fd599ce3          	bne	s3,s5,80000360 <.LBB0_34+0xa>
    8000038c:	4401                	li	s0,0
    8000038e:	4981                	li	s3,0

0000000080000390 <.LBB0_35>:
    80000390:	00001a17          	auipc	s4,0x1
    80000394:	1b0a0a13          	addi	s4,s4,432 # 80001540 <D_i32>

0000000080000398 <.LBB0_36>:
    80000398:	00002497          	auipc	s1,0x2
    8000039c:	e6848493          	addi	s1,s1,-408 # 80002200 <C>
    800003a0:	10000a93          	li	s5,256
    800003a4:	4b3d                	li	s6,15

00000000800003a6 <.LBB0_37>:
    800003a6:	00001917          	auipc	s2,0x1
    800003aa:	61090913          	addi	s2,s2,1552 # 800019b6 <D_i32+0x476>
    800003ae:	a039                	j	800003bc <.LBB0_37+0x16>
                int r = idx / DIM_N;
                int c = idx % DIM_N;
                printf("mismatch (%d,%d): got %d expected %d\n",
                       r, c, C[idx], D_i32[idx]);
            }
            mismatch++;
    800003b0:	2985                	addiw	s3,s3,1
    for (int idx = 0; idx < DIM_M * DIM_N; ++idx) {
    800003b2:	0405                	addi	s0,s0,1
    800003b4:	0a11                	addi	s4,s4,4
    800003b6:	0491                	addi	s1,s1,4
    800003b8:	03540d63          	beq	s0,s5,800003f2 <.LBB0_37+0x4c>
        if (C[idx] != D_i32[idx]) {
    800003bc:	408c                	lw	a1,0(s1)
    800003be:	000a2503          	lw	a0,0(s4)
    800003c2:	fea588e3          	beq	a1,a0,800003b2 <.LBB0_37+0xc>
            if (mismatch < 16) { // 只打印前16个差异
    800003c6:	0009861b          	sext.w	a2,s3
    800003ca:	fecb43e3          	blt	s6,a2,800003b0 <.LBB0_37+0xa>
    800003ce:	1582                	slli	a1,a1,0x20
    800003d0:	0205d693          	srli	a3,a1,0x20
    800003d4:	1502                	slli	a0,a0,0x20
    800003d6:	9101                	srli	a0,a0,0x20
                int r = idx / DIM_N;
    800003d8:	0044559b          	srliw	a1,s0,0x4
                printf("mismatch (%d,%d): got %d expected %d\n",
    800003dc:	00f47613          	andi	a2,s0,15
    800003e0:	2681                	sext.w	a3,a3
    800003e2:	0005071b          	sext.w	a4,a0
    800003e6:	854a                	mv	a0,s2
    800003e8:	00000097          	auipc	ra,0x0
    800003ec:	3ca080e7          	jalr	970(ra) # 800007b2 <printf>
    800003f0:	b7c1                	j	800003b0 <.LBB0_37+0xa>
        }
    }
    if (mismatch == 0) {
    800003f2:	0009859b          	sext.w	a1,s3
    800003f6:	c991                	beqz	a1,8000040a <.LBB0_39>

00000000800003f8 <.LBB0_38>:
        printf("Compare with D: PASS\n");
    } else {
        printf("Compare with D: FAIL, total mismatches=%d\n", mismatch);
    800003f8:	00001517          	auipc	a0,0x1
    800003fc:	56950513          	addi	a0,a0,1385 # 80001961 <D_i32+0x421>
    80000400:	00000097          	auipc	ra,0x0
    80000404:	3b2080e7          	jalr	946(ra) # 800007b2 <printf>
    80000408:	a809                	j	8000041a <.LBB0_39+0x10>

000000008000040a <.LBB0_39>:
        printf("Compare with D: PASS\n");
    8000040a:	00001517          	auipc	a0,0x1
    8000040e:	58b50513          	addi	a0,a0,1419 # 80001995 <D_i32+0x455>
    80000412:	00000097          	auipc	ra,0x0
    80000416:	3a0080e7          	jalr	928(ra) # 800007b2 <printf>
    }

    return 0;
    8000041a:	4501                	li	a0,0
    8000041c:	6b02                	ld	s6,0(sp)
    8000041e:	6aa2                	ld	s5,8(sp)
    80000420:	6a42                	ld	s4,16(sp)
    80000422:	69e2                	ld	s3,24(sp)
    80000424:	7902                	ld	s2,32(sp)
    80000426:	74a2                	ld	s1,40(sp)
    80000428:	7442                	ld	s0,48(sp)
    8000042a:	70e2                	ld	ra,56(sp)
    8000042c:	6121                	addi	sp,sp,64
    8000042e:	8082                	ret

0000000080000430 <setStats>:
    uintptr_t csr = read_csr(name); \
    if (!enable) { csr -= counters[i]; counter_names[i] = #name; } \
    counters[i++] = csr; \
  } while (0)

  READ_CTR(mcycle);
    80000430:	b0002673          	csrr	a2,mcycle
    80000434:	00153593          	seqz	a1,a0

0000000080000438 <.LBB0_5>:
    80000438:	00002697          	auipc	a3,0x2
    8000043c:	1c868693          	addi	a3,a3,456 # 80002600 <counters.0>
    80000440:	ed01                	bnez	a0,80000458 <.LBB0_7+0xa>
    80000442:	6288                	ld	a0,0(a3)
    80000444:	8e09                	sub	a2,a2,a0

0000000080000446 <.LBB0_6>:
    80000446:	00002517          	auipc	a0,0x2
    8000044a:	1da50513          	addi	a0,a0,474 # 80002620 <counter_names>

000000008000044e <.LBB0_7>:
    8000044e:	00001717          	auipc	a4,0x1
    80000452:	53e70713          	addi	a4,a4,1342 # 8000198c <D_i32+0x44c>
    80000456:	e118                	sd	a4,0(a0)
    80000458:	e290                	sd	a2,0(a3)
  READ_CTR(minstret);
    8000045a:	b0202573          	csrr	a0,minstret

000000008000045e <.LBB0_8>:
    8000045e:	00002617          	auipc	a2,0x2
    80000462:	1aa60613          	addi	a2,a2,426 # 80002608 <counters.1>
    80000466:	e199                	bnez	a1,8000046c <.LBB0_8+0xe>
    80000468:	e208                	sd	a0,0(a2)

#undef READ_CTR
}
    8000046a:	8082                	ret
  READ_CTR(minstret);
    8000046c:	620c                	ld	a1,0(a2)
    8000046e:	8d0d                	sub	a0,a0,a1

0000000080000470 <.LBB0_9>:
    80000470:	00001597          	auipc	a1,0x1
    80000474:	4e858593          	addi	a1,a1,1256 # 80001958 <D_i32+0x418>

0000000080000478 <.LBB0_10>:
    80000478:	00002697          	auipc	a3,0x2
    8000047c:	1a868693          	addi	a3,a3,424 # 80002620 <counter_names>
    80000480:	e68c                	sd	a1,8(a3)
    80000482:	e208                	sd	a0,0(a2)
}
    80000484:	8082                	ret

0000000080000486 <tohost_exit>:
  } while(pos < end_signature);
}

void __attribute__((noreturn)) tohost_exit(uintptr_t code)
{
  tohost = (code << 1) | 1;
    80000486:	0506                	slli	a0,a0,0x1
    80000488:	00156513          	ori	a0,a0,1

000000008000048c <.LBB1_2>:
    8000048c:	00002597          	auipc	a1,0x2
    80000490:	cf458593          	addi	a1,a1,-780 # 80002180 <_matB_end>
    80000494:	e188                	sd	a0,0(a1)
  while (1);
    80000496:	a001                	j	80000496 <.LBB1_2+0xa>

0000000080000498 <handle_trap>:
  tohost = (code << 1) | 1;
    80000498:	00002517          	auipc	a0,0x2
    8000049c:	ce850513          	addi	a0,a0,-792 # 80002180 <_matB_end>
    800004a0:	6585                	lui	a1,0x1
    800004a2:	a735859b          	addiw	a1,a1,-1421 # a73 <.Lline_table_start0+0x5e0>
    800004a6:	e10c                	sd	a1,0(a0)
  while (1);
    800004a8:	a001                	j	800004a8 <handle_trap+0x10>

00000000800004aa <exit>:
}

void exit(int code)
{
  //flush_signature_cachelines();
  asm("ecall");
    800004aa:	00000073          	ecall
  tohost = (code << 1) | 1;
    800004ae:	0506                	slli	a0,a0,0x1
    800004b0:	00156513          	ori	a0,a0,1

00000000800004b4 <.LBB3_2>:
    800004b4:	00002597          	auipc	a1,0x2
    800004b8:	ccc58593          	addi	a1,a1,-820 # 80002180 <_matB_end>
    800004bc:	e188                	sd	a0,0(a1)
  while (1);
    800004be:	a001                	j	800004be <.LBB3_2+0xa>

00000000800004c0 <abort>:
  asm("ecall");
    800004c0:	00000073          	ecall

00000000800004c4 <.LBB4_2>:
  tohost = (code << 1) | 1;
    800004c4:	00002517          	auipc	a0,0x2
    800004c8:	cbc50513          	addi	a0,a0,-836 # 80002180 <_matB_end>
    800004cc:	10d00593          	li	a1,269
    800004d0:	e10c                	sd	a1,0(a0)
  while (1);
    800004d2:	a001                	j	800004d2 <.LBB4_2+0xe>

00000000800004d4 <printstr>:
{
  exit(128 + SIGABRT);
}

void printstr(const char* s)
{
    800004d4:	7119                	addi	sp,sp,-128
    800004d6:	fc86                	sd	ra,120(sp)
    800004d8:	f8a2                	sd	s0,112(sp)
    800004da:	0100                	addi	s0,sp,128
    800004dc:	fc017113          	andi	sp,sp,-64
    800004e0:	4581                	li	a1,0
}

size_t strlen(const char *s)
{
  const char *p = s;
  while (*p)
    800004e2:	00b50633          	add	a2,a0,a1
    800004e6:	00064603          	lbu	a2,0(a2)
    800004ea:	0585                	addi	a1,a1,1
    800004ec:	fa7d                	bnez	a2,800004e2 <printstr+0xe>
  volatile uint64_t magic_mem[8] __attribute__((aligned(64)));
    800004ee:	15fd                	addi	a1,a1,-1
    800004f0:	04000613          	li	a2,64
  magic_mem[0] = which;
    800004f4:	e032                	sd	a2,0(sp)
    800004f6:	4605                	li	a2,1
  magic_mem[1] = arg0;
    800004f8:	e432                	sd	a2,8(sp)
  magic_mem[2] = arg1;
    800004fa:	e82a                	sd	a0,16(sp)
  magic_mem[3] = arg2;
    800004fc:	ec2e                	sd	a1,24(sp)
  __sync_synchronize();
    800004fe:	0330000f          	fence	rw,rw

0000000080000502 <.LBB5_5>:
  tohost = (uintptr_t)magic_mem;
    80000502:	00002517          	auipc	a0,0x2
    80000506:	c7e50513          	addi	a0,a0,-898 # 80002180 <_matB_end>
    8000050a:	858a                	mv	a1,sp
    8000050c:	e10c                	sd	a1,0(a0)

000000008000050e <.LBB5_6>:
    8000050e:	00002517          	auipc	a0,0x2
    80000512:	cb250513          	addi	a0,a0,-846 # 800021c0 <fromhost>
  while (fromhost == 0)
    80000516:	610c                	ld	a1,0(a0)
    80000518:	ddfd                	beqz	a1,80000516 <.LBB5_6+0x8>
  fromhost = 0;
    8000051a:	00053023          	sd	zero,0(a0)
  __sync_synchronize();
    8000051e:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80000522:	6502                	ld	a0,0(sp)
}
    80000524:	f8040113          	addi	sp,s0,-128
    80000528:	7446                	ld	s0,112(sp)
    8000052a:	70e6                	ld	ra,120(sp)
    8000052c:	6109                	addi	sp,sp,128
    8000052e:	8082                	ret

0000000080000530 <strlen>:
{
    80000530:	4581                	li	a1,0
  while (*p)
    80000532:	00b50633          	add	a2,a0,a1
    80000536:	00064603          	lbu	a2,0(a2)
    8000053a:	0585                	addi	a1,a1,1
    8000053c:	fa7d                	bnez	a2,80000532 <strlen+0x2>
    p++;
  return p - s;
    8000053e:	fff58513          	addi	a0,a1,-1
    80000542:	8082                	ret

0000000080000544 <thread_entry>:
  while (cid != 0);
    80000544:	c111                	beqz	a0,80000548 <thread_entry+0x4>
    80000546:	a001                	j	80000546 <thread_entry+0x2>
}
    80000548:	8082                	ret
{
    8000054a:	7119                	addi	sp,sp,-128
    8000054c:	fc86                	sd	ra,120(sp)
    8000054e:	f8a2                	sd	s0,112(sp)
    80000550:	0100                	addi	s0,sp,128
    80000552:	fc017113          	andi	sp,sp,-64
    80000556:	04000513          	li	a0,64
  magic_mem[0] = which;
    8000055a:	e02a                	sd	a0,0(sp)
    8000055c:	4505                	li	a0,1
  magic_mem[1] = arg0;
    8000055e:	e42a                	sd	a0,8(sp)

0000000080000560 <.LBB8_3>:
  magic_mem[2] = arg1;
    80000560:	00001517          	auipc	a0,0x1
    80000564:	3e050513          	addi	a0,a0,992 # 80001940 <D_i32+0x400>
    80000568:	e82a                	sd	a0,16(sp)
    8000056a:	455d                	li	a0,23
  magic_mem[3] = arg2;
    8000056c:	ec2a                	sd	a0,24(sp)
  __sync_synchronize();
    8000056e:	0330000f          	fence	rw,rw

0000000080000572 <.LBB8_4>:
  tohost = (uintptr_t)magic_mem;
    80000572:	00002517          	auipc	a0,0x2
    80000576:	c0e50513          	addi	a0,a0,-1010 # 80002180 <_matB_end>
    8000057a:	858a                	mv	a1,sp
    8000057c:	e10c                	sd	a1,0(a0)

000000008000057e <.LBB8_5>:
    8000057e:	00002517          	auipc	a0,0x2
    80000582:	c4250513          	addi	a0,a0,-958 # 800021c0 <fromhost>
  while (fromhost == 0)
    80000586:	610c                	ld	a1,0(a0)
    80000588:	ddfd                	beqz	a1,80000586 <.LBB8_5+0x8>
  fromhost = 0;
    8000058a:	00053023          	sd	zero,0(a0)
  __sync_synchronize();
    8000058e:	0330000f          	fence	rw,rw
  return magic_mem[0];
    80000592:	6502                	ld	a0,0(sp)
  return -1;
    80000594:	557d                	li	a0,-1
    80000596:	f8040113          	addi	sp,s0,-128
    8000059a:	7446                	ld	s0,112(sp)
    8000059c:	70e6                	ld	ra,120(sp)
    8000059e:	6109                	addi	sp,sp,128
    800005a0:	8082                	ret

00000000800005a2 <_init>:
{
    800005a2:	1141                	addi	sp,sp,-16
  asm volatile("mv %0, tp" : "=r"(thread_pointer));
    800005a4:	e406                	sd	ra,8(sp)
    800005a6:	8292                	mv	t0,tp

00000000800005a8 <.LBB9_14>:
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    800005a8:	00002797          	auipc	a5,0x2
    800005ac:	08878793          	addi	a5,a5,136 # 80002630 <_tdata_begin>

00000000800005b0 <.LBB9_15>:
    800005b0:	00002817          	auipc	a6,0x2
    800005b4:	08080813          	addi	a6,a6,128 # 80002630 <_tdata_begin>
    800005b8:	40f80733          	sub	a4,a6,a5
    800005bc:	005766b3          	or	a3,a4,t0
    800005c0:	8edd                	or	a3,a3,a5
    800005c2:	0076f893          	andi	a7,a3,7
    800005c6:	00e28333          	add	t1,t0,a4
    800005ca:	02088063          	beqz	a7,800005ea <.LBB9_15+0x3a>
    while (d < (char*)(dest + len))
    800005ce:	0262fd63          	bgeu	t0,t1,80000608 <.LBB9_17>
    800005d2:	8696                	mv	a3,t0
      *d++ = *s++;
    800005d4:	00078603          	lb	a2,0(a5)
    800005d8:	0785                	addi	a5,a5,1
    800005da:	00168893          	addi	a7,a3,1
    while (d < (char*)(dest + len))
    800005de:	177d                	addi	a4,a4,-1
      *d++ = *s++;
    800005e0:	00c68023          	sb	a2,0(a3)
    800005e4:	86c6                	mv	a3,a7
    800005e6:	f77d                	bnez	a4,800005d4 <.LBB9_15+0x24>
    800005e8:	a005                	j	80000608 <.LBB9_17>
    while (d < (uintptr_t*)(dest + len))
    800005ea:	0062ff63          	bgeu	t0,t1,80000608 <.LBB9_17>

00000000800005ee <.LBB9_16>:
    800005ee:	00002797          	auipc	a5,0x2
    800005f2:	04278793          	addi	a5,a5,66 # 80002630 <_tdata_begin>
    800005f6:	8716                	mv	a4,t0
      *d++ = *s++;
    800005f8:	6390                	ld	a2,0(a5)
    800005fa:	07a1                	addi	a5,a5,8
    800005fc:	00870693          	addi	a3,a4,8
    80000600:	e310                	sd	a2,0(a4)
    80000602:	8736                	mv	a4,a3
    while (d < (uintptr_t*)(dest + len))
    80000604:	fe66eae3          	bltu	a3,t1,800005f8 <.LBB9_16+0xa>

0000000080000608 <.LBB9_17>:
  memset(thread_pointer + tdata_size, 0, tbss_size);
    80000608:	00002897          	auipc	a7,0x2
    8000060c:	02888893          	addi	a7,a7,40 # 80002630 <_tdata_begin>
    80000610:	411806b3          	sub	a3,a6,a7
    80000614:	00d28733          	add	a4,t0,a3

0000000080000618 <.LBB9_18>:
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    80000618:	00002797          	auipc	a5,0x2
    8000061c:	06c78793          	addi	a5,a5,108 # 80002684 <_tbss_end>
    80000620:	410786b3          	sub	a3,a5,a6
    80000624:	00d76633          	or	a2,a4,a3
    80000628:	00767813          	andi	a6,a2,7
    8000062c:	41178633          	sub	a2,a5,a7
    80000630:	9616                	add	a2,a2,t0
    80000632:	00080c63          	beqz	a6,8000064a <.LBB9_18+0x32>
    while (d < (char*)(dest + len))
    80000636:	02c77363          	bgeu	a4,a2,8000065c <.LBB9_18+0x44>
      *d++ = byte;
    8000063a:	00170613          	addi	a2,a4,1
    while (d < (char*)(dest + len))
    8000063e:	16fd                	addi	a3,a3,-1
      *d++ = byte;
    80000640:	00070023          	sb	zero,0(a4)
    80000644:	8732                	mv	a4,a2
    80000646:	faf5                	bnez	a3,8000063a <.LBB9_18+0x22>
    80000648:	a811                	j	8000065c <.LBB9_18+0x44>
    while (d < (uintptr_t*)(dest + len))
    8000064a:	00c77963          	bgeu	a4,a2,8000065c <.LBB9_18+0x44>
      *d++ = word;
    8000064e:	00870693          	addi	a3,a4,8
    80000652:	00073023          	sd	zero,0(a4)
    80000656:	8736                	mv	a4,a3
    while (d < (uintptr_t*)(dest + len))
    80000658:	fec6ebe3          	bltu	a3,a2,8000064e <.LBB9_18+0x36>
  thread_entry(cid, nc);
    8000065c:	00000097          	auipc	ra,0x0
    80000660:	ee8080e7          	jalr	-280(ra) # 80000544 <thread_entry>
  int ret = main(0, 0);
    80000664:	4501                	li	a0,0
    80000666:	4581                	li	a1,0
    80000668:	00000097          	auipc	ra,0x0
    8000066c:	b9c080e7          	jalr	-1124(ra) # 80000204 <main>
  asm("ecall");
    80000670:	00000073          	ecall
  tohost = (code << 1) | 1;
    80000674:	0506                	slli	a0,a0,0x1
    80000676:	00156513          	ori	a0,a0,1

000000008000067a <.LBB9_19>:
    8000067a:	00002597          	auipc	a1,0x2
    8000067e:	b0658593          	addi	a1,a1,-1274 # 80002180 <_matB_end>
    80000682:	e188                	sd	a0,0(a1)
  while (1);
    80000684:	a001                	j	80000684 <.LBB9_19+0xa>

0000000080000686 <putchar>:
{
    80000686:	7119                	addi	sp,sp,-128
  buf[buflen++] = ch;
    80000688:	fc86                	sd	ra,120(sp)
    8000068a:	f8a2                	sd	s0,112(sp)
    8000068c:	0100                	addi	s0,sp,128
    8000068e:	fc017113          	andi	sp,sp,-64
    80000692:	000005b7          	lui	a1,0x0
    80000696:	00458633          	add	a2,a1,tp
    8000069a:	04062683          	lw	a3,64(a2)
    8000069e:	0016859b          	addiw	a1,a3,1
    800006a2:	fc058713          	addi	a4,a1,-64 # ffffffffffffffc0 <_end+0xffffffff7febffc0>
    800006a6:	00173713          	seqz	a4,a4
    800006aa:	04b62023          	sw	a1,64(a2)
  if (ch == '\n' || buflen == sizeof(buf))
    800006ae:	ff650613          	addi	a2,a0,-10
    800006b2:	00163613          	seqz	a2,a2
    800006b6:	8f51                	or	a4,a4,a2
  buf[buflen++] = ch;
    800006b8:	00000637          	lui	a2,0x0
    800006bc:	00460633          	add	a2,a2,tp
    800006c0:	00060613          	mv	a2,a2
    800006c4:	96b2                	add	a3,a3,a2
    800006c6:	00a68023          	sb	a0,0(a3)
  if (ch == '\n' || buflen == sizeof(buf))
    800006ca:	c329                	beqz	a4,8000070c <.LBB10_6+0x22>
    800006cc:	04000513          	li	a0,64
  magic_mem[0] = which;
    800006d0:	e02a                	sd	a0,0(sp)
    800006d2:	4505                	li	a0,1
  magic_mem[1] = arg0;
    800006d4:	e42a                	sd	a0,8(sp)
  magic_mem[2] = arg1;
    800006d6:	e832                	sd	a2,16(sp)
  magic_mem[3] = arg2;
    800006d8:	ec2e                	sd	a1,24(sp)
  __sync_synchronize();
    800006da:	0330000f          	fence	rw,rw

00000000800006de <.LBB10_5>:
  tohost = (uintptr_t)magic_mem;
    800006de:	00002517          	auipc	a0,0x2
    800006e2:	aa250513          	addi	a0,a0,-1374 # 80002180 <_matB_end>
    800006e6:	858a                	mv	a1,sp
    800006e8:	e10c                	sd	a1,0(a0)

00000000800006ea <.LBB10_6>:
    800006ea:	00002517          	auipc	a0,0x2
    800006ee:	ad650513          	addi	a0,a0,-1322 # 800021c0 <fromhost>
  while (fromhost == 0)
    800006f2:	610c                	ld	a1,0(a0)
    800006f4:	ddfd                	beqz	a1,800006f2 <.LBB10_6+0x8>
  fromhost = 0;
    800006f6:	00053023          	sd	zero,0(a0)
  __sync_synchronize();
    800006fa:	0330000f          	fence	rw,rw
  return magic_mem[0];
    800006fe:	6502                	ld	a0,0(sp)
    buflen = 0;
    80000700:	00000537          	lui	a0,0x0
    80000704:	00450533          	add	a0,a0,tp
    80000708:	04052023          	sw	zero,64(a0) # 40 <putchar.buflen>
  return 0;
    8000070c:	4501                	li	a0,0
    8000070e:	f8040113          	addi	sp,s0,-128
    80000712:	7446                	ld	s0,112(sp)
    80000714:	70e6                	ld	ra,120(sp)
    80000716:	6109                	addi	sp,sp,128
    80000718:	8082                	ret

000000008000071a <printhex>:
{
    8000071a:	7131                	addi	sp,sp,-192
    8000071c:	fd06                	sd	ra,184(sp)
    8000071e:	f922                	sd	s0,176(sp)
    80000720:	0180                	addi	s0,sp,192
    80000722:	fc017113          	andi	sp,sp,-64
    80000726:	45bd                	li	a1,15
    80000728:	4829                	li	a6,10
    8000072a:	02f10693          	addi	a3,sp,47
    8000072e:	577d                	li	a4,-1
    80000730:	a811                	j	80000744 <printhex+0x2a>
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80000732:	9e3d                	addw	a2,a2,a5
    80000734:	00b687b3          	add	a5,a3,a1
    80000738:	00c78023          	sb	a2,0(a5)
  for (i = 0; i < 16; i++)
    8000073c:	15fd                	addi	a1,a1,-1
    x >>= 4;
    8000073e:	8111                	srli	a0,a0,0x4
  for (i = 0; i < 16; i++)
    80000740:	00e58b63          	beq	a1,a4,80000756 <printhex+0x3c>
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    80000744:	00f57793          	andi	a5,a0,15
    80000748:	03000613          	li	a2,48
    8000074c:	ff07e3e3          	bltu	a5,a6,80000732 <printhex+0x18>
    80000750:	05700613          	li	a2,87
    80000754:	bff9                	j	80000732 <printhex+0x18>
    80000756:	4501                	li	a0,0
  str[16] = 0;
    80000758:	02010fa3          	sb	zero,63(sp)
    8000075c:	02f10593          	addi	a1,sp,47
  while (*p)
    80000760:	00a58633          	add	a2,a1,a0
    80000764:	00064603          	lbu	a2,0(a2) # 0 <putchar.buf>
    80000768:	0505                	addi	a0,a0,1
    8000076a:	fa7d                	bnez	a2,80000760 <printhex+0x46>
  volatile uint64_t magic_mem[8] __attribute__((aligned(64)));
    8000076c:	157d                	addi	a0,a0,-1
    8000076e:	04000593          	li	a1,64
  magic_mem[0] = which;
    80000772:	e0ae                	sd	a1,64(sp)
    80000774:	4585                	li	a1,1
  magic_mem[1] = arg0;
    80000776:	e4ae                	sd	a1,72(sp)
    80000778:	02f10593          	addi	a1,sp,47
  magic_mem[2] = arg1;
    8000077c:	e8ae                	sd	a1,80(sp)
  magic_mem[3] = arg2;
    8000077e:	ecaa                	sd	a0,88(sp)
  __sync_synchronize();
    80000780:	0330000f          	fence	rw,rw

0000000080000784 <.LBB11_9>:
  tohost = (uintptr_t)magic_mem;
    80000784:	00002517          	auipc	a0,0x2
    80000788:	9fc50513          	addi	a0,a0,-1540 # 80002180 <_matB_end>
    8000078c:	008c                	addi	a1,sp,64
    8000078e:	e10c                	sd	a1,0(a0)

0000000080000790 <.LBB11_10>:
    80000790:	00002517          	auipc	a0,0x2
    80000794:	a3050513          	addi	a0,a0,-1488 # 800021c0 <fromhost>
  while (fromhost == 0)
    80000798:	610c                	ld	a1,0(a0)
    8000079a:	ddfd                	beqz	a1,80000798 <.LBB11_10+0x8>
  fromhost = 0;
    8000079c:	00053023          	sd	zero,0(a0)
  __sync_synchronize();
    800007a0:	0330000f          	fence	rw,rw
  return magic_mem[0];
    800007a4:	6506                	ld	a0,64(sp)
}
    800007a6:	f4040113          	addi	sp,s0,-192
    800007aa:	744a                	ld	s0,176(sp)
    800007ac:	70ea                	ld	ra,184(sp)
    800007ae:	6129                	addi	sp,sp,192
    800007b0:	8082                	ret

00000000800007b2 <printf>:
{
    800007b2:	715d                	addi	sp,sp,-80
    800007b4:	e406                	sd	ra,8(sp)
    800007b6:	82aa                	mv	t0,a0
    800007b8:	e4c6                	sd	a7,72(sp)
    800007ba:	e0c2                	sd	a6,64(sp)
    800007bc:	fc3e                	sd	a5,56(sp)
    800007be:	f83a                	sd	a4,48(sp)
    800007c0:	f436                	sd	a3,40(sp)
    800007c2:	f032                	sd	a2,32(sp)
    800007c4:	ec2e                	sd	a1,24(sp)
    800007c6:	0828                	addi	a0,sp,24
  va_start(ap, fmt);
    800007c8:	e02a                	sd	a0,0(sp)

00000000800007ca <.LBB12_1>:
  vprintfmt((void*)putchar, 0, fmt, ap);
    800007ca:	00000517          	auipc	a0,0x0
    800007ce:	ebc50513          	addi	a0,a0,-324 # 80000686 <putchar>
    800007d2:	0834                	addi	a3,sp,24
    800007d4:	4581                	li	a1,0
    800007d6:	8616                	mv	a2,t0
    800007d8:	00000097          	auipc	ra,0x0
    800007dc:	010080e7          	jalr	16(ra) # 800007e8 <vprintfmt>
  return 0; // incorrect return value, but who cares, anyway?
    800007e0:	4501                	li	a0,0
    800007e2:	60a2                	ld	ra,8(sp)
    800007e4:	6161                	addi	sp,sp,80
    800007e6:	8082                	ret

00000000800007e8 <vprintfmt>:
{
    800007e8:	7149                	addi	sp,sp,-368
    800007ea:	f686                	sd	ra,360(sp)
    800007ec:	f2a2                	sd	s0,352(sp)
    800007ee:	eea6                	sd	s1,344(sp)
    800007f0:	eaca                	sd	s2,336(sp)
    800007f2:	e6ce                	sd	s3,328(sp)
    800007f4:	e2d2                	sd	s4,320(sp)
    800007f6:	fe56                	sd	s5,312(sp)
    800007f8:	fa5a                	sd	s6,304(sp)
    800007fa:	f65e                	sd	s7,296(sp)
    800007fc:	f262                	sd	s8,288(sp)
    800007fe:	ee66                	sd	s9,280(sp)
    80000800:	ea6a                	sd	s10,272(sp)
    80000802:	e66e                	sd	s11,264(sp)
    80000804:	84b6                	mv	s1,a3
    80000806:	89b2                	mv	s3,a2
    80000808:	8aae                	mv	s5,a1
    8000080a:	8d2a                	mv	s10,a0
    8000080c:	02500c13          	li	s8,37

0000000080000810 <.LBB13_63>:
    80000810:	00001517          	auipc	a0,0x1
    80000814:	1d850513          	addi	a0,a0,472 # 800019e8 <.LJTI13_0>
    80000818:	e02a                	sd	a0,0(sp)
    8000081a:	4da9                	li	s11,10
    8000081c:	4b25                	li	s6,9
    8000081e:	4b85                	li	s7,1
    while ((ch = *(unsigned char *) fmt) != '%') {
    80000820:	00198413          	addi	s0,s3,1
    80000824:	fff44503          	lbu	a0,-1(s0)
    80000828:	01850b63          	beq	a0,s8,8000083e <.LBB13_63+0x2e>
    8000082c:	24050463          	beqz	a0,80000a74 <.LBB13_43+0xb8>
      putch(ch, putdat);
    80000830:	85d6                	mv	a1,s5
    80000832:	9d02                	jalr	s10
    while ((ch = *(unsigned char *) fmt) != '%') {
    80000834:	0405                	addi	s0,s0,1
    80000836:	fff44503          	lbu	a0,-1(s0)
    8000083a:	ff8519e3          	bne	a0,s8,8000082c <.LBB13_63+0x1c>
    8000083e:	8a26                	mv	s4,s1
    80000840:	4501                	li	a0,0
    80000842:	02000813          	li	a6,32
    80000846:	5cfd                	li	s9,-1
    80000848:	597d                	li	s2,-1
    8000084a:	89a2                	mv	s3,s0
    8000084c:	05500793          	li	a5,85
    80000850:	6482                	ld	s1,0(sp)

0000000080000852 <.LBB13_5>:
    switch (ch = *(unsigned char *) fmt++) {
    80000852:	0009c583          	lbu	a1,0(s3)
    80000856:	fdd58693          	addi	a3,a1,-35
    8000085a:	06d7e363          	bltu	a5,a3,800008c0 <.LBB13_16>
    8000085e:	864e                	mv	a2,s3
    80000860:	068e                	slli	a3,a3,0x3
    80000862:	96a6                	add	a3,a3,s1
    80000864:	6294                	ld	a3,0(a3)
    80000866:	0985                	addi	s3,s3,1
    80000868:	8682                	jr	a3

000000008000086a <.LBB13_7>:
    8000086a:	4c81                	li	s9,0
    8000086c:	0ff5f693          	zext.b	a3,a1
        ch = *fmt;
    80000870:	00164583          	lbu	a1,1(a2)
    80000874:	0605                	addi	a2,a2,1
        precision = precision * 10 + ch - '0';
    80000876:	03bc873b          	mulw	a4,s9,s11
    8000087a:	9eb9                	addw	a3,a3,a4
        if (ch < '0' || ch > '9')
    8000087c:	fd058713          	addi	a4,a1,-48
    80000880:	0ff77713          	zext.b	a4,a4
        precision = precision * 10 + ch - '0';
    80000884:	fd068c9b          	addiw	s9,a3,-48
        if (ch < '0' || ch > '9')
    80000888:	feeb72e3          	bgeu	s6,a4,8000086c <.LBB13_7+0x2>
    8000088c:	89b2                	mv	s3,a2
      if (width < 0)
    8000088e:	0009059b          	sext.w	a1,s2
    80000892:	fc05d0e3          	bgez	a1,80000852 <.LBB13_5>
    80000896:	8966                	mv	s2,s9
    80000898:	5cfd                	li	s9,-1
    8000089a:	bf65                	j	80000852 <.LBB13_5>

000000008000089c <.LBB13_11>:
    8000089c:	882e                	mv	a6,a1
    8000089e:	bf55                	j	80000852 <.LBB13_5>

00000000800008a0 <.LBB13_12>:
      precision = va_arg(ap, int);
    800008a0:	000a6c83          	lwu	s9,0(s4)
    800008a4:	0a21                	addi	s4,s4,8
      if (width < 0)
    800008a6:	0009059b          	sext.w	a1,s2
    800008aa:	fa05d4e3          	bgez	a1,80000852 <.LBB13_5>
    800008ae:	b7e5                	j	80000896 <.LBB13_7+0x2c>

00000000800008b0 <.LBB13_13>:
      if (width < 0)
    800008b0:	0009059b          	sext.w	a1,s2
    800008b4:	f8b04fe3          	bgtz	a1,80000852 <.LBB13_5>
    800008b8:	4901                	li	s2,0
    800008ba:	bf61                	j	80000852 <.LBB13_5>

00000000800008bc <.LBB13_15>:
      lflag++;
    800008bc:	2505                	addiw	a0,a0,1
    800008be:	bf51                	j	80000852 <.LBB13_5>

00000000800008c0 <.LBB13_16>:
      putch('%', putdat);
    800008c0:	02500513          	li	a0,37
    800008c4:	85d6                	mv	a1,s5
    800008c6:	9d02                	jalr	s10
    800008c8:	89a2                	mv	s3,s0
    800008ca:	84d2                	mv	s1,s4
    800008cc:	bf91                	j	80000820 <.LBB13_63+0x10>

00000000800008ce <.LBB13_17>:
      putch(ch, putdat);
    800008ce:	02500513          	li	a0,37
    800008d2:	85d6                	mv	a1,s5
    800008d4:	9d02                	jalr	s10
    800008d6:	84d2                	mv	s1,s4
    800008d8:	b7a1                	j	80000820 <.LBB13_63+0x10>

00000000800008da <.LBB13_18>:
      putch(va_arg(ap, int), putdat);
    800008da:	000a2503          	lw	a0,0(s4)
    800008de:	008a0493          	addi	s1,s4,8
    800008e2:	85d6                	mv	a1,s5
    800008e4:	9d02                	jalr	s10
    800008e6:	bf2d                	j	80000820 <.LBB13_63+0x10>

00000000800008e8 <.LBB13_19>:
  if (lflag >= 2)
    800008e8:	2501                	sext.w	a0,a0
    800008ea:	4589                	li	a1,2
    800008ec:	00b55463          	bge	a0,a1,800008f4 <.LBB13_19+0xc>
  else if (lflag)
    800008f0:	16050b63          	beqz	a0,80000a66 <.LBB13_43+0xaa>
    800008f4:	8cd2                	mv	s9,s4
    800008f6:	000a3483          	ld	s1,0(s4)
    800008fa:	4429                	li	s0,10
      if ((long long) num < 0) {
    800008fc:	0c04d963          	bgez	s1,800009ce <.LBB13_43+0x12>
        putch('-', putdat);
    80000900:	02d00513          	li	a0,45
    80000904:	85d6                	mv	a1,s5
    80000906:	8a42                	mv	s4,a6
    80000908:	9d02                	jalr	s10
    8000090a:	8852                	mv	a6,s4
        num = -(long long) num;
    8000090c:	409004b3          	neg	s1,s1
    80000910:	a87d                	j	800009ce <.LBB13_43+0x12>

0000000080000912 <.LBB13_23>:
    80000912:	4421                	li	s0,8
    80000914:	a06d                	j	800009be <.LBB13_43+0x2>

0000000080000916 <.LBB13_24>:
      putch('0', putdat);
    80000916:	03000513          	li	a0,48
    8000091a:	85d6                	mv	a1,s5
    8000091c:	8442                	mv	s0,a6
    8000091e:	9d02                	jalr	s10
      putch('x', putdat);
    80000920:	07800513          	li	a0,120
    80000924:	85d6                	mv	a1,s5
    80000926:	9d02                	jalr	s10
    80000928:	8822                	mv	a6,s0
    8000092a:	4505                	li	a0,1

000000008000092c <.LBB13_25>:
    8000092c:	4441                	li	s0,16
    8000092e:	a841                	j	800009be <.LBB13_43+0x2>

0000000080000930 <.LBB13_26>:
    80000930:	84d2                	mv	s1,s4
      if ((p = va_arg(ap, char *)) == NULL)
    80000932:	000a3403          	ld	s0,0(s4)
    80000936:	e409                	bnez	s0,80000940 <.LBB13_64+0x8>

0000000080000938 <.LBB13_64>:
    80000938:	00001417          	auipc	s0,0x1
    8000093c:	07740413          	addi	s0,s0,119 # 800019af <D_i32+0x46f>
      if (width > 0 && padc != '-')
    80000940:	0009051b          	sext.w	a0,s2
    80000944:	00152513          	slti	a0,a0,1
    80000948:	0ff87a13          	zext.b	s4,a6
    8000094c:	fd3a0593          	addi	a1,s4,-45
    80000950:	0015b593          	seqz	a1,a1
    80000954:	8d4d                	or	a0,a0,a1
    80000956:	ed15                	bnez	a0,80000992 <.LBB13_64+0x5a>
        for (width -= strnlen(p, precision); width > 0; width--)
    80000958:	000c859b          	sext.w	a1,s9
    8000095c:	8522                	mv	a0,s0
}

size_t strnlen(const char *s, size_t n)
{
  const char *p = s;
  while (n-- && *p)
    8000095e:	c999                	beqz	a1,80000974 <.LBB13_64+0x3c>
    80000960:	00b40633          	add	a2,s0,a1
    80000964:	8522                	mv	a0,s0
    80000966:	00054683          	lbu	a3,0(a0)
    8000096a:	c689                	beqz	a3,80000974 <.LBB13_64+0x3c>
    8000096c:	15fd                	addi	a1,a1,-1
    p++;
    8000096e:	0505                	addi	a0,a0,1
  while (n-- && *p)
    80000970:	f9fd                	bnez	a1,80000966 <.LBB13_64+0x2e>
    80000972:	8532                	mv	a0,a2
  return p - s;
    80000974:	40a4053b          	subw	a0,s0,a0
        for (width -= strnlen(p, precision); width > 0; width--)
    80000978:	00a9093b          	addw	s2,s2,a0
    8000097c:	01205b63          	blez	s2,80000992 <.LBB13_64+0x5a>
          putch(padc, putdat);
    80000980:	8552                	mv	a0,s4
    80000982:	85d6                	mv	a1,s5
    80000984:	9d02                	jalr	s10
        for (width -= strnlen(p, precision); width > 0; width--)
    80000986:	0009051b          	sext.w	a0,s2
    8000098a:	397d                	addiw	s2,s2,-1
    8000098c:	feabcae3          	blt	s7,a0,80000980 <.LBB13_64+0x48>
    80000990:	4901                	li	s2,0
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80000992:	00044503          	lbu	a0,0(s0)
    80000996:	c54d                	beqz	a0,80000a40 <.LBB13_43+0x84>
    80000998:	0405                	addi	s0,s0,1
    8000099a:	a811                	j	800009ae <.LBB13_64+0x76>
    8000099c:	0ff57513          	zext.b	a0,a0
        putch(ch, putdat);
    800009a0:	85d6                	mv	a1,s5
    800009a2:	9d02                	jalr	s10
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    800009a4:	00044503          	lbu	a0,0(s0)
    800009a8:	397d                	addiw	s2,s2,-1
    800009aa:	0405                	addi	s0,s0,1
    800009ac:	c951                	beqz	a0,80000a40 <.LBB13_43+0x84>
    800009ae:	000c859b          	sext.w	a1,s9
    800009b2:	fe05c5e3          	bltz	a1,8000099c <.LBB13_64+0x64>
    800009b6:	c5c9                	beqz	a1,80000a40 <.LBB13_43+0x84>
    800009b8:	3cfd                	addiw	s9,s9,-1
    800009ba:	b7cd                	j	8000099c <.LBB13_64+0x64>

00000000800009bc <.LBB13_43>:
    800009bc:	4429                	li	s0,10
  if (lflag >= 2)
    800009be:	2501                	sext.w	a0,a0
    800009c0:	4589                	li	a1,2
    800009c2:	00b55363          	bge	a0,a1,800009c8 <.LBB13_43+0xc>
  else if (lflag)
    800009c6:	cd41                	beqz	a0,80000a5e <.LBB13_43+0xa2>
    800009c8:	8cd2                	mv	s9,s4
    800009ca:	000a3483          	ld	s1,0(s4)
    digs[pos++] = num % base;
    800009ce:	0284f533          	remu	a0,s1,s0
    800009d2:	c42a                	sw	a0,8(sp)
    800009d4:	4505                	li	a0,1
    if (num < base)
    800009d6:	0084ed63          	bltu	s1,s0,800009f0 <.LBB13_43+0x34>
    800009da:	4505                	li	a0,1
    800009dc:	006c                	addi	a1,sp,12
    num /= base;
    800009de:	0284d4b3          	divu	s1,s1,s0
    digs[pos++] = num % base;
    800009e2:	0284f633          	remu	a2,s1,s0
    800009e6:	0505                	addi	a0,a0,1
    800009e8:	c190                	sw	a2,0(a1)
    if (num < base)
    800009ea:	0591                	addi	a1,a1,4
    800009ec:	fe84f9e3          	bgeu	s1,s0,800009de <.LBB13_43+0x22>
  while (width-- > pos)
    800009f0:	0009059b          	sext.w	a1,s2
    800009f4:	0005049b          	sext.w	s1,a0
    800009f8:	00b4da63          	bge	s1,a1,80000a0c <.LBB13_43+0x50>
    800009fc:	0ff87413          	zext.b	s0,a6
    80000a00:	397d                	addiw	s2,s2,-1
    putch(padc, putdat);
    80000a02:	8522                	mv	a0,s0
    80000a04:	85d6                	mv	a1,s5
    80000a06:	9d02                	jalr	s10
  while (width-- > pos)
    80000a08:	ff24cce3          	blt	s1,s2,80000a00 <.LBB13_43+0x44>
    80000a0c:	0ca1                	addi	s9,s9,8
  while (pos-- > 0)
    80000a0e:	00148413          	addi	s0,s1,1
    80000a12:	00249513          	slli	a0,s1,0x2
    80000a16:	004c                	addi	a1,sp,4
    80000a18:	00a584b3          	add	s1,a1,a0
    80000a1c:	a801                	j	80000a2c <.LBB13_43+0x70>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80000a1e:	9d2d                	addw	a0,a0,a1
    80000a20:	85d6                	mv	a1,s5
    80000a22:	9d02                	jalr	s10
  while (pos-- > 0)
    80000a24:	147d                	addi	s0,s0,-1
    80000a26:	14f1                	addi	s1,s1,-4
    80000a28:	008bda63          	bge	s7,s0,80000a3c <.LBB13_43+0x80>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80000a2c:	4088                	lw	a0,0(s1)
    80000a2e:	05700593          	li	a1,87
    80000a32:	feab66e3          	bltu	s6,a0,80000a1e <.LBB13_43+0x62>
    80000a36:	03000593          	li	a1,48
    80000a3a:	b7d5                	j	80000a1e <.LBB13_43+0x62>
    80000a3c:	84e6                	mv	s1,s9
    80000a3e:	b3cd                	j	80000820 <.LBB13_63+0x10>
      for (; width > 0; width--)
    80000a40:	0009051b          	sext.w	a0,s2
    80000a44:	04a1                	addi	s1,s1,8
    80000a46:	dca05de3          	blez	a0,80000820 <.LBB13_63+0x10>
        putch(' ', putdat);
    80000a4a:	02000513          	li	a0,32
    80000a4e:	85d6                	mv	a1,s5
    80000a50:	9d02                	jalr	s10
      for (; width > 0; width--)
    80000a52:	0009051b          	sext.w	a0,s2
    80000a56:	397d                	addiw	s2,s2,-1
    80000a58:	feabc9e3          	blt	s7,a0,80000a4a <.LBB13_43+0x8e>
    80000a5c:	b3d1                	j	80000820 <.LBB13_63+0x10>
    80000a5e:	8cd2                	mv	s9,s4
    return va_arg(*ap, unsigned int);
    80000a60:	000a6483          	lwu	s1,0(s4)
    80000a64:	b7ad                	j	800009ce <.LBB13_43+0x12>
    80000a66:	8cd2                	mv	s9,s4
    return va_arg(*ap, int);
    80000a68:	000a2483          	lw	s1,0(s4)
    80000a6c:	4429                	li	s0,10
    80000a6e:	f604d0e3          	bgez	s1,800009ce <.LBB13_43+0x12>
    80000a72:	b579                	j	80000900 <.LBB13_19+0x18>
}
    80000a74:	6db2                	ld	s11,264(sp)
    80000a76:	6d52                	ld	s10,272(sp)
    80000a78:	6cf2                	ld	s9,280(sp)
    80000a7a:	7c12                	ld	s8,288(sp)
    80000a7c:	7bb2                	ld	s7,296(sp)
    80000a7e:	7b52                	ld	s6,304(sp)
    80000a80:	7af2                	ld	s5,312(sp)
    80000a82:	6a16                	ld	s4,320(sp)
    80000a84:	69b6                	ld	s3,328(sp)
    80000a86:	6956                	ld	s2,336(sp)
    80000a88:	64f6                	ld	s1,344(sp)
    80000a8a:	7416                	ld	s0,352(sp)
    80000a8c:	70b6                	ld	ra,360(sp)
    80000a8e:	6175                	addi	sp,sp,368
    80000a90:	8082                	ret

0000000080000a92 <sprintf_putch>:
  **pstr = ch;
    80000a92:	6190                	ld	a2,0(a1)
    80000a94:	00a60023          	sb	a0,0(a2)
  (*pstr)++;
    80000a98:	6188                	ld	a0,0(a1)
    80000a9a:	0505                	addi	a0,a0,1
    80000a9c:	e188                	sd	a0,0(a1)
}
    80000a9e:	8082                	ret

0000000080000aa0 <sprintf>:
{
    80000aa0:	7109                	addi	sp,sp,-384
    80000aa2:	e6a2                	sd	s0,328(sp)
    80000aa4:	e2a6                	sd	s1,320(sp)
    80000aa6:	fe4a                	sd	s2,312(sp)
    80000aa8:	fa4e                	sd	s3,304(sp)
    80000aaa:	f652                	sd	s4,296(sp)
    80000aac:	f256                	sd	s5,288(sp)
    80000aae:	ee5a                	sd	s6,280(sp)
    80000ab0:	ea5e                	sd	s7,272(sp)
    80000ab2:	e662                	sd	s8,264(sp)
    80000ab4:	fec6                	sd	a7,376(sp)
    80000ab6:	fac2                	sd	a6,368(sp)
    80000ab8:	f6be                	sd	a5,360(sp)
    80000aba:	f2ba                	sd	a4,352(sp)
    80000abc:	eeb6                	sd	a3,344(sp)
    80000abe:	eab2                	sd	a2,336(sp)
    80000ac0:	15010e93          	addi	t4,sp,336
  va_start(ap, fmt);
    80000ac4:	e076                	sd	t4,0(sp)
  while (1) {
    80000ac6:	40a002b3          	neg	t0,a0
    80000aca:	00c10813          	addi	a6,sp,12
    80000ace:	00410893          	addi	a7,sp,4
    80000ad2:	02500b13          	li	s6,37
    80000ad6:	05500313          	li	t1,85
    80000ada:	4a29                	li	s4,10
    80000adc:	4c25                	li	s8,9
    80000ade:	4389                	li	t2,2
    80000ae0:	02d00e13          	li	t3,45
    80000ae4:	4985                	li	s3,1
    80000ae6:	03000f13          	li	t5,48
    80000aea:	07800f93          	li	t6,120
    80000aee:	02000913          	li	s2,32
    while ((ch = *(unsigned char *) fmt) != '%') {
    80000af2:	00a286b3          	add	a3,t0,a0
    80000af6:	00158613          	addi	a2,a1,1
    80000afa:	fff64583          	lbu	a1,-1(a2)
    80000afe:	22058663          	beqz	a1,80000d2a <.LBB15_43+0xa2>
    80000b02:	01658b63          	beq	a1,s6,80000b18 <sprintf+0x78>
  **pstr = ch;
    80000b06:	00b50023          	sb	a1,0(a0)
  (*pstr)++;
    80000b0a:	0505                	addi	a0,a0,1
    while ((ch = *(unsigned char *) fmt) != '%') {
    80000b0c:	0685                	addi	a3,a3,1
    80000b0e:	0605                	addi	a2,a2,1
    80000b10:	fff64583          	lbu	a1,-1(a2)
    80000b14:	f5fd                	bnez	a1,80000b02 <sprintf+0x62>
    80000b16:	ac11                	j	80000d2a <.LBB15_43+0xa2>
    80000b18:	4a81                	li	s5,0
    80000b1a:	02000b93          	li	s7,32
    80000b1e:	54fd                	li	s1,-1
    80000b20:	577d                	li	a4,-1
    80000b22:	85b2                	mv	a1,a2

0000000080000b24 <.LBB15_5>:
    80000b24:	86ae                	mv	a3,a1
    switch (ch = *(unsigned char *) fmt++) {
    80000b26:	0005c403          	lbu	s0,0(a1)
    80000b2a:	fdd40593          	addi	a1,s0,-35
    80000b2e:	06b36763          	bltu	t1,a1,80000b9c <.LBB15_16>
    80000b32:	058e                	slli	a1,a1,0x3

0000000080000b34 <.LBB15_60>:
    80000b34:	00001797          	auipc	a5,0x1
    80000b38:	16478793          	addi	a5,a5,356 # 80001c98 <.LJTI15_0>
    80000b3c:	95be                	add	a1,a1,a5
    80000b3e:	619c                	ld	a5,0(a1)
    80000b40:	00168593          	addi	a1,a3,1
    80000b44:	8782                	jr	a5

0000000080000b46 <.LBB15_7>:
    80000b46:	4481                	li	s1,0
    80000b48:	0ff47593          	zext.b	a1,s0
        ch = *fmt;
    80000b4c:	0016c403          	lbu	s0,1(a3)
    80000b50:	0685                	addi	a3,a3,1
        precision = precision * 10 + ch - '0';
    80000b52:	034487bb          	mulw	a5,s1,s4
    80000b56:	9dbd                	addw	a1,a1,a5
        if (ch < '0' || ch > '9')
    80000b58:	fd040793          	addi	a5,s0,-48
    80000b5c:	0ff7f793          	zext.b	a5,a5
        precision = precision * 10 + ch - '0';
    80000b60:	fd05849b          	addiw	s1,a1,-48
        if (ch < '0' || ch > '9')
    80000b64:	fefc72e3          	bgeu	s8,a5,80000b48 <.LBB15_7+0x2>
    80000b68:	85b6                	mv	a1,a3
      if (width < 0)
    80000b6a:	0007069b          	sext.w	a3,a4
    80000b6e:	fa06dbe3          	bgez	a3,80000b24 <.LBB15_5>
    80000b72:	8726                	mv	a4,s1
    80000b74:	54fd                	li	s1,-1
    80000b76:	b77d                	j	80000b24 <.LBB15_5>

0000000080000b78 <.LBB15_11>:
    80000b78:	8ba2                	mv	s7,s0
    80000b7a:	b76d                	j	80000b24 <.LBB15_5>

0000000080000b7c <.LBB15_12>:
      precision = va_arg(ap, int);
    80000b7c:	000ee483          	lwu	s1,0(t4)
    80000b80:	0ea1                	addi	t4,t4,8
      if (width < 0)
    80000b82:	0007069b          	sext.w	a3,a4
    80000b86:	f806dfe3          	bgez	a3,80000b24 <.LBB15_5>
    80000b8a:	b7e5                	j	80000b72 <.LBB15_7+0x2c>

0000000080000b8c <.LBB15_13>:
      if (width < 0)
    80000b8c:	0007069b          	sext.w	a3,a4
    80000b90:	f8d04ae3          	bgtz	a3,80000b24 <.LBB15_5>
    80000b94:	4701                	li	a4,0
    80000b96:	b779                	j	80000b24 <.LBB15_5>

0000000080000b98 <.LBB15_15>:
      lflag++;
    80000b98:	2a85                	addiw	s5,s5,1
    80000b9a:	b769                	j	80000b24 <.LBB15_5>

0000000080000b9c <.LBB15_16>:
  **pstr = ch;
    80000b9c:	01650023          	sb	s6,0(a0)
      break;
    80000ba0:	0505                	addi	a0,a0,1
    80000ba2:	85b2                	mv	a1,a2
    80000ba4:	b7b9                	j	80000af2 <sprintf+0x52>

0000000080000ba6 <.LBB15_17>:
  **pstr = ch;
    80000ba6:	01650023          	sb	s6,0(a0)
      break;
    80000baa:	0505                	addi	a0,a0,1
    80000bac:	b799                	j	80000af2 <sprintf+0x52>

0000000080000bae <.LBB15_18>:
      putch(va_arg(ap, int), putdat);
    80000bae:	000e8603          	lb	a2,0(t4)
    80000bb2:	0ea1                	addi	t4,t4,8
  **pstr = ch;
    80000bb4:	00c50023          	sb	a2,0(a0)
      break;
    80000bb8:	0505                	addi	a0,a0,1
    80000bba:	bf25                	j	80000af2 <sprintf+0x52>

0000000080000bbc <.LBB15_19>:
  if (lflag >= 2)
    80000bbc:	000a861b          	sext.w	a2,s5
    80000bc0:	00765463          	bge	a2,t2,80000bc8 <.LBB15_19+0xc>
    80000bc4:	14060d63          	beqz	a2,80000d1e <.LBB15_43+0x96>
    80000bc8:	000eb483          	ld	s1,0(t4)
    80000bcc:	4629                	li	a2,10
    80000bce:	0c04d563          	bgez	s1,80000c98 <.LBB15_43+0x10>
  **pstr = ch;
    80000bd2:	01c50023          	sb	t3,0(a0)
        num = -(long long) num;
    80000bd6:	0505                	addi	a0,a0,1
    80000bd8:	409004b3          	neg	s1,s1
    80000bdc:	a875                	j	80000c98 <.LBB15_43+0x10>

0000000080000bde <.LBB15_23>:
    80000bde:	4621                	li	a2,8
  if (lflag >= 2)
    80000be0:	000a869b          	sext.w	a3,s5
    80000be4:	0a76c763          	blt	a3,t2,80000c92 <.LBB15_43+0xa>
    80000be8:	a075                	j	80000c94 <.LBB15_43+0xc>

0000000080000bea <.LBB15_24>:
  **pstr = ch;
    80000bea:	01e50023          	sb	t5,0(a0)
    80000bee:	01f500a3          	sb	t6,1(a0)
      putch('x', putdat);
    80000bf2:	0509                	addi	a0,a0,2
    80000bf4:	4a85                	li	s5,1

0000000080000bf6 <.LBB15_25>:
    80000bf6:	4641                	li	a2,16
  if (lflag >= 2)
    80000bf8:	000a869b          	sext.w	a3,s5
    80000bfc:	0876cb63          	blt	a3,t2,80000c92 <.LBB15_43+0xa>
    80000c00:	a851                	j	80000c94 <.LBB15_43+0xc>

0000000080000c02 <.LBB15_26>:
      if ((p = va_arg(ap, char *)) == NULL)
    80000c02:	000eb603          	ld	a2,0(t4)
    80000c06:	e609                	bnez	a2,80000c10 <.LBB15_61+0x8>

0000000080000c08 <.LBB15_61>:
    80000c08:	00001617          	auipc	a2,0x1
    80000c0c:	da760613          	addi	a2,a2,-601 # 800019af <D_i32+0x46f>
      if (width > 0 && padc != '-')
    80000c10:	0007069b          	sext.w	a3,a4
    80000c14:	0016a693          	slti	a3,a3,1
    80000c18:	0ffbf793          	zext.b	a5,s7
    80000c1c:	fd378793          	addi	a5,a5,-45
    80000c20:	0017b793          	seqz	a5,a5
    80000c24:	8edd                	or	a3,a3,a5
    80000c26:	ee8d                	bnez	a3,80000c60 <.LBB15_61+0x58>
        for (width -= strnlen(p, precision); width > 0; width--)
    80000c28:	0004841b          	sext.w	s0,s1
    80000c2c:	86b2                	mv	a3,a2
  while (n-- && *p)
    80000c2e:	c819                	beqz	s0,80000c44 <.LBB15_61+0x3c>
    80000c30:	00860ab3          	add	s5,a2,s0
    80000c34:	86b2                	mv	a3,a2
    80000c36:	0006c783          	lbu	a5,0(a3)
    80000c3a:	c789                	beqz	a5,80000c44 <.LBB15_61+0x3c>
    80000c3c:	147d                	addi	s0,s0,-1
    p++;
    80000c3e:	0685                	addi	a3,a3,1
  while (n-- && *p)
    80000c40:	f87d                	bnez	s0,80000c36 <.LBB15_61+0x2e>
    80000c42:	86d6                	mv	a3,s5
  return p - s;
    80000c44:	40d606bb          	subw	a3,a2,a3
        for (width -= strnlen(p, precision); width > 0; width--)
    80000c48:	9f35                	addw	a4,a4,a3
    80000c4a:	00e05b63          	blez	a4,80000c60 <.LBB15_61+0x58>
  **pstr = ch;
    80000c4e:	01750023          	sb	s7,0(a0)
        for (width -= strnlen(p, precision); width > 0; width--)
    80000c52:	0007069b          	sext.w	a3,a4
    80000c56:	377d                	addiw	a4,a4,-1
  (*pstr)++;
    80000c58:	0505                	addi	a0,a0,1
        for (width -= strnlen(p, precision); width > 0; width--)
    80000c5a:	fed9cae3          	blt	s3,a3,80000c4e <.LBB15_61+0x46>
    80000c5e:	4701                	li	a4,0
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80000c60:	00064403          	lbu	s0,0(a2)
    80000c64:	cc41                	beqz	s0,80000cfc <.LBB15_43+0x74>
    80000c66:	0605                	addi	a2,a2,1
    80000c68:	a809                	j	80000c7a <.LBB15_61+0x72>
  **pstr = ch;
    80000c6a:	00850023          	sb	s0,0(a0)
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80000c6e:	00064403          	lbu	s0,0(a2)
  (*pstr)++;
    80000c72:	0505                	addi	a0,a0,1
      for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
    80000c74:	377d                	addiw	a4,a4,-1
    80000c76:	0605                	addi	a2,a2,1
    80000c78:	c051                	beqz	s0,80000cfc <.LBB15_43+0x74>
    80000c7a:	0004869b          	sext.w	a3,s1
    80000c7e:	fe06c6e3          	bltz	a3,80000c6a <.LBB15_61+0x62>
    80000c82:	cead                	beqz	a3,80000cfc <.LBB15_43+0x74>
    80000c84:	34fd                	addiw	s1,s1,-1
    80000c86:	b7d5                	j	80000c6a <.LBB15_61+0x62>

0000000080000c88 <.LBB15_43>:
    80000c88:	4629                	li	a2,10
  if (lflag >= 2)
    80000c8a:	000a869b          	sext.w	a3,s5
    80000c8e:	0076d363          	bge	a3,t2,80000c94 <.LBB15_43+0xc>
  else if (lflag)
    80000c92:	c2d9                	beqz	a3,80000d18 <.LBB15_43+0x90>
    80000c94:	000eb483          	ld	s1,0(t4)
    digs[pos++] = num % base;
    80000c98:	02c4f6b3          	remu	a3,s1,a2
    80000c9c:	c436                	sw	a3,8(sp)
    80000c9e:	4685                	li	a3,1
    80000ca0:	00c4ed63          	bltu	s1,a2,80000cba <.LBB15_43+0x32>
    80000ca4:	4685                	li	a3,1
    80000ca6:	8442                	mv	s0,a6
    num /= base;
    80000ca8:	02c4d4b3          	divu	s1,s1,a2
    digs[pos++] = num % base;
    80000cac:	02c4f7b3          	remu	a5,s1,a2
    80000cb0:	0685                	addi	a3,a3,1
    80000cb2:	c01c                	sw	a5,0(s0)
    if (num < base)
    80000cb4:	0411                	addi	s0,s0,4
    80000cb6:	fec4f9e3          	bgeu	s1,a2,80000ca8 <.LBB15_43+0x20>
  while (width-- > pos)
    80000cba:	0007061b          	sext.w	a2,a4
    80000cbe:	2681                	sext.w	a3,a3
    80000cc0:	00c6d863          	bge	a3,a2,80000cd0 <.LBB15_43+0x48>
    80000cc4:	377d                	addiw	a4,a4,-1
  **pstr = ch;
    80000cc6:	01750023          	sb	s7,0(a0)
  (*pstr)++;
    80000cca:	0505                	addi	a0,a0,1
    80000ccc:	fee6cce3          	blt	a3,a4,80000cc4 <.LBB15_43+0x3c>
    80000cd0:	0ea1                	addi	t4,t4,8
  while (pos-- > 0)
    80000cd2:	00168613          	addi	a2,a3,1
    80000cd6:	068a                	slli	a3,a3,0x2
    80000cd8:	96c6                	add	a3,a3,a7
    80000cda:	a809                	j	80000cec <.LBB15_43+0x64>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80000cdc:	9f21                	addw	a4,a4,s0
  **pstr = ch;
    80000cde:	00e50023          	sb	a4,0(a0)
  (*pstr)++;
    80000ce2:	0505                	addi	a0,a0,1
  while (pos-- > 0)
    80000ce4:	167d                	addi	a2,a2,-1
    80000ce6:	16f1                	addi	a3,a3,-4
    80000ce8:	e0c9d5e3          	bge	s3,a2,80000af2 <sprintf+0x52>
    putch(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'), putdat);
    80000cec:	4298                	lw	a4,0(a3)
    80000cee:	05700413          	li	s0,87
    80000cf2:	feec65e3          	bltu	s8,a4,80000cdc <.LBB15_43+0x54>
    80000cf6:	03000413          	li	s0,48
    80000cfa:	b7cd                	j	80000cdc <.LBB15_43+0x54>
      for (; width > 0; width--)
    80000cfc:	0007061b          	sext.w	a2,a4
    80000d00:	0ea1                	addi	t4,t4,8
    80000d02:	dec058e3          	blez	a2,80000af2 <sprintf+0x52>
  **pstr = ch;
    80000d06:	01250023          	sb	s2,0(a0)
      for (; width > 0; width--)
    80000d0a:	0007061b          	sext.w	a2,a4
    80000d0e:	377d                	addiw	a4,a4,-1
  (*pstr)++;
    80000d10:	0505                	addi	a0,a0,1
      for (; width > 0; width--)
    80000d12:	fec9cae3          	blt	s3,a2,80000d06 <.LBB15_43+0x7e>
    80000d16:	bbf1                	j	80000af2 <sprintf+0x52>
    return va_arg(*ap, unsigned int);
    80000d18:	000ee483          	lwu	s1,0(t4)
    80000d1c:	bfb5                	j	80000c98 <.LBB15_43+0x10>
    return va_arg(*ap, int);
    80000d1e:	000ea483          	lw	s1,0(t4)
    80000d22:	4629                	li	a2,10
    80000d24:	f604dae3          	bgez	s1,80000c98 <.LBB15_43+0x10>
    80000d28:	b56d                	j	80000bd2 <.LBB15_19+0x16>
  return str - str0;
    80000d2a:	0006859b          	sext.w	a1,a3
  *str = 0;
    80000d2e:	00050023          	sb	zero,0(a0)
  return str - str0;
    80000d32:	852e                	mv	a0,a1
    80000d34:	6c32                	ld	s8,264(sp)
    80000d36:	6bd2                	ld	s7,272(sp)
    80000d38:	6b72                	ld	s6,280(sp)
    80000d3a:	7a92                	ld	s5,288(sp)
    80000d3c:	7a32                	ld	s4,296(sp)
    80000d3e:	79d2                	ld	s3,304(sp)
    80000d40:	7972                	ld	s2,312(sp)
    80000d42:	6496                	ld	s1,320(sp)
    80000d44:	6436                	ld	s0,328(sp)
    80000d46:	6119                	addi	sp,sp,384
    80000d48:	8082                	ret

0000000080000d4a <memcpy>:
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    80000d4a:	00a5e6b3          	or	a3,a1,a0
    80000d4e:	8ed1                	or	a3,a3,a2
    80000d50:	0076f713          	andi	a4,a3,7
    80000d54:	00c506b3          	add	a3,a0,a2
    80000d58:	cf19                	beqz	a4,80000d76 <memcpy+0x2c>
    while (d < (char*)(dest + len))
    80000d5a:	02d57963          	bgeu	a0,a3,80000d8c <memcpy+0x42>
    80000d5e:	86aa                	mv	a3,a0
      *d++ = *s++;
    80000d60:	00058703          	lb	a4,0(a1)
    80000d64:	0585                	addi	a1,a1,1
    80000d66:	00168793          	addi	a5,a3,1
    while (d < (char*)(dest + len))
    80000d6a:	167d                	addi	a2,a2,-1
      *d++ = *s++;
    80000d6c:	00e68023          	sb	a4,0(a3)
    80000d70:	86be                	mv	a3,a5
    80000d72:	f67d                	bnez	a2,80000d60 <memcpy+0x16>
    80000d74:	a821                	j	80000d8c <memcpy+0x42>
    while (d < (uintptr_t*)(dest + len))
    80000d76:	00d57b63          	bgeu	a0,a3,80000d8c <memcpy+0x42>
    80000d7a:	862a                	mv	a2,a0
      *d++ = *s++;
    80000d7c:	6198                	ld	a4,0(a1)
    80000d7e:	05a1                	addi	a1,a1,8
    80000d80:	00860793          	addi	a5,a2,8
    80000d84:	e218                	sd	a4,0(a2)
    80000d86:	863e                	mv	a2,a5
    while (d < (uintptr_t*)(dest + len))
    80000d88:	fed7eae3          	bltu	a5,a3,80000d7c <memcpy+0x32>
  return dest;
    80000d8c:	8082                	ret

0000000080000d8e <memset>:
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    80000d8e:	00c566b3          	or	a3,a0,a2
    80000d92:	8a9d                	andi	a3,a3,7
    80000d94:	ce91                	beqz	a3,80000db0 <memset+0x22>
    80000d96:	00c506b3          	add	a3,a0,a2
    while (d < (char*)(dest + len))
    80000d9a:	04d57263          	bgeu	a0,a3,80000dde <memset+0x50>
    80000d9e:	86aa                	mv	a3,a0
      *d++ = byte;
    80000da0:	00168713          	addi	a4,a3,1
    while (d < (char*)(dest + len))
    80000da4:	167d                	addi	a2,a2,-1
      *d++ = byte;
    80000da6:	00b68023          	sb	a1,0(a3)
    80000daa:	86ba                	mv	a3,a4
    80000dac:	fa75                	bnez	a2,80000da0 <memset+0x12>
    80000dae:	a805                	j	80000dde <memset+0x50>
    80000db0:	962a                	add	a2,a2,a0
    while (d < (uintptr_t*)(dest + len))
    80000db2:	02c57663          	bgeu	a0,a2,80000dde <memset+0x50>
    80000db6:	0ff5f593          	zext.b	a1,a1
    80000dba:	00859693          	slli	a3,a1,0x8
    80000dbe:	8dd5                	or	a1,a1,a3
    80000dc0:	100016b7          	lui	a3,0x10001
    80000dc4:	0692                	slli	a3,a3,0x4
    80000dc6:	0685                	addi	a3,a3,1 # 10001001 <.Lline_table_start0+0xffff884>
    80000dc8:	06c2                	slli	a3,a3,0x10
    80000dca:	0685                	addi	a3,a3,1
    80000dcc:	02d585b3          	mul	a1,a1,a3
    80000dd0:	86aa                	mv	a3,a0
      *d++ = word;
    80000dd2:	00868713          	addi	a4,a3,8
    80000dd6:	e28c                	sd	a1,0(a3)
    80000dd8:	86ba                	mv	a3,a4
    while (d < (uintptr_t*)(dest + len))
    80000dda:	fec76ce3          	bltu	a4,a2,80000dd2 <memset+0x44>
  return dest;
    80000dde:	8082                	ret

0000000080000de0 <strnlen>:
{
    80000de0:	862a                	mv	a2,a0
  while (n-- && *p)
    80000de2:	c999                	beqz	a1,80000df8 <strnlen+0x18>
    80000de4:	00b506b3          	add	a3,a0,a1
    80000de8:	862a                	mv	a2,a0
    80000dea:	00064703          	lbu	a4,0(a2)
    80000dee:	c709                	beqz	a4,80000df8 <strnlen+0x18>
    80000df0:	15fd                	addi	a1,a1,-1
    p++;
    80000df2:	0605                	addi	a2,a2,1
  while (n-- && *p)
    80000df4:	f9fd                	bnez	a1,80000dea <strnlen+0xa>
    80000df6:	8636                	mv	a2,a3
  return p - s;
    80000df8:	40a60533          	sub	a0,a2,a0
    80000dfc:	8082                	ret

0000000080000dfe <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    80000dfe:	00054603          	lbu	a2,0(a0)
    c2 = *s2++;
    80000e02:	0005c683          	lbu	a3,0(a1)
    c1 = *s1++;
    80000e06:	0505                	addi	a0,a0,1
    c2 = *s2++;
    80000e08:	0585                	addi	a1,a1,1
  } while (c1 != 0 && c1 == c2);
    80000e0a:	00c03733          	snez	a4,a2
    80000e0e:	00d647b3          	xor	a5,a2,a3
    80000e12:	0017b793          	seqz	a5,a5
    80000e16:	8f7d                	and	a4,a4,a5
    80000e18:	f37d                	bnez	a4,80000dfe <strcmp>

  return c1 - c2;
    80000e1a:	40d60533          	sub	a0,a2,a3
    80000e1e:	8082                	ret

0000000080000e20 <strcpy>:
}

char* strcpy(char* dest, const char* src)
{
    80000e20:	4601                	li	a2,0
  char* d = dest;
  while ((*d++ = *src++))
    80000e22:	00c586b3          	add	a3,a1,a2
    80000e26:	0006c683          	lbu	a3,0(a3)
    80000e2a:	00c50733          	add	a4,a0,a2
    80000e2e:	00d70023          	sb	a3,0(a4)
    80000e32:	0605                	addi	a2,a2,1
    80000e34:	f6fd                	bnez	a3,80000e22 <strcpy+0x2>
    ;
  return dest;
    80000e36:	8082                	ret

0000000080000e38 <atol>:
}

long atol(const char* str)
{
    80000e38:	02000613          	li	a2,32
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    80000e3c:	00054583          	lbu	a1,0(a0)
    80000e40:	00c59763          	bne	a1,a2,80000e4e <atol+0x16>
    str++;
    80000e44:	0505                	addi	a0,a0,1
  while (*str == ' ')
    80000e46:	00054583          	lbu	a1,0(a0)
    80000e4a:	fec58de3          	beq	a1,a2,80000e44 <atol+0xc>
    80000e4e:	02b00613          	li	a2,43
    80000e52:	00c58663          	beq	a1,a2,80000e5e <atol+0x26>
    80000e56:	02d00613          	li	a2,45
    80000e5a:	02c59d63          	bne	a1,a2,80000e94 <atol+0x5c>

  if (*str == '-' || *str == '+') {
    sign = *str == '-';
    80000e5e:	fd358593          	addi	a1,a1,-45
    80000e62:	0015b613          	seqz	a2,a1
    str++;
  }
    80000e66:	0505                	addi	a0,a0,1

  while (*str) {
    80000e68:	00054683          	lbu	a3,0(a0)
    80000e6c:	ca85                	beqz	a3,80000e9c <atol+0x64>
    80000e6e:	4581                	li	a1,0
    80000e70:	0505                	addi	a0,a0,1
    80000e72:	4729                	li	a4,10
    res *= 10;
    res += *str++ - '0';
    80000e74:	0ff6f793          	zext.b	a5,a3
  while (*str) {
    80000e78:	00054683          	lbu	a3,0(a0)
    res *= 10;
    80000e7c:	02e585b3          	mul	a1,a1,a4
    res += *str++ - '0';
    80000e80:	95be                	add	a1,a1,a5
    80000e82:	fd058593          	addi	a1,a1,-48
  while (*str) {
    80000e86:	0505                	addi	a0,a0,1
    80000e88:	f6f5                	bnez	a3,80000e74 <atol+0x3c>
  }

  return sign ? -res : res;
    80000e8a:	c219                	beqz	a2,80000e90 <atol+0x58>
    80000e8c:	40b005b3          	neg	a1,a1
    80000e90:	852e                	mv	a0,a1
    80000e92:	8082                	ret
    80000e94:	4601                	li	a2,0
  while (*str) {
    80000e96:	00054683          	lbu	a3,0(a0)
    80000e9a:	faf1                	bnez	a3,80000e6e <atol+0x36>
    80000e9c:	4581                	li	a1,0
  return sign ? -res : res;
    80000e9e:	f67d                	bnez	a2,80000e8c <atol+0x54>
    80000ea0:	bfc5                	j	80000e90 <atol+0x58>
	...

0000000080000ea4 <_close>:
// Provided by linker script
extern char _end;            // end of bss
static char *heap_end;       // current heap pointer

int _close(int fd) {
    (void)fd; return -1;     // no files
    80000ea4:	557d                	li	a0,-1
    80000ea6:	8082                	ret

0000000080000ea8 <_fstat>:
}

int _fstat(int fd, struct stat *st) {
    (void)fd; if (st) { st->st_mode = S_IFCHR; } return 0; // pretend char device
    80000ea8:	c199                	beqz	a1,80000eae <_fstat+0x6>
    80000eaa:	6509                	lui	a0,0x2
    80000eac:	c1c8                	sw	a0,4(a1)
    80000eae:	4501                	li	a0,0
    80000eb0:	8082                	ret

0000000080000eb2 <_isatty>:
}

int _isatty(int fd) {
    (void)fd; return 1;      // yes, treat as tty
    80000eb2:	4505                	li	a0,1
    80000eb4:	8082                	ret

0000000080000eb6 <_lseek>:
}

off_t _lseek(int fd, off_t offset, int whence) {
    (void)fd; (void)offset; (void)whence; return 0; // not supported
    80000eb6:	4501                	li	a0,0
    80000eb8:	8082                	ret

0000000080000eba <_open>:
}

int _open(const char *path, int flags, int mode) {
    (void)path; (void)flags; (void)mode; return -1; // fail
    80000eba:	557d                	li	a0,-1
    80000ebc:	8082                	ret

0000000080000ebe <_read>:
}

int _read(int fd, void *buf, size_t cnt) {
    (void)fd; (void)buf; (void)cnt; return 0; // EOF
    80000ebe:	4501                	li	a0,0
    80000ec0:	8082                	ret

0000000080000ec2 <_sbrk>:
}

// Simple bump allocator. NOT thread-safe. No heap limit enforcement besides arbitrary max.
void* _sbrk(ptrdiff_t incr) {
    if (heap_end == 0) heap_end = &_end;
    80000ec2:	00001617          	auipc	a2,0x1
    80000ec6:	74e60613          	addi	a2,a2,1870 # 80002610 <heap_end>
    80000eca:	620c                	ld	a1,0(a2)
    80000ecc:	e591                	bnez	a1,80000ed8 <.LBB6_4+0xa>

0000000080000ece <.LBB6_4>:
    80000ece:	0013f597          	auipc	a1,0x13f
    80000ed2:	13258593          	addi	a1,a1,306 # 80140000 <_end>
    80000ed6:	e20c                	sd	a1,0(a2)
    char *prev = heap_end;
    80000ed8:	620c                	ld	a1,0(a2)
    heap_end += incr;
    80000eda:	952e                	add	a0,a0,a1
    80000edc:	e208                	sd	a0,0(a2)
    return prev; // no out-of-memory check
    80000ede:	852e                	mv	a0,a1
    80000ee0:	8082                	ret

0000000080000ee2 <_write>:
}

int _write(int fd, const void *buf, size_t cnt) {
    80000ee2:	7179                	addi	sp,sp,-48
    // Reuse existing proxy write (putchar based) if available.
    // We declare printstr here weakly to avoid circular deps.
    extern void printstr(const char*) __attribute__((weak));
    if (printstr) {
    80000ee4:	f406                	sd	ra,40(sp)
    80000ee6:	f022                	sd	s0,32(sp)
    80000ee8:	ec26                	sd	s1,24(sp)
    80000eea:	e84a                	sd	s2,16(sp)

0000000080000eec <.LBB7_5>:
    80000eec:	fffff517          	auipc	a0,0xfffff
    80000ef0:	5e850513          	addi	a0,a0,1512 # 800004d4 <printstr>
    80000ef4:	8932                	mv	s2,a2
    80000ef6:	c505                	beqz	a0,80000f1e <.LBB7_5+0x32>
        // crude: assume buf is text without NUL, allocate temp with NUL termination
        const char *c = (const char*)buf;
        for (size_t i=0;i<cnt;i++) {
    80000ef8:	02090363          	beqz	s2,80000f1e <.LBB7_5+0x32>
    80000efc:	84ae                	mv	s1,a1
    80000efe:	844a                	mv	s0,s2
            char tmp[2] = { c[i], 0 };
    80000f00:	00048503          	lb	a0,0(s1)
    80000f04:	00a10723          	sb	a0,14(sp)
    80000f08:	000107a3          	sb	zero,15(sp)
            printstr(tmp);
    80000f0c:	00e10513          	addi	a0,sp,14
    80000f10:	fffff097          	auipc	ra,0xfffff
    80000f14:	5c4080e7          	jalr	1476(ra) # 800004d4 <printstr>
        for (size_t i=0;i<cnt;i++) {
    80000f18:	147d                	addi	s0,s0,-1
    80000f1a:	0485                	addi	s1,s1,1
    80000f1c:	f075                	bnez	s0,80000f00 <.LBB7_5+0x14>
        }
    }
    return (int)cnt;
    80000f1e:	0009051b          	sext.w	a0,s2
    80000f22:	6942                	ld	s2,16(sp)
    80000f24:	64e2                	ld	s1,24(sp)
    80000f26:	7402                	ld	s0,32(sp)
    80000f28:	70a2                	ld	ra,40(sp)
    80000f2a:	6145                	addi	sp,sp,48
    80000f2c:	8082                	ret

0000000080000f2e <__errno>:
}

// Optional errno (newlib may look for it)
int *__errno(void) {
    static int e; return &e;
    80000f2e:	00001517          	auipc	a0,0x1
    80000f32:	6ea50513          	addi	a0,a0,1770 # 80002618 <__errno.e>
    80000f36:	8082                	ret
